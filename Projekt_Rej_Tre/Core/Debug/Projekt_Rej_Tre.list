
Projekt_Rej_Tre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003744  0800e208  0800e208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801194c  0801194c  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  0801194c  0801194c  0002194c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011954  08011954  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011954  08011954  00021954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011958  08011958  00021958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801195c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e34  20000228  08011b84  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  08011b84  0003105c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dec4  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000476a  00000000  00000000  0004e11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00052888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b834  00000000  00000000  00053a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000199f1  00000000  00000000  0006f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00091a28  00000000  00000000  00088c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011a675  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000f80  00000000  00000000  0011a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a00  00000000  00000000  0011b648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e1f0 	.word	0x0800e1f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	0800e1f0 	.word	0x0800e1f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b9a4 	b.w	8000f78 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f83c 	bl	8000cb4 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__aeabi_d2ulz+0x34>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fcd1 	bl	8000628 <__aeabi_dmul>
 8000c86:	f7ff ffa7 	bl	8000bd8 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc52 	bl	8000534 <__aeabi_ui2d>
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f7ff fcc8 	bl	8000628 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fb0a 	bl	80002b8 <__aeabi_dsub>
 8000ca4:	f7ff ff98 	bl	8000bd8 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <__udivmoddi4>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	9d08      	ldr	r5, [sp, #32]
 8000cba:	4604      	mov	r4, r0
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8083 	bne.w	8000dca <__udivmoddi4+0x116>
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	4617      	mov	r7, r2
 8000cc8:	d947      	bls.n	8000d5a <__udivmoddi4+0xa6>
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	b142      	cbz	r2, 8000ce2 <__udivmoddi4+0x2e>
 8000cd0:	f1c2 0020 	rsb	r0, r2, #32
 8000cd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	4097      	lsls	r7, r2
 8000cdc:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ce6:	0c23      	lsrs	r3, r4, #16
 8000ce8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cec:	fa1f fe87 	uxth.w	lr, r7
 8000cf0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x60>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d06:	f080 8119 	bcs.w	8000f3c <__udivmoddi4+0x288>
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	f240 8116 	bls.w	8000f3c <__udivmoddi4+0x288>
 8000d10:	3e02      	subs	r6, #2
 8000d12:	443b      	add	r3, r7
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d909      	bls.n	8000d40 <__udivmoddi4+0x8c>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d32:	f080 8105 	bcs.w	8000f40 <__udivmoddi4+0x28c>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f240 8102 	bls.w	8000f40 <__udivmoddi4+0x28c>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	443c      	add	r4, r7
 8000d40:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d44:	eba4 040e 	sub.w	r4, r4, lr
 8000d48:	2600      	movs	r6, #0
 8000d4a:	b11d      	cbz	r5, 8000d54 <__udivmoddi4+0xa0>
 8000d4c:	40d4      	lsrs	r4, r2
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e9c5 4300 	strd	r4, r3, [r5]
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xaa>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f282 	clz	r2, r2
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d150      	bne.n	8000e08 <__udivmoddi4+0x154>
 8000d66:	1bcb      	subs	r3, r1, r7
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	2601      	movs	r6, #1
 8000d72:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d76:	0c21      	lsrs	r1, r4, #16
 8000d78:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d80:	fb08 f30c 	mul.w	r3, r8, ip
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xe4>
 8000d88:	1879      	adds	r1, r7, r1
 8000d8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0xe2>
 8000d90:	428b      	cmp	r3, r1
 8000d92:	f200 80e9 	bhi.w	8000f68 <__udivmoddi4+0x2b4>
 8000d96:	4684      	mov	ip, r0
 8000d98:	1ac9      	subs	r1, r1, r3
 8000d9a:	b2a3      	uxth	r3, r4
 8000d9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000da8:	fb08 f800 	mul.w	r8, r8, r0
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x10c>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x10a>
 8000db8:	45a0      	cmp	r8, r4
 8000dba:	f200 80d9 	bhi.w	8000f70 <__udivmoddi4+0x2bc>
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	eba4 0408 	sub.w	r4, r4, r8
 8000dc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dc8:	e7bf      	b.n	8000d4a <__udivmoddi4+0x96>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x12e>
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	f000 80b1 	beq.w	8000f36 <__udivmoddi4+0x282>
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dda:	4630      	mov	r0, r6
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	fab3 f683 	clz	r6, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d14a      	bne.n	8000e80 <__udivmoddi4+0x1cc>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0x140>
 8000dee:	4282      	cmp	r2, r0
 8000df0:	f200 80b8 	bhi.w	8000f64 <__udivmoddi4+0x2b0>
 8000df4:	1a84      	subs	r4, r0, r2
 8000df6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0a8      	beq.n	8000d54 <__udivmoddi4+0xa0>
 8000e02:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e10:	4097      	lsls	r7, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1a:	40d9      	lsrs	r1, r3
 8000e1c:	4330      	orrs	r0, r6
 8000e1e:	0c03      	lsrs	r3, r0, #16
 8000e20:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e24:	fa1f f887 	uxth.w	r8, r7
 8000e28:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e30:	fb06 f108 	mul.w	r1, r6, r8
 8000e34:	4299      	cmp	r1, r3
 8000e36:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3a:	d909      	bls.n	8000e50 <__udivmoddi4+0x19c>
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e42:	f080 808d 	bcs.w	8000f60 <__udivmoddi4+0x2ac>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 808a 	bls.w	8000f60 <__udivmoddi4+0x2ac>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	443b      	add	r3, r7
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b281      	uxth	r1, r0
 8000e54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e60:	fb00 f308 	mul.w	r3, r0, r8
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x1c4>
 8000e68:	1879      	adds	r1, r7, r1
 8000e6a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6e:	d273      	bcs.n	8000f58 <__udivmoddi4+0x2a4>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d971      	bls.n	8000f58 <__udivmoddi4+0x2a4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4439      	add	r1, r7
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e7e:	e778      	b.n	8000d72 <__udivmoddi4+0xbe>
 8000e80:	f1c6 0c20 	rsb	ip, r6, #32
 8000e84:	fa03 f406 	lsl.w	r4, r3, r6
 8000e88:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e8c:	431c      	orrs	r4, r3
 8000e8e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e92:	fa01 f306 	lsl.w	r3, r1, r6
 8000e96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	0c3b      	lsrs	r3, r7, #16
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fa1f f884 	uxth.w	r8, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb2:	fb09 fa08 	mul.w	sl, r9, r8
 8000eb6:	458a      	cmp	sl, r1
 8000eb8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ebc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x220>
 8000ec2:	1861      	adds	r1, r4, r1
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ec8:	d248      	bcs.n	8000f5c <__udivmoddi4+0x2a8>
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	d946      	bls.n	8000f5c <__udivmoddi4+0x2a8>
 8000ece:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed2:	4421      	add	r1, r4
 8000ed4:	eba1 010a 	sub.w	r1, r1, sl
 8000ed8:	b2bf      	uxth	r7, r7
 8000eda:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ede:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ee6:	fb00 f808 	mul.w	r8, r0, r8
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x24a>
 8000eee:	19e7      	adds	r7, r4, r7
 8000ef0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef4:	d22e      	bcs.n	8000f54 <__udivmoddi4+0x2a0>
 8000ef6:	45b8      	cmp	r8, r7
 8000ef8:	d92c      	bls.n	8000f54 <__udivmoddi4+0x2a0>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4427      	add	r7, r4
 8000efe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f02:	eba7 0708 	sub.w	r7, r7, r8
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	454f      	cmp	r7, r9
 8000f0c:	46c6      	mov	lr, r8
 8000f0e:	4649      	mov	r1, r9
 8000f10:	d31a      	bcc.n	8000f48 <__udivmoddi4+0x294>
 8000f12:	d017      	beq.n	8000f44 <__udivmoddi4+0x290>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x27a>
 8000f16:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f1e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f22:	40f2      	lsrs	r2, r6
 8000f24:	ea4c 0202 	orr.w	r2, ip, r2
 8000f28:	40f7      	lsrs	r7, r6
 8000f2a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	462e      	mov	r6, r5
 8000f38:	4628      	mov	r0, r5
 8000f3a:	e70b      	b.n	8000d54 <__udivmoddi4+0xa0>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	e6e9      	b.n	8000d14 <__udivmoddi4+0x60>
 8000f40:	4618      	mov	r0, r3
 8000f42:	e6fd      	b.n	8000d40 <__udivmoddi4+0x8c>
 8000f44:	4543      	cmp	r3, r8
 8000f46:	d2e5      	bcs.n	8000f14 <__udivmoddi4+0x260>
 8000f48:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f4c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f50:	3801      	subs	r0, #1
 8000f52:	e7df      	b.n	8000f14 <__udivmoddi4+0x260>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e7d2      	b.n	8000efe <__udivmoddi4+0x24a>
 8000f58:	4660      	mov	r0, ip
 8000f5a:	e78d      	b.n	8000e78 <__udivmoddi4+0x1c4>
 8000f5c:	4681      	mov	r9, r0
 8000f5e:	e7b9      	b.n	8000ed4 <__udivmoddi4+0x220>
 8000f60:	4666      	mov	r6, ip
 8000f62:	e775      	b.n	8000e50 <__udivmoddi4+0x19c>
 8000f64:	4630      	mov	r0, r6
 8000f66:	e74a      	b.n	8000dfe <__udivmoddi4+0x14a>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	4439      	add	r1, r7
 8000f6e:	e713      	b.n	8000d98 <__udivmoddi4+0xe4>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	e724      	b.n	8000dc0 <__udivmoddi4+0x10c>
 8000f76:	bf00      	nop

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <GFX_SetFont+0x1c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200002b8 	.word	0x200002b8

08000f9c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fb4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1acb      	subs	r3, r1, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bfb8      	it	lt
 8000fc2:	425b      	neglt	r3, r3
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	bfcc      	ite	gt
 8000fc8:	2301      	movgt	r3, #1
 8000fca:	2300      	movle	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000fd0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	623b      	str	r3, [r7, #32]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dd0b      	ble.n	8001010 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b29b      	uxth	r3, r3
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	bfb8      	it	lt
 8001028:	425b      	neglt	r3, r3
 800102a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800102c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001030:	0fda      	lsrs	r2, r3, #31
 8001032:	4413      	add	r3, r2
 8001034:	105b      	asrs	r3, r3, #1
 8001036:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	da02      	bge.n	8001046 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001044:	e02e      	b.n	80010a4 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8001046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800104c:	e02a      	b.n	80010a4 <GFX_WriteLine+0x108>
	        if (steep) {
 800104e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001052:	2b00      	cmp	r3, #0
 8001054:	d008      	beq.n	8001068 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	b21b      	sxth	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	b211      	sxth	r1, r2
 800105e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fcdc 	bl	8001a1e <ILI9341_WritePixel>
 8001066:	e007      	b.n	8001078 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	b21b      	sxth	r3, r3
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	b211      	sxth	r1, r2
 8001070:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fcd3 	bl	8001a1e <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001078:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800107a:	8abb      	ldrh	r3, [r7, #20]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001082:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001086:	2b00      	cmp	r3, #0
 8001088:	da09      	bge.n	800109e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800108a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001094:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001096:	8afb      	ldrh	r3, [r7, #22]
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	ddd0      	ble.n	800104e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3730      	adds	r7, #48	; 0x30
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af02      	add	r7, sp, #8
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	4613      	mov	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff ff60 	bl	8000f9c <GFX_WriteLine>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff4a 	bl	8000f9c <GFX_WriteLine>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	460b      	mov	r3, r1
 8001120:	80fb      	strh	r3, [r7, #6]
 8001122:	4613      	mov	r3, r2
 8001124:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	8b3b      	ldrh	r3, [r7, #24]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff ffd9 	bl	80010e4 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8001132:	88ba      	ldrh	r2, [r7, #4]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4413      	add	r3, r2
 8001138:	1e59      	subs	r1, r3, #1
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	8b3b      	ldrh	r3, [r7, #24]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ffd0 	bl	80010e4 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8001144:	88ba      	ldrh	r2, [r7, #4]
 8001146:	8b3b      	ldrh	r3, [r7, #24]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ffb3 	bl	80010b6 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	1e58      	subs	r0, r3, #1
 8001158:	88ba      	ldrh	r2, [r7, #4]
 800115a:	8b3b      	ldrh	r3, [r7, #24]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	f7ff ffaa 	bl	80010b6 <GFX_DrawFastVLine>

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	4611      	mov	r1, r2
 8001176:	461a      	mov	r2, r3
 8001178:	460b      	mov	r3, r1
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	4613      	mov	r3, r2
 800117e:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e008      	b.n	8001198 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001186:	88ba      	ldrh	r2, [r7, #4]
 8001188:	8c3b      	ldrh	r3, [r7, #32]
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff ff92 	bl	80010b6 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <GFX_DrawFillRectangle+0x1c>
    }

}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <EF_SetFont+0x1c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200002bc 	.word	0x200002bc

080011d0 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <EF_GetFontHeight+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	200002bc 	.word	0x200002bc

080011e8 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <EF_GetFontStartChar+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	785b      	ldrb	r3, [r3, #1]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200002bc 	.word	0x200002bc

08001200 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <EF_GetFontEndChar+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	789b      	ldrb	r3, [r3, #2]
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200002bc 	.word	0x200002bc

08001218 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <EF_GetFontSpaceWidth+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	78db      	ldrb	r3, [r3, #3]
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	200002bc 	.word	0x200002bc

08001230 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2bc5      	cmp	r3, #197	; 0xc5
 8001244:	d052      	beq.n	80012ec <EF_DecodePolish+0xbc>
 8001246:	2bc5      	cmp	r3, #197	; 0xc5
 8001248:	f300 80e7 	bgt.w	800141a <EF_DecodePolish+0x1ea>
 800124c:	2bc3      	cmp	r3, #195	; 0xc3
 800124e:	d002      	beq.n	8001256 <EF_DecodePolish+0x26>
 8001250:	2bc4      	cmp	r3, #196	; 0xc4
 8001252:	d00a      	beq.n	800126a <EF_DecodePolish+0x3a>
 8001254:	e0e1      	b.n	800141a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	2b93      	cmp	r3, #147	; 0x93
 800125a:	d002      	beq.n	8001262 <EF_DecodePolish+0x32>
 800125c:	2bb3      	cmp	r3, #179	; 0xb3
 800125e:	d002      	beq.n	8001266 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001260:	e0db      	b.n	800141a <EF_DecodePolish+0x1ea>
			return 0x84;
 8001262:	2384      	movs	r3, #132	; 0x84
 8001264:	e0da      	b.n	800141c <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001266:	238d      	movs	r3, #141	; 0x8d
 8001268:	e0d8      	b.n	800141c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	3b84      	subs	r3, #132	; 0x84
 800126e:	2b15      	cmp	r3, #21
 8001270:	f200 80d0 	bhi.w	8001414 <EF_DecodePolish+0x1e4>
 8001274:	a201      	add	r2, pc, #4	; (adr r2, 800127c <EF_DecodePolish+0x4c>)
 8001276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127a:	bf00      	nop
 800127c:	080012d5 	.word	0x080012d5
 8001280:	080012e1 	.word	0x080012e1
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012e9 	.word	0x080012e9
 800128c:	08001415 	.word	0x08001415
 8001290:	08001415 	.word	0x08001415
 8001294:	08001415 	.word	0x08001415
 8001298:	08001415 	.word	0x08001415
 800129c:	08001415 	.word	0x08001415
 80012a0:	08001415 	.word	0x08001415
 80012a4:	08001415 	.word	0x08001415
 80012a8:	08001415 	.word	0x08001415
 80012ac:	08001415 	.word	0x08001415
 80012b0:	08001415 	.word	0x08001415
 80012b4:	08001415 	.word	0x08001415
 80012b8:	08001415 	.word	0x08001415
 80012bc:	08001415 	.word	0x08001415
 80012c0:	08001415 	.word	0x08001415
 80012c4:	08001415 	.word	0x08001415
 80012c8:	08001415 	.word	0x08001415
 80012cc:	080012d9 	.word	0x080012d9
 80012d0:	080012e5 	.word	0x080012e5
		{
		case 0x84: // Ą
			return 0x7F;
 80012d4:	237f      	movs	r3, #127	; 0x7f
 80012d6:	e0a1      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 80012d8:	2381      	movs	r3, #129	; 0x81
 80012da:	e09f      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	e09d      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 80012e0:	2388      	movs	r3, #136	; 0x88
 80012e2:	e09b      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 80012e4:	238a      	movs	r3, #138	; 0x8a
 80012e6:	e099      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 80012e8:	2389      	movs	r3, #137	; 0x89
 80012ea:	e097      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	3b81      	subs	r3, #129	; 0x81
 80012f0:	2b3b      	cmp	r3, #59	; 0x3b
 80012f2:	f200 8091 	bhi.w	8001418 <EF_DecodePolish+0x1e8>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <EF_DecodePolish+0xcc>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	080013ed 	.word	0x080013ed
 8001300:	08001401 	.word	0x08001401
 8001304:	080013f1 	.word	0x080013f1
 8001308:	08001405 	.word	0x08001405
 800130c:	08001419 	.word	0x08001419
 8001310:	08001419 	.word	0x08001419
 8001314:	08001419 	.word	0x08001419
 8001318:	08001419 	.word	0x08001419
 800131c:	08001419 	.word	0x08001419
 8001320:	08001419 	.word	0x08001419
 8001324:	08001419 	.word	0x08001419
 8001328:	08001419 	.word	0x08001419
 800132c:	08001419 	.word	0x08001419
 8001330:	08001419 	.word	0x08001419
 8001334:	08001419 	.word	0x08001419
 8001338:	08001419 	.word	0x08001419
 800133c:	08001419 	.word	0x08001419
 8001340:	08001419 	.word	0x08001419
 8001344:	08001419 	.word	0x08001419
 8001348:	08001419 	.word	0x08001419
 800134c:	08001419 	.word	0x08001419
 8001350:	08001419 	.word	0x08001419
 8001354:	08001419 	.word	0x08001419
 8001358:	08001419 	.word	0x08001419
 800135c:	08001419 	.word	0x08001419
 8001360:	080013f5 	.word	0x080013f5
 8001364:	08001409 	.word	0x08001409
 8001368:	08001419 	.word	0x08001419
 800136c:	08001419 	.word	0x08001419
 8001370:	08001419 	.word	0x08001419
 8001374:	08001419 	.word	0x08001419
 8001378:	08001419 	.word	0x08001419
 800137c:	08001419 	.word	0x08001419
 8001380:	08001419 	.word	0x08001419
 8001384:	08001419 	.word	0x08001419
 8001388:	08001419 	.word	0x08001419
 800138c:	08001419 	.word	0x08001419
 8001390:	08001419 	.word	0x08001419
 8001394:	08001419 	.word	0x08001419
 8001398:	08001419 	.word	0x08001419
 800139c:	08001419 	.word	0x08001419
 80013a0:	08001419 	.word	0x08001419
 80013a4:	08001419 	.word	0x08001419
 80013a8:	08001419 	.word	0x08001419
 80013ac:	08001419 	.word	0x08001419
 80013b0:	08001419 	.word	0x08001419
 80013b4:	08001419 	.word	0x08001419
 80013b8:	08001419 	.word	0x08001419
 80013bc:	08001419 	.word	0x08001419
 80013c0:	08001419 	.word	0x08001419
 80013c4:	08001419 	.word	0x08001419
 80013c8:	08001419 	.word	0x08001419
 80013cc:	08001419 	.word	0x08001419
 80013d0:	08001419 	.word	0x08001419
 80013d4:	08001419 	.word	0x08001419
 80013d8:	08001419 	.word	0x08001419
 80013dc:	080013f9 	.word	0x080013f9
 80013e0:	0800140d 	.word	0x0800140d
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001411 	.word	0x08001411
		{
		case 0x81: // Ł
			return 0x82;
 80013ec:	2382      	movs	r3, #130	; 0x82
 80013ee:	e015      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 80013f0:	2383      	movs	r3, #131	; 0x83
 80013f2:	e013      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 80013f4:	2385      	movs	r3, #133	; 0x85
 80013f6:	e011      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 80013f8:	2386      	movs	r3, #134	; 0x86
 80013fa:	e00f      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 80013fc:	2387      	movs	r3, #135	; 0x87
 80013fe:	e00d      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001400:	238b      	movs	r3, #139	; 0x8b
 8001402:	e00b      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001404:	238c      	movs	r3, #140	; 0x8c
 8001406:	e009      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001408:	238e      	movs	r3, #142	; 0x8e
 800140a:	e007      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800140c:	238f      	movs	r3, #143	; 0x8f
 800140e:	e005      	b.n	800141c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001410:	2390      	movs	r3, #144	; 0x90
 8001412:	e003      	b.n	800141c <EF_DecodePolish+0x1ec>
		break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001418:	bf00      	nop
	}

	return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af02      	add	r7, sp, #8
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	4603      	mov	r3, r0
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
 8001442:	4613      	mov	r3, r2
 8001444:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001446:	f7ff fecf 	bl	80011e8 <EF_GetFontStartChar>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b20      	cmp	r3, #32
 8001458:	d120      	bne.n	800149c <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800145a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800145e:	2b01      	cmp	r3, #1
 8001460:	d114      	bne.n	800148c <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001462:	88bc      	ldrh	r4, [r7, #4]
 8001464:	887d      	ldrh	r5, [r7, #2]
 8001466:	f7ff fed7 	bl	8001218 <EF_GetFontSpaceWidth>
 800146a:	4603      	mov	r3, r0
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	0052      	lsls	r2, r2, #1
 8001472:	4413      	add	r3, r2
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <EF_PutChar+0x1a4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b299      	uxth	r1, r3
 800147e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	460b      	mov	r3, r1
 8001484:	4629      	mov	r1, r5
 8001486:	4620      	mov	r0, r4
 8001488:	f7ff fe6f 	bl	800116a <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 800148c:	f7ff fec4 	bl	8001218 <EF_GetFontSpaceWidth>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	0052      	lsls	r2, r2, #1
 8001496:	4413      	add	r3, r2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e093      	b.n	80015c4 <EF_PutChar+0x19c>
	}

	// Return if char is not in our font
	if(CharNumber > EF_GetFontEndChar())
 800149c:	f7ff feb0 	bl	8001200 <EF_GetFontEndChar>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	7c7b      	ldrb	r3, [r7, #17]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <EF_PutChar+0x86>
	{
		return 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e08a      	b.n	80015c4 <EF_PutChar+0x19c>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <EF_PutChar+0x1a4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <EF_PutChar+0x1a4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	4a42      	ldr	r2, [pc, #264]	; (80015cc <EF_PutChar+0x1a4>)
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	6851      	ldr	r1, [r2, #4]
 80014c8:	7c7a      	ldrb	r2, [r7, #17]
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	440a      	add	r2, r1
 80014ce:	8852      	ldrh	r2, [r2, #2]
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	83fb      	strh	r3, [r7, #30]
 80014d8:	e066      	b.n	80015a8 <EF_PutChar+0x180>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	777b      	strb	r3, [r7, #29]
 80014e4:	e053      	b.n	800158e <EF_PutChar+0x166>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 80014ec:	7efb      	ldrb	r3, [r7, #27]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d905      	bls.n	80014fe <EF_PutChar+0xd6>
			{
				CharBits = 8; // Full byte
 80014f2:	2308      	movs	r3, #8
 80014f4:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 80014f6:	7efb      	ldrb	r3, [r7, #27]
 80014f8:	3b08      	subs	r3, #8
 80014fa:	76fb      	strb	r3, [r7, #27]
 80014fc:	e001      	b.n	8001502 <EF_PutChar+0xda>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 80014fe:	7efb      	ldrb	r3, [r7, #27]
 8001500:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001502:	2300      	movs	r3, #0
 8001504:	74bb      	strb	r3, [r7, #18]
 8001506:	e038      	b.n	800157a <EF_PutChar+0x152>
			{
				// Check bit first from left
				if(line & 0x80)
 8001508:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da15      	bge.n	800153c <EF_PutChar+0x114>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	b29b      	uxth	r3, r3
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	b29a      	uxth	r2, r3
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	b29a      	uxth	r2, r3
 800151e:	7cbb      	ldrb	r3, [r7, #18]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	b218      	sxth	r0, r3
 8001528:	887a      	ldrh	r2, [r7, #2]
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	b21b      	sxth	r3, r3
 8001532:	883a      	ldrh	r2, [r7, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f000 fa72 	bl	8001a1e <ILI9341_WritePixel>
 800153a:	e018      	b.n	800156e <EF_PutChar+0x146>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 800153c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001540:	2b01      	cmp	r3, #1
 8001542:	d114      	bne.n	800156e <EF_PutChar+0x146>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001544:	7f7b      	ldrb	r3, [r7, #29]
 8001546:	b29b      	uxth	r3, r3
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	b29a      	uxth	r2, r3
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	b29a      	uxth	r2, r3
 8001552:	7cbb      	ldrb	r3, [r7, #18]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	b218      	sxth	r0, r3
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	b21b      	sxth	r3, r3
 8001566:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001568:	4619      	mov	r1, r3
 800156a:	f000 fa58 	bl	8001a1e <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800156e:	7cbb      	ldrb	r3, [r7, #18]
 8001570:	3301      	adds	r3, #1
 8001572:	74bb      	strb	r3, [r7, #18]
 8001574:	7cfb      	ldrb	r3, [r7, #19]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	74fb      	strb	r3, [r7, #19]
 800157a:	7cba      	ldrb	r2, [r7, #18]
 800157c:	7f3b      	ldrb	r3, [r7, #28]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3c2      	bcc.n	8001508 <EF_PutChar+0xe0>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001588:	7f7b      	ldrb	r3, [r7, #29]
 800158a:	3301      	adds	r3, #1
 800158c:	777b      	strb	r3, [r7, #29]
 800158e:	7f7a      	ldrb	r2, [r7, #29]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	da00      	bge.n	800159c <EF_PutChar+0x174>
 800159a:	3307      	adds	r3, #7
 800159c:	10db      	asrs	r3, r3, #3
 800159e:	429a      	cmp	r2, r3
 80015a0:	dda1      	ble.n	80014e6 <EF_PutChar+0xbe>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 80015a2:	8bfb      	ldrh	r3, [r7, #30]
 80015a4:	3301      	adds	r3, #1
 80015a6:	83fb      	strh	r3, [r7, #30]
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <EF_PutChar+0x1a4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	8bfa      	ldrh	r2, [r7, #30]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d391      	bcc.n	80014da <EF_PutChar+0xb2>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <EF_PutChar+0x1a4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	7c7b      	ldrb	r3, [r7, #17]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	200002bc 	.word	0x200002bc

080015d0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	817b      	strh	r3, [r7, #10]
 80015e2:	460b      	mov	r3, r1
 80015e4:	813b      	strh	r3, [r7, #8]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7fe fe02 	bl	80001f4 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing
 80015f4:	2300      	movs	r3, #0
 80015f6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
 80015fc:	e05a      	b.n	80016b4 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2bc5      	cmp	r3, #197	; 0xc5
 8001608:	d817      	bhi.n	800163a <EF_PutString+0x6a>
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2bc2      	cmp	r3, #194	; 0xc2
 8001614:	d911      	bls.n	800163a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	7818      	ldrb	r0, [r3, #0]
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	3301      	adds	r3, #1
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fe01 	bl	8001230 <EF_DecodePolish>
 800162e:	4603      	mov	r3, r0
 8001630:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	3301      	adds	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	e004      	b.n	8001644 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001644:	897a      	ldrh	r2, [r7, #10]
 8001646:	8abb      	ldrh	r3, [r7, #20]
 8001648:	4413      	add	r3, r2
 800164a:	b299      	uxth	r1, r3
 800164c:	88fc      	ldrh	r4, [r7, #6]
 800164e:	893a      	ldrh	r2, [r7, #8]
 8001650:	7cf8      	ldrb	r0, [r7, #19]
 8001652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4623      	mov	r3, r4
 800165e:	f7ff fee3 	bl	8001428 <EF_PutChar>
 8001662:	4603      	mov	r3, r0
 8001664:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001666:	7c7b      	ldrb	r3, [r7, #17]
 8001668:	b29a      	uxth	r2, r3
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	4413      	add	r3, r2
 800166e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001670:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001674:	2b01      	cmp	r3, #1
 8001676:	d113      	bne.n	80016a0 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001678:	897a      	ldrh	r2, [r7, #10]
 800167a:	8abb      	ldrh	r3, [r7, #20]
 800167c:	18d4      	adds	r4, r2, r3
 800167e:	893d      	ldrh	r5, [r7, #8]
 8001680:	f7ff fdca 	bl	8001218 <EF_GetFontSpaceWidth>
 8001684:	4603      	mov	r3, r0
 8001686:	b29e      	uxth	r6, r3
 8001688:	f7ff fda2 	bl	80011d0 <EF_GetFontHeight>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	4632      	mov	r2, r6
 8001698:	4629      	mov	r1, r5
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff fd65 	bl	800116a <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 80016a0:	f7ff fdba 	bl	8001218 <EF_GetFontSpaceWidth>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	8abb      	ldrh	r3, [r7, #20]
 80016aa:	4413      	add	r3, r2
 80016ac:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	3301      	adds	r3, #1
 80016b2:	75fb      	strb	r3, [r7, #23]
 80016b4:	7dfa      	ldrb	r2, [r7, #23]
 80016b6:	7cbb      	ldrb	r3, [r7, #18]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3a0      	bcc.n	80015fe <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 80016bc:	8abb      	ldrh	r3, [r7, #20]
 80016be:	b2dc      	uxtb	r4, r3
 80016c0:	f7ff fdaa 	bl	8001218 <EF_GetFontSpaceWidth>
 80016c4:	4603      	mov	r3, r0
 80016c6:	1ae3      	subs	r3, r4, r3
 80016c8:	b2db      	uxtb	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016d4 <MountSD>:

extern SD_CARD SdCard;
extern uint32_t Timer;

void MountSD(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0


	SdCard.FatFsResult = f_mount(&SdCard.SdFatFs, "", 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	4941      	ldr	r1, [pc, #260]	; (80017e0 <MountSD+0x10c>)
 80016dc:	4841      	ldr	r0, [pc, #260]	; (80017e4 <MountSD+0x110>)
 80016de:	f007 fc07 	bl	8008ef0 <f_mount>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MountSD+0x114>)
 80016e8:	701a      	strb	r2, [r3, #0]

			//
		    // FatFS mount init error check
		    //
		    if(SdCard.FatFsResult != FR_OK)
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <MountSD+0x114>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d013      	beq.n	800171a <MountSD+0x46>
		    {
		    	  SdCard.bytes = sprintf(SdCard.data, "FatFS mount error.\n\r");
 80016f2:	493e      	ldr	r1, [pc, #248]	; (80017ec <MountSD+0x118>)
 80016f4:	483e      	ldr	r0, [pc, #248]	; (80017f0 <MountSD+0x11c>)
 80016f6:	f008 ffb1 	bl	800a65c <siprintf>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <MountSD+0x114>)
 8001700:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		    	  HAL_UART_Transmit(&huart2, (uint8_t*)SdCard.data, SdCard.bytes, 1000);
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <MountSD+0x114>)
 8001706:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 800170a:	b29a      	uxth	r2, r3
 800170c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001710:	4937      	ldr	r1, [pc, #220]	; (80017f0 <MountSD+0x11c>)
 8001712:	4838      	ldr	r0, [pc, #224]	; (80017f4 <MountSD+0x120>)
 8001714:	f004 fa57 	bl	8005bc6 <HAL_UART_Transmit>

		    		  SdCard.bytes = sprintf(SdCard.data, "File closed.\n\r");
		  		  HAL_UART_Transmit(&huart2, (uint8_t*)SdCard.data, SdCard.bytes, 1000);
	    	  }
	    }
}
 8001718:	e060      	b.n	80017dc <MountSD+0x108>
		    	SdCard.bytes = sprintf(SdCard.data, "FatFS mounted.\n\r");
 800171a:	4937      	ldr	r1, [pc, #220]	; (80017f8 <MountSD+0x124>)
 800171c:	4834      	ldr	r0, [pc, #208]	; (80017f0 <MountSD+0x11c>)
 800171e:	f008 ff9d 	bl	800a65c <siprintf>
 8001722:	4603      	mov	r3, r0
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <MountSD+0x114>)
 8001728:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		    	  HAL_UART_Transmit(&huart2, (uint8_t*)SdCard.data, SdCard.bytes, 1000);
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <MountSD+0x114>)
 800172e:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8001732:	b29a      	uxth	r2, r3
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	492d      	ldr	r1, [pc, #180]	; (80017f0 <MountSD+0x11c>)
 800173a:	482e      	ldr	r0, [pc, #184]	; (80017f4 <MountSD+0x120>)
 800173c:	f004 fa43 	bl	8005bc6 <HAL_UART_Transmit>
		    	  SdCard.FatFsResult = f_open(&SdCard.SdCardFile, "dane_gps.txt", FA_WRITE|FA_CREATE_ALWAYS);
 8001740:	220a      	movs	r2, #10
 8001742:	492e      	ldr	r1, [pc, #184]	; (80017fc <MountSD+0x128>)
 8001744:	482e      	ldr	r0, [pc, #184]	; (8001800 <MountSD+0x12c>)
 8001746:	f007 fc19 	bl	8008f7c <f_open>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <MountSD+0x114>)
 8001750:	701a      	strb	r2, [r3, #0]
		    	  if(SdCard.FatFsResult != FR_OK)
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <MountSD+0x114>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d013      	beq.n	8001782 <MountSD+0xae>
		    		  SdCard.bytes = sprintf(SdCard.data, "No dane_gps.txt file. Can't create.\n\r");
 800175a:	492a      	ldr	r1, [pc, #168]	; (8001804 <MountSD+0x130>)
 800175c:	4824      	ldr	r0, [pc, #144]	; (80017f0 <MountSD+0x11c>)
 800175e:	f008 ff7d 	bl	800a65c <siprintf>
 8001762:	4603      	mov	r3, r0
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MountSD+0x114>)
 8001768:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		    		  HAL_UART_Transmit(&huart2, (uint8_t*)SdCard.data, SdCard.bytes, 1000);
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MountSD+0x114>)
 800176e:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8001772:	b29a      	uxth	r2, r3
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	491d      	ldr	r1, [pc, #116]	; (80017f0 <MountSD+0x11c>)
 800177a:	481e      	ldr	r0, [pc, #120]	; (80017f4 <MountSD+0x120>)
 800177c:	f004 fa23 	bl	8005bc6 <HAL_UART_Transmit>
}
 8001780:	e02c      	b.n	80017dc <MountSD+0x108>
		    		  SdCard.bytes = sprintf(SdCard.data, "File opened.\n\r");
 8001782:	4921      	ldr	r1, [pc, #132]	; (8001808 <MountSD+0x134>)
 8001784:	481a      	ldr	r0, [pc, #104]	; (80017f0 <MountSD+0x11c>)
 8001786:	f008 ff69 	bl	800a65c <siprintf>
 800178a:	4603      	mov	r3, r0
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MountSD+0x114>)
 8001790:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		    		  HAL_UART_Transmit(&huart2, (uint8_t*)SdCard.data, SdCard.bytes, 1000);
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MountSD+0x114>)
 8001796:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 800179a:	b29a      	uxth	r2, r3
 800179c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a0:	4913      	ldr	r1, [pc, #76]	; (80017f0 <MountSD+0x11c>)
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <MountSD+0x120>)
 80017a4:	f004 fa0f 	bl	8005bc6 <HAL_UART_Transmit>
		    		  SdCard.FatFsResult = f_close(&SdCard.SdCardFile);
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <MountSD+0x12c>)
 80017aa:	f007 ff98 	bl	80096de <f_close>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <MountSD+0x114>)
 80017b4:	701a      	strb	r2, [r3, #0]
		    		  SdCard.bytes = sprintf(SdCard.data, "File closed.\n\r");
 80017b6:	4915      	ldr	r1, [pc, #84]	; (800180c <MountSD+0x138>)
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MountSD+0x11c>)
 80017ba:	f008 ff4f 	bl	800a65c <siprintf>
 80017be:	4603      	mov	r3, r0
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MountSD+0x114>)
 80017c4:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
		  		  HAL_UART_Transmit(&huart2, (uint8_t*)SdCard.data, SdCard.bytes, 1000);
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MountSD+0x114>)
 80017ca:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <MountSD+0x11c>)
 80017d6:	4807      	ldr	r0, [pc, #28]	; (80017f4 <MountSD+0x120>)
 80017d8:	f004 f9f5 	bl	8005bc6 <HAL_UART_Transmit>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800e208 	.word	0x0800e208
 80017e4:	2000054c 	.word	0x2000054c
 80017e8:	20000548 	.word	0x20000548
 80017ec:	0800e20c 	.word	0x0800e20c
 80017f0:	200009ad 	.word	0x200009ad
 80017f4:	20000b98 	.word	0x20000b98
 80017f8:	0800e224 	.word	0x0800e224
 80017fc:	0800e238 	.word	0x0800e238
 8001800:	2000077c 	.word	0x2000077c
 8001804:	0800e248 	.word	0x0800e248
 8001808:	0800e270 	.word	0x0800e270
 800180c:	0800e280 	.word	0x0800e280

08001810 <ILI9341_Delay>:

//
//  Basic function - write those for your MCU
//
static void ILI9341_Delay(uint32_t ms)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f002 fa93 	bl	8003d44 <HAL_Delay>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001832:	e014      	b.n	800185e <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <ILI9341_SendToTFT+0x5c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b02      	cmp	r3, #2
 8001842:	d10c      	bne.n	800185e <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <ILI9341_SendToTFT+0x5c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	330c      	adds	r3, #12
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3b01      	subs	r3, #1
 800185c:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e7      	bne.n	8001834 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001864:	bf00      	nop
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <ILI9341_SendToTFT+0x5c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b80      	cmp	r3, #128	; 0x80
 8001874:	d0f7      	beq.n	8001866 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200004a8 	.word	0x200004a8

08001888 <ILI9341_SendCommand>:

static void ILI9341_SendCommand(uint8_t Command)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <ILI9341_SendCommand+0x3c>)
 8001898:	f002 fdd6 	bl	8004448 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <ILI9341_SendCommand+0x40>)
 80018a2:	f002 fdd1 	bl	8004448 <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ffbc 	bl	8001828 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80018b0:	2201      	movs	r2, #1
 80018b2:	2101      	movs	r1, #1
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <ILI9341_SendCommand+0x3c>)
 80018b6:	f002 fdc7 	bl	8004448 <HAL_GPIO_WritePin>
#endif
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020800 	.word	0x40020800

080018cc <ILI9341_SendCommandAndData>:

static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	73fb      	strb	r3, [r7, #15]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <ILI9341_SendCommandAndData+0x54>)
 80018e0:	f002 fdb2 	bl	8004448 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 80018e4:	2200      	movs	r2, #0
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	480e      	ldr	r0, [pc, #56]	; (8001924 <ILI9341_SendCommandAndData+0x58>)
 80018ea:	f002 fdad 	bl	8004448 <HAL_GPIO_WritePin>
	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 80018ee:	f107 030f 	add.w	r3, r7, #15
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff97 	bl	8001828 <ILI9341_SendToTFT>

	// DC to Data - DC to High
	ILI9341_DC_HIGH;
 80018fa:	2201      	movs	r2, #1
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <ILI9341_SendCommandAndData+0x58>)
 8001900:	f002 fda2 	bl	8004448 <HAL_GPIO_WritePin>
	// Send to TFT Length byte
	ILI9341_SendToTFT(Data, Length);
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f7ff ff8e 	bl	8001828 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800190c:	2201      	movs	r2, #1
 800190e:	2101      	movs	r1, #1
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <ILI9341_SendCommandAndData+0x54>)
 8001912:	f002 fd99 	bl	8004448 <HAL_GPIO_WritePin>
#endif
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020000 	.word	0x40020000
 8001924:	40020800 	.word	0x40020800

08001928 <ILI9341_SetRotation>:

//
// TFT Functions
//
void ILI9341_SetRotation(uint8_t Rotation)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d820      	bhi.n	800197a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d816      	bhi.n	800196c <ILI9341_SetRotation+0x44>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <ILI9341_SetRotation+0x1c>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195b 	.word	0x0800195b
 800194c:	08001961 	.word	0x08001961
 8001950:	08001967 	.word	0x08001967
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001954:	2348      	movs	r3, #72	; 0x48
 8001956:	71fb      	strb	r3, [r7, #7]
		break;
 8001958:	e008      	b.n	800196c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 800195a:	2328      	movs	r3, #40	; 0x28
 800195c:	71fb      	strb	r3, [r7, #7]
		break;
 800195e:	e005      	b.n	800196c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001960:	2388      	movs	r3, #136	; 0x88
 8001962:	71fb      	strb	r3, [r7, #7]
		break;
 8001964:	e002      	b.n	800196c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001966:	23e8      	movs	r3, #232	; 0xe8
 8001968:	71fb      	strb	r3, [r7, #7]
		break;
 800196a:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	2201      	movs	r2, #1
 8001970:	4619      	mov	r1, r3
 8001972:	2036      	movs	r0, #54	; 0x36
 8001974:	f7ff ffaa 	bl	80018cc <ILI9341_SendCommandAndData>
 8001978:	e000      	b.n	800197c <ILI9341_SetRotation+0x54>
		return;
 800197a:	bf00      	nop
}
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop

08001984 <ILI9341_SetAddrWindow>:

void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	4604      	mov	r4, r0
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4623      	mov	r3, r4
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	4603      	mov	r3, r0
 8001998:	80bb      	strh	r3, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]
 800199e:	4613      	mov	r3, r2
 80019a0:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	4413      	add	r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	81fb      	strh	r3, [r7, #14]
 80019ae:	88ba      	ldrh	r2, [r7, #4]
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	2204      	movs	r2, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	202a      	movs	r0, #42	; 0x2a
 80019e4:	f7ff ff72 	bl	80018cc <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 80019f8:	89bb      	ldrh	r3, [r7, #12]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001a02:	89bb      	ldrh	r3, [r7, #12]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	202b      	movs	r0, #43	; 0x2b
 8001a12:	f7ff ff5b 	bl	80018cc <ILI9341_SendCommandAndData>
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}

08001a1e <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	80fb      	strh	r3, [r7, #6]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	80bb      	strh	r3, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 8001a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db21      	blt.n	8001a7c <ILI9341_WritePixel+0x5e>
 8001a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a40:	da1c      	bge.n	8001a7c <ILI9341_WritePixel+0x5e>
 8001a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db18      	blt.n	8001a7c <ILI9341_WritePixel+0x5e>
 8001a4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a4e:	2bef      	cmp	r3, #239	; 0xef
 8001a50:	dc14      	bgt.n	8001a7c <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001a52:	88f8      	ldrh	r0, [r7, #6]
 8001a54:	88b9      	ldrh	r1, [r7, #4]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f7ff ff93 	bl	8001984 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2202      	movs	r2, #2
 8001a74:	4619      	mov	r1, r3
 8001a76:	202c      	movs	r0, #44	; 0x2c
 8001a78:	f7ff ff28 	bl	80018cc <ILI9341_SendCommandAndData>
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	81fb      	strh	r3, [r7, #14]
 8001a92:	460b      	mov	r3, r1
 8001a94:	81bb      	strh	r3, [r7, #12]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001a9a:	89fa      	ldrh	r2, [r7, #14]
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001aa4:	dc14      	bgt.n	8001ad0 <ILI9341_DrawImage+0x4c>
 8001aa6:	89ba      	ldrh	r2, [r7, #12]
 8001aa8:	8b3b      	ldrh	r3, [r7, #24]
 8001aaa:	4413      	add	r3, r2
 8001aac:	2bf0      	cmp	r3, #240	; 0xf0
 8001aae:	dc0f      	bgt.n	8001ad0 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ab0:	8b3b      	ldrh	r3, [r7, #24]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	89b9      	ldrh	r1, [r7, #12]
 8001ab6:	89f8      	ldrh	r0, [r7, #14]
 8001ab8:	f7ff ff64 	bl	8001984 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	8b3a      	ldrh	r2, [r7, #24]
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	202c      	movs	r0, #44	; 0x2c
 8001acc:	f7ff fefe 	bl	80018cc <ILI9341_SendCommandAndData>
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ILI9341_ClearDisplay>:

void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001ae2:	23f0      	movs	r3, #240	; 0xf0
 8001ae4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff ff4a 	bl	8001984 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendCommand(ILI9341_RAMWR);
 8001af0:	202c      	movs	r0, #44	; 0x2c
 8001af2:	f7ff fec9 	bl	8001888 <ILI9341_SendCommand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001af6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001afa:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001afc:	2200      	movs	r2, #0
 8001afe:	2101      	movs	r1, #1
 8001b00:	4820      	ldr	r0, [pc, #128]	; (8001b84 <ILI9341_ClearDisplay+0xac>)
 8001b02:	f002 fca1 	bl	8004448 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001b06:	2201      	movs	r2, #1
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	481f      	ldr	r0, [pc, #124]	; (8001b88 <ILI9341_ClearDisplay+0xb0>)
 8001b0c:	f002 fc9c 	bl	8004448 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001b10:	e023      	b.n	8001b5a <ILI9341_ClearDisplay+0x82>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <ILI9341_ClearDisplay+0xb4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d11b      	bne.n	8001b5a <ILI9341_ClearDisplay+0x82>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <ILI9341_ClearDisplay+0xb4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	330c      	adds	r3, #12
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001b34:	bf00      	nop
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <ILI9341_ClearDisplay+0xb4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d1f7      	bne.n	8001b36 <ILI9341_ClearDisplay+0x5e>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <ILI9341_ClearDisplay+0xb4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1d8      	bne.n	8001b12 <ILI9341_ClearDisplay+0x3a>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001b60:	bf00      	nop
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <ILI9341_ClearDisplay+0xb4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b80      	cmp	r3, #128	; 0x80
 8001b70:	d0f7      	beq.n	8001b62 <ILI9341_ClearDisplay+0x8a>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001b72:	2201      	movs	r2, #1
 8001b74:	2101      	movs	r1, #1
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <ILI9341_ClearDisplay+0xac>)
 8001b78:	f002 fc66 	bl	8004448 <HAL_GPIO_WritePin>
	{
		// Send Color bytes
		ILI9341_SendData16(Color);
	}
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	200004a8 	.word	0x200004a8

08001b90 <ILI9341_Init>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001b98:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <ILI9341_Init+0x9c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]

    uint8_t cmd, x, numArgs;
    const uint8_t *addr = initcmd;
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <ILI9341_Init+0xa0>)
 8001ba0:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
    __HAL_SPI_ENABLE(Tft_hspi);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <ILI9341_Init+0x9c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <ILI9341_Init+0x9c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb4:	601a      	str	r2, [r3, #0]
#endif

#if (ILI9341_USE_HW_RESET == 1)
	ILI9341_RST_LOW;
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2102      	movs	r1, #2
 8001bba:	481e      	ldr	r0, [pc, #120]	; (8001c34 <ILI9341_Init+0xa4>)
 8001bbc:	f002 fc44 	bl	8004448 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f7ff fe25 	bl	8001810 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2102      	movs	r1, #2
 8001bca:	481a      	ldr	r0, [pc, #104]	; (8001c34 <ILI9341_Init+0xa4>)
 8001bcc:	f002 fc3c 	bl	8004448 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f7ff fe1d 	bl	8001810 <ILI9341_Delay>
#else
	ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
    ILI9341_Delay(150);
#endif

    while ((cmd = *(addr++)) > 0)
 8001bd6:	e019      	b.n	8001c0c <ILI9341_Init+0x7c>
    {
      x = *(addr++);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60fa      	str	r2, [r7, #12]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	72bb      	strb	r3, [r7, #10]
      numArgs = x & 0x7F;
 8001be2:	7abb      	ldrb	r3, [r7, #10]
 8001be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be8:	727b      	strb	r3, [r7, #9]
      // Push Init data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8001bea:	7a7a      	ldrb	r2, [r7, #9]
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe6b 	bl	80018cc <ILI9341_SendCommandAndData>

      addr += numArgs;
 8001bf6:	7a7b      	ldrb	r3, [r7, #9]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

      if (x & 0x80)
 8001bfe:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da02      	bge.n	8001c0c <ILI9341_Init+0x7c>
      {
    	  ILI9341_Delay(150);
 8001c06:	2096      	movs	r0, #150	; 0x96
 8001c08:	f7ff fe02 	bl	8001810 <ILI9341_Delay>
    while ((cmd = *(addr++)) > 0)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60fa      	str	r2, [r7, #12]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	72fb      	strb	r3, [r7, #11]
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1dd      	bne.n	8001bd8 <ILI9341_Init+0x48>
      }
    }

    // Set selected Rotation
    ILI9341_SetRotation(ILI9341_ROTATION);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f7ff fe83 	bl	8001928 <ILI9341_SetRotation>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200004a8 	.word	0x200004a8
 8001c30:	080103a4 	.word	0x080103a4
 8001c34:	40020000 	.word	0x40020000

08001c38 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <XPT2046_GetRawData+0x38>)
 8001c46:	f002 fbff 	bl	8004448 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <XPT2046_GetRawData+0x3c>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2305      	movs	r3, #5
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <XPT2046_GetRawData+0x40>)
 8001c58:	4908      	ldr	r1, [pc, #32]	; (8001c7c <XPT2046_GetRawData+0x44>)
 8001c5a:	f003 fd19 	bl	8005690 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <XPT2046_GetRawData+0x38>)
 8001c66:	f002 fbef 	bl	8004448 <HAL_GPIO_WritePin>
#endif
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40020400 	.word	0x40020400
 8001c74:	20000244 	.word	0x20000244
 8001c78:	20000254 	.word	0x20000254
 8001c7c:	2000024c 	.word	0x2000024c

08001c80 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <XPT2046_ReadRawData+0x48>)
 8001c8c:	785b      	ldrb	r3, [r3, #1]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <XPT2046_ReadRawData+0x48>)
 8001c94:	789b      	ldrb	r3, [r3, #2]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <XPT2046_ReadRawData+0x48>)
 8001ca4:	78db      	ldrb	r3, [r3, #3]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <XPT2046_ReadRawData+0x48>)
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	801a      	strh	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000254 	.word	0x20000254

08001ccc <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 8001ccc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8001cd8:	f107 020c 	add.w	r2, r7, #12
 8001cdc:	f107 030e 	add.w	r3, r7, #14
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffcc 	bl	8001c80 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <XPT2046_ReadTouchPoint+0x118>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d16e      	bne.n	8001dce <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <XPT2046_ReadTouchPoint+0x11c>)
 8001cf2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc2b 	bl	8000554 <__aeabi_i2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fc8f 	bl	8000628 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4690      	mov	r8, r2
 8001d10:	4699      	mov	r9, r3
 8001d12:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <XPT2046_ReadTouchPoint+0x11c>)
 8001d14:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001d18:	89bb      	ldrh	r3, [r7, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc1a 	bl	8000554 <__aeabi_i2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f7fe fc7e 	bl	8000628 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4640      	mov	r0, r8
 8001d32:	4649      	mov	r1, r9
 8001d34:	f7fe fac2 	bl	80002bc <__adddf3>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <XPT2046_ReadTouchPoint+0x11c>)
 8001d42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d46:	f7fe fab9 	bl	80002bc <__adddf3>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe ff41 	bl	8000bd8 <__aeabi_d2uiz>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <XPT2046_ReadTouchPoint+0x11c>)
 8001d60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbf4 	bl	8000554 <__aeabi_i2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fc58 	bl	8000628 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4699      	mov	r9, r3
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <XPT2046_ReadTouchPoint+0x11c>)
 8001d82:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001d86:	89bb      	ldrh	r3, [r7, #12]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbe3 	bl	8000554 <__aeabi_i2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fc47 	bl	8000628 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4640      	mov	r0, r8
 8001da0:	4649      	mov	r1, r9
 8001da2:	f7fe fa8b 	bl	80002bc <__adddf3>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <XPT2046_ReadTouchPoint+0x11c>)
 8001db0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001db4:	f7fe fa82 	bl	80002bc <__adddf3>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe ff0a 	bl	8000bd8 <__aeabi_d2uiz>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 8001dcc:	e005      	b.n	8001dda <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 8001dce:	89fa      	ldrh	r2, [r7, #14]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8001dd4:	89ba      	ldrh	r2, [r7, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	801a      	strh	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001de4:	20000259 	.word	0x20000259
 8001de8:	20000000 	.word	0x20000000

08001dec <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e013      	b.n	8001e2c <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <XPT2046_GetTouchPoint+0x74>)
 8001e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <XPT2046_GetTouchPoint+0x74>)
 8001e18:	330a      	adds	r3, #10
 8001e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d9e8      	bls.n	8001e04 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <XPT2046_GetTouchPoint+0x78>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <XPT2046_GetTouchPoint+0x78>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	801a      	strh	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200004ac 	.word	0x200004ac
 8001e64:	cccccccd 	.word	0xcccccccd

08001e68 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <XPT2046_IsTouched+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d101      	bne.n	8001e7a <XPT2046_IsTouched+0x12>
		return 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <XPT2046_IsTouched+0x14>

	return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	200004d5 	.word	0x200004d5

08001e8c <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <XPT2046_Task+0x16c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	f200 80ab 	bhi.w	8001ff2 <XPT2046_Task+0x166>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <XPT2046_Task+0x18>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001fe9 	.word	0x08001fe9
 8001ea8:	08001eb5 	.word	0x08001eb5
 8001eac:	08001f2b 	.word	0x08001f2b
 8001eb0:	08001fa7 	.word	0x08001fa7
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8001eb4:	f001 ff3a 	bl	8003d2c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <XPT2046_Task+0x170>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	f240 8093 	bls.w	8001fec <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8001ec6:	f7ff feb7 	bl	8001c38 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8001eca:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <XPT2046_Task+0x174>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <XPT2046_Task+0x178>)
 8001ed2:	441a      	add	r2, r3
 8001ed4:	4b4a      	ldr	r3, [pc, #296]	; (8002000 <XPT2046_Task+0x174>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	330a      	adds	r3, #10
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4949      	ldr	r1, [pc, #292]	; (8002004 <XPT2046_Task+0x178>)
 8001ede:	440b      	add	r3, r1
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f7ff fef2 	bl	8001ccc <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <XPT2046_Task+0x174>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b43      	ldr	r3, [pc, #268]	; (8002000 <XPT2046_Task+0x174>)
 8001ef2:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <XPT2046_Task+0x174>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b0a      	cmp	r3, #10
 8001efa:	d105      	bne.n	8001f08 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <XPT2046_Task+0x174>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <XPT2046_Task+0x16c>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8001f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0c:	483e      	ldr	r0, [pc, #248]	; (8002008 <XPT2046_Task+0x17c>)
 8001f0e:	f002 fa83 	bl	8004418 <HAL_GPIO_ReadPin>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8001f18:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <XPT2046_Task+0x16c>)
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8001f1e:	f001 ff05 	bl	8003d2c <HAL_GetTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <XPT2046_Task+0x170>)
 8001f26:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8001f28:	e060      	b.n	8001fec <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8001f2a:	f001 feff 	bl	8003d2c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <XPT2046_Task+0x170>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d95a      	bls.n	8001ff0 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8001f3a:	f7ff fe7d 	bl	8001c38 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <XPT2046_Task+0x174>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <XPT2046_Task+0x178>)
 8001f46:	441a      	add	r2, r3
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <XPT2046_Task+0x174>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	330a      	adds	r3, #10
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	492c      	ldr	r1, [pc, #176]	; (8002004 <XPT2046_Task+0x178>)
 8001f52:	440b      	add	r3, r1
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f7ff feb8 	bl	8001ccc <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <XPT2046_Task+0x174>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <XPT2046_Task+0x174>)
 8001f66:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <XPT2046_Task+0x174>)
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <XPT2046_Task+0x180>)
 8001f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f72:	08d9      	lsrs	r1, r3, #3
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <XPT2046_Task+0x174>)
 8001f82:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8001f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <XPT2046_Task+0x17c>)
 8001f8a:	f002 fa45 	bl	8004418 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <XPT2046_Task+0x16c>)
 8001f96:	2203      	movs	r2, #3
 8001f98:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8001f9a:	f001 fec7 	bl	8003d2c <HAL_GetTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <XPT2046_Task+0x170>)
 8001fa2:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8001fa4:	e024      	b.n	8001ff0 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <XPT2046_Task+0x16c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <XPT2046_Task+0x174>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8001fb2:	e009      	b.n	8001fc8 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <XPT2046_Task+0x184>)
 8001fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fba:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <XPT2046_Task+0x188>)
 8001fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 f874 	bl	80040b0 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <XPT2046_Task+0x188>)
 8001fca:	f993 3000 	ldrsb.w	r3, [r3]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 f85f 	bl	8004092 <HAL_NVIC_GetPendingIRQ>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ec      	bne.n	8001fb4 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <XPT2046_Task+0x188>)
 8001fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 f82e 	bl	8004042 <HAL_NVIC_EnableIRQ>
		  break;
 8001fe6:	e004      	b.n	8001ff2 <XPT2046_Task+0x166>
		  break;
 8001fe8:	bf00      	nop
 8001fea:	e002      	b.n	8001ff2 <XPT2046_Task+0x166>
		  break;
 8001fec:	bf00      	nop
 8001fee:	e000      	b.n	8001ff2 <XPT2046_Task+0x166>
		  break;
 8001ff0:	bf00      	nop

	  }
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200004d5 	.word	0x200004d5
 8001ffc:	200004d8 	.word	0x200004d8
 8002000:	200004d4 	.word	0x200004d4
 8002004:	200004ac 	.word	0x200004ac
 8002008:	40020000 	.word	0x40020000
 800200c:	cccccccd 	.word	0xcccccccd
 8002010:	40013c00 	.word	0x40013c00
 8002014:	20000248 	.word	0x20000248

08002018 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800201c:	2017      	movs	r0, #23
 800201e:	f002 f81e 	bl	800405e <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002022:	4b02      	ldr	r3, [pc, #8]	; (800202c <XPT2046_IRQ+0x14>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200004d5 	.word	0x200004d5

08002030 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <XPT2046_Init+0x84>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <XPT2046_Init+0x88>)
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <XPT2046_Init+0x8c>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002054:	481a      	ldr	r0, [pc, #104]	; (80020c0 <XPT2046_Init+0x90>)
 8002056:	f002 f9f7 	bl	8004448 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <XPT2046_Init+0x94>)
 800205c:	2290      	movs	r2, #144	; 0x90
 800205e:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <XPT2046_Init+0x98>)
 8002062:	22d0      	movs	r2, #208	; 0xd0
 8002064:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <XPT2046_Init+0x9c>)
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 800206c:	f7ff fde4 	bl	8001c38 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002070:	2001      	movs	r0, #1
 8002072:	f001 fe67 	bl	8003d44 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <XPT2046_Init+0x94>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	08db      	lsrs	r3, r3, #3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <XPT2046_Init+0x9c>)
 8002080:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <XPT2046_Init+0x94>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	015b      	lsls	r3, r3, #5
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <XPT2046_Init+0x9c>)
 800208c:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <XPT2046_Init+0x98>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <XPT2046_Init+0x9c>)
 8002098:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <XPT2046_Init+0x98>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <XPT2046_Init+0x9c>)
 80020a4:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <XPT2046_Init+0x9c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	711a      	strb	r2, [r3, #4]
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000244 	.word	0x20000244
 80020b8:	20000248 	.word	0x20000248
 80020bc:	200004d5 	.word	0x200004d5
 80020c0:	40020400 	.word	0x40020400
 80020c4:	20000249 	.word	0x20000249
 80020c8:	2000024a 	.word	0x2000024a
 80020cc:	2000024c 	.word	0x2000024c

080020d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <MX_GPIO_Init+0x138>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a46      	ldr	r2, [pc, #280]	; (8002208 <MX_GPIO_Init+0x138>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <MX_GPIO_Init+0x138>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <MX_GPIO_Init+0x138>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <MX_GPIO_Init+0x138>)
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <MX_GPIO_Init+0x138>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <MX_GPIO_Init+0x138>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a38      	ldr	r2, [pc, #224]	; (8002208 <MX_GPIO_Init+0x138>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <MX_GPIO_Init+0x138>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <MX_GPIO_Init+0x138>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a31      	ldr	r2, [pc, #196]	; (8002208 <MX_GPIO_Init+0x138>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <MX_GPIO_Init+0x138>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_CS_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2103      	movs	r1, #3
 800215a:	482c      	ldr	r0, [pc, #176]	; (800220c <MX_GPIO_Init+0x13c>)
 800215c:	f002 f974 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	f240 4102 	movw	r1, #1026	; 0x402
 8002166:	482a      	ldr	r0, [pc, #168]	; (8002210 <MX_GPIO_Init+0x140>)
 8002168:	f002 f96e 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	4828      	ldr	r0, [pc, #160]	; (8002214 <MX_GPIO_Init+0x144>)
 8002172:	f002 f969 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800217a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800217c:	4b26      	ldr	r3, [pc, #152]	; (8002218 <MX_GPIO_Init+0x148>)
 800217e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4822      	ldr	r0, [pc, #136]	; (8002214 <MX_GPIO_Init+0x144>)
 800218c:	f001 ffc0 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin;
 8002190:	2303      	movs	r3, #3
 8002192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4819      	ldr	r0, [pc, #100]	; (800220c <MX_GPIO_Init+0x13c>)
 80021a8:	f001 ffb2 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|TOUCH_CS_Pin;
 80021ac:	f240 4302 	movw	r3, #1026	; 0x402
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	4812      	ldr	r0, [pc, #72]	; (8002210 <MX_GPIO_Init+0x140>)
 80021c6:	f001 ffa3 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <MX_GPIO_Init+0x144>)
 80021e2:	f001 ff95 	bl	8004110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MX_GPIO_Init+0x148>)
 80021ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_GPIO_Init+0x13c>)
 80021fc:	f001 ff88 	bl	8004110 <HAL_GPIO_Init>

}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800
 8002218:	10210000 	.word	0x10210000

0800221c <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <strtoke+0x1a>
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <strtoke+0x60>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <strtoke+0x60>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <strtoke+0x26>
 800223e:	2300      	movs	r3, #0
 8002240:	e017      	b.n	8002272 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <strtoke+0x60>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <strtoke+0x60>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f008 fa24 	bl	800a69c <strpbrk>
 8002254:	4603      	mov	r3, r0
 8002256:	4a09      	ldr	r2, [pc, #36]	; (800227c <strtoke+0x60>)
 8002258:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <strtoke+0x60>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <strtoke+0x54>
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <strtoke+0x60>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	4904      	ldr	r1, [pc, #16]	; (800227c <strtoke+0x60>)
 800226a:	600a      	str	r2, [r1, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8002270:	68fb      	ldr	r3, [r7, #12]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000025c 	.word	0x2000025c

08002280 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800228e:	3301      	adds	r3, #1
 8002290:	425a      	negs	r2, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	bf58      	it	pl
 8002298:	4253      	negpl	r3, r2
 800229a:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d02f      	beq.n	8002308 <NEO6_ReceiveUartChar+0x88>
	{
//		GpsStateHandler->UartBufferHead = GpsStateHandler->UartBufferTail;
	}
	else
	{
		if(UartReceivedChar == 13)
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <NEO6_ReceiveUartChar+0xa0>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b0d      	cmp	r3, #13
 80022b0:	d114      	bne.n	80022dc <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <NEO6_ReceiveUartChar+0xa0>)
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	b2d1      	uxtb	r1, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	460a      	mov	r2, r1
 80022d8:	711a      	strb	r2, [r3, #4]
 80022da:	e015      	b.n	8002308 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <NEO6_ReceiveUartChar+0xa0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <NEO6_ReceiveUartChar+0x88>
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <NEO6_ReceiveUartChar+0xa0>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b0a      	cmp	r3, #10
 80022ee:	d00b      	beq.n	8002308 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <NEO6_ReceiveUartChar+0xa0>)
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	b2d1      	uxtb	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	460a      	mov	r2, r1
 8002306:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4904      	ldr	r1, [pc, #16]	; (8002320 <NEO6_ReceiveUartChar+0xa0>)
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fcf1 	bl	8005cf8 <HAL_UART_Receive_IT>
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200004dc 	.word	0x200004dc

08002324 <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8002338:	429a      	cmp	r2, r3
 800233a:	d102      	bne.n	8002342 <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
 8002340:	e013      	b.n	800236a <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8002348:	3301      	adds	r3, #1
 800234a:	425a      	negs	r2, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	bf58      	it	pl
 8002352:	4253      	negpl	r3, r2
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8002362:	461a      	mov	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	791b      	ldrb	r3, [r3, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002384:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01e      	beq.n	80023ce <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8002390:	e008      	b.n	80023a4 <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	2b0d      	cmp	r3, #13
 8002396:	d00e      	beq.n	80023b6 <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	7afa      	ldrb	r2, [r7, #11]
 800239c:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ffbd 	bl	8002324 <NEO6_GetCharFromBuffer>
 80023aa:	4603      	mov	r3, r0
 80023ac:	72fb      	strb	r3, [r7, #11]
 80023ae:	7afb      	ldrb	r3, [r7, #11]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <NEO6_GetLineFromBuffer+0x1c>
 80023b4:	e000      	b.n	80023b8 <NEO6_GetLineFromBuffer+0x42>
				break;
 80023b6:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 80023e0:	4967      	ldr	r1, [pc, #412]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff ff1a 	bl	800221c <strtoke>
 80023e8:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d033      	beq.n	800245a <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f007 fc92 	bl	8009d1c <atoi>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Second = Temp % 100;
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4b61      	ldr	r3, [pc, #388]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2164      	movs	r1, #100	; 0x64
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4a5a      	ldr	r2, [pc, #360]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095a      	lsrs	r2, r3, #5
 8002420:	4b58      	ldr	r3, [pc, #352]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 8002422:	fba3 1302 	umull	r1, r3, r3, r2
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2164      	movs	r1, #100	; 0x64
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4a53      	ldr	r2, [pc, #332]	; (8002588 <NEO6_ParseGPRMC+0x1b0>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0b5a      	lsrs	r2, r3, #13
 8002442:	4b50      	ldr	r3, [pc, #320]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2164      	movs	r1, #100	; 0x64
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 800245a:	4949      	ldr	r1, [pc, #292]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff fedd 	bl	800221c <strtoke>
 8002462:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002464:	4946      	ldr	r1, [pc, #280]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 8002466:	2000      	movs	r0, #0
 8002468:	f7ff fed8 	bl	800221c <strtoke>
 800246c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <NEO6_ParseGPRMC+0xb2>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f007 fc4d 	bl	8009d16 <atof>
 800247c:	eeb0 7a40 	vmov.f32	s14, s0
 8002480:	eef0 7a60 	vmov.f32	s15, s1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 800248a:	493d      	ldr	r1, [pc, #244]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff fec5 	bl	800221c <strtoke>
 8002492:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <NEO6_ParseGPRMC+0xce>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 80024a6:	4936      	ldr	r1, [pc, #216]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff feb7 	bl	800221c <strtoke>
 80024ae:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <NEO6_ParseGPRMC+0xf4>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f007 fc2c 	bl	8009d16 <atof>
 80024be:	eeb0 7a40 	vmov.f32	s14, s0
 80024c2:	eef0 7a60 	vmov.f32	s15, s1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80024cc:	492c      	ldr	r1, [pc, #176]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff fea4 	bl	800221c <strtoke>
 80024d4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <NEO6_ParseGPRMC+0x110>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 80024e8:	4925      	ldr	r1, [pc, #148]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fe96 	bl	800221c <strtoke>
 80024f0:	60f8      	str	r0, [r7, #12]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 80024f2:	4923      	ldr	r1, [pc, #140]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fe91 	bl	800221c <strtoke>
 80024fa:	60f8      	str	r0, [r7, #12]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 80024fc:	4920      	ldr	r1, [pc, #128]	; (8002580 <NEO6_ParseGPRMC+0x1a8>)
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fe8c 	bl	800221c <strtoke>
 8002504:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d033      	beq.n	8002576 <NEO6_ParseGPRMC+0x19e>
	{
		Temp = atoi(ParsePoiner);
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f007 fc04 	bl	8009d1c <atoi>
 8002514:	4603      	mov	r3, r0
 8002516:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Year = Temp % 100;
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 800251c:	fba3 1302 	umull	r1, r3, r3, r2
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	2164      	movs	r1, #100	; 0x64
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095a      	lsrs	r2, r3, #5
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 800253e:	fba3 1302 	umull	r1, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2164      	movs	r1, #100	; 0x64
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <NEO6_ParseGPRMC+0x1b0>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	0b5a      	lsrs	r2, r3, #13
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <NEO6_ParseGPRMC+0x1ac>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	2164      	movs	r1, #100	; 0x64
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	0800e290 	.word	0x0800e290
 8002584:	51eb851f 	.word	0x51eb851f
 8002588:	d1b71759 	.word	0xd1b71759

0800258c <NEO6_ParseGPVTG>:

//
//	Track Made Good and Ground Speed.
//
void NEO6_ParseGPVTG(NEO6_State *GpsStateHandler)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	// eg2. $GPVTG,054.7,T,034.4,M,005.5,N,010.2,K

	char *ParsePoiner;

	// True track made good
	ParsePoiner = strtoke(NULL, ",");
 8002594:	4921      	ldr	r1, [pc, #132]	; (800261c <NEO6_ParseGPVTG+0x90>)
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fe40 	bl	800221c <strtoke>
 800259c:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 800259e:	491f      	ldr	r1, [pc, #124]	; (800261c <NEO6_ParseGPVTG+0x90>)
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff fe3b 	bl	800221c <strtoke>
 80025a6:	60f8      	str	r0, [r7, #12]
	// Magnetic track made good
	ParsePoiner = strtoke(NULL, ",");
 80025a8:	491c      	ldr	r1, [pc, #112]	; (800261c <NEO6_ParseGPVTG+0x90>)
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7ff fe36 	bl	800221c <strtoke>
 80025b0:	60f8      	str	r0, [r7, #12]
	ParsePoiner = strtoke(NULL, ",");
 80025b2:	491a      	ldr	r1, [pc, #104]	; (800261c <NEO6_ParseGPVTG+0x90>)
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fe31 	bl	800221c <strtoke>
 80025ba:	60f8      	str	r0, [r7, #12]
	// Ground speed, knots
	ParsePoiner = strtoke(NULL, ",");
 80025bc:	4917      	ldr	r1, [pc, #92]	; (800261c <NEO6_ParseGPVTG+0x90>)
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff fe2c 	bl	800221c <strtoke>
 80025c4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <NEO6_ParseGPVTG+0x56>
	{
		GpsStateHandler->SpeedKnots = atof(ParsePoiner);
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f007 fba1 	bl	8009d16 <atof>
 80025d4:	eeb0 7a40 	vmov.f32	s14, s0
 80025d8:	eef0 7a60 	vmov.f32	s15, s1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
	}
	ParsePoiner = strtoke(NULL, ",");
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <NEO6_ParseGPVTG+0x90>)
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff fe19 	bl	800221c <strtoke>
 80025ea:	60f8      	str	r0, [r7, #12]
	// Ground speed, Kilometers per hour
	ParsePoiner = strtoke(NULL, ",");
 80025ec:	490b      	ldr	r1, [pc, #44]	; (800261c <NEO6_ParseGPVTG+0x90>)
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff fe14 	bl	800221c <strtoke>
 80025f4:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <NEO6_ParseGPVTG+0x86>
	{
		GpsStateHandler->SpeedKilometers = atof(ParsePoiner);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f007 fb89 	bl	8009d16 <atof>
 8002604:	eeb0 7a40 	vmov.f32	s14, s0
 8002608:	eef0 7a60 	vmov.f32	s15, s1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0
	}
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	0800e290 	.word	0x0800e290

08002620 <NEO6_ParseGPGGA>:

//
//	Global Positioning System Fix Data
//
void NEO6_ParseGPGGA(NEO6_State *GpsStateHandler)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	// eg. $GPGGA,212846.00,5025.81511,N,01639.92090,E,1,04,4.72,281.1,M,42.0,M,,*5F

	char *ParsePoiner;

	// UTC of Position
	ParsePoiner = strtoke(NULL, ",");
 8002628:	492b      	ldr	r1, [pc, #172]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fdf6 	bl	800221c <strtoke>
 8002630:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 8002632:	4929      	ldr	r1, [pc, #164]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff fdf1 	bl	800221c <strtoke>
 800263a:	60f8      	str	r0, [r7, #12]
	// N or S
	ParsePoiner = strtoke(NULL, ",");
 800263c:	4926      	ldr	r1, [pc, #152]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff fdec 	bl	800221c <strtoke>
 8002644:	60f8      	str	r0, [r7, #12]
	// Longitude
	ParsePoiner = strtoke(NULL, ",");
 8002646:	4924      	ldr	r1, [pc, #144]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff fde7 	bl	800221c <strtoke>
 800264e:	60f8      	str	r0, [r7, #12]
	// E or W
	ParsePoiner = strtoke(NULL, ",");
 8002650:	4921      	ldr	r1, [pc, #132]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff fde2 	bl	800221c <strtoke>
 8002658:	60f8      	str	r0, [r7, #12]
	// GPS quality indicator (0=invalid; 1=GPS fix; 2=Diff. GPS fix)
	ParsePoiner = strtoke(NULL, ",");
 800265a:	491f      	ldr	r1, [pc, #124]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fddd 	bl	800221c <strtoke>
 8002662:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <NEO6_ParseGPGGA+0x5c>
	{
		GpsStateHandler->Quality = atoi(ParsePoiner);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f007 fb55 	bl	8009d1c <atoi>
 8002672:	4603      	mov	r3, r0
 8002674:	b2da      	uxtb	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	}
	// Number of satellites in use [not those in view]
	ParsePoiner = strtoke(NULL, ",");
 800267c:	4916      	ldr	r1, [pc, #88]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fdcc 	bl	800221c <strtoke>
 8002684:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <NEO6_ParseGPGGA+0x7e>
	{
		GpsStateHandler->SatelitesNumber = atoi(ParsePoiner);
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f007 fb44 	bl	8009d1c <atoi>
 8002694:	4603      	mov	r3, r0
 8002696:	b2da      	uxtb	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	}
	// Horizontal dilution of position
	ParsePoiner = strtoke(NULL, ",");
 800269e:	490e      	ldr	r1, [pc, #56]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff fdbb 	bl	800221c <strtoke>
 80026a6:	60f8      	str	r0, [r7, #12]
	// Antenna altitude above/below mean sea level (geoid)
	ParsePoiner = strtoke(NULL, ",");
 80026a8:	490b      	ldr	r1, [pc, #44]	; (80026d8 <NEO6_ParseGPGGA+0xb8>)
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7ff fdb6 	bl	800221c <strtoke>
 80026b0:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <NEO6_ParseGPGGA+0xae>
	{
		GpsStateHandler->Altitude = atof(ParsePoiner);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f007 fb2b 	bl	8009d16 <atof>
 80026c0:	eeb0 7a40 	vmov.f32	s14, s0
 80026c4:	eef0 7a60 	vmov.f32	s15, s1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0
	}
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800e290 	.word	0x0800e290

080026dc <NEO6_ParseGPGSA>:

//
//	GPS DOP and active satellites
//
void NEO6_ParseGPGSA(NEO6_State *GpsStateHandler)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	// eg2. $GPGSA,A,3,19,28,14,18,27,22,31,39,,,,,1.7,1.0,1.3*35

	char *ParsePoiner;

	// Mode
	ParsePoiner = strtoke(NULL, ",");
 80026e4:	4930      	ldr	r1, [pc, #192]	; (80027a8 <NEO6_ParseGPGSA+0xcc>)
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff fd98 	bl	800221c <strtoke>
 80026ec:	60b8      	str	r0, [r7, #8]
	// 2D/3D Fix
	ParsePoiner = strtoke(NULL, ",");
 80026ee:	492e      	ldr	r1, [pc, #184]	; (80027a8 <NEO6_ParseGPGSA+0xcc>)
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff fd93 	bl	800221c <strtoke>
 80026f6:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <NEO6_ParseGPGSA+0x34>
	{
		GpsStateHandler->FixMode = atoi(ParsePoiner);
 8002700:	68b8      	ldr	r0, [r7, #8]
 8002702:	f007 fb0b 	bl	8009d1c <atoi>
 8002706:	4603      	mov	r3, r0
 8002708:	b2da      	uxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	}
	// IDs of SVs used in position fix (null for unused fields)
	for(uint8_t i=0; i < 12; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e007      	b.n	8002726 <NEO6_ParseGPGSA+0x4a>
	{
		ParsePoiner = strtoke(NULL, ",");
 8002716:	4924      	ldr	r1, [pc, #144]	; (80027a8 <NEO6_ParseGPGSA+0xcc>)
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff fd7f 	bl	800221c <strtoke>
 800271e:	60b8      	str	r0, [r7, #8]
	for(uint8_t i=0; i < 12; i++)
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	3301      	adds	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b0b      	cmp	r3, #11
 800272a:	d9f4      	bls.n	8002716 <NEO6_ParseGPGSA+0x3a>
	}
	// PDOP
	ParsePoiner = strtoke(NULL, ",");
 800272c:	491e      	ldr	r1, [pc, #120]	; (80027a8 <NEO6_ParseGPGSA+0xcc>)
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff fd74 	bl	800221c <strtoke>
 8002734:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <NEO6_ParseGPGSA+0x76>
	{
		GpsStateHandler->Dop = atof(ParsePoiner);
 800273e:	68b8      	ldr	r0, [r7, #8]
 8002740:	f007 fae9 	bl	8009d16 <atof>
 8002744:	eeb0 7a40 	vmov.f32	s14, s0
 8002748:	eef0 7a60 	vmov.f32	s15, s1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0
	}
	// HDOP
	ParsePoiner = strtoke(NULL, ",");
 8002752:	4915      	ldr	r1, [pc, #84]	; (80027a8 <NEO6_ParseGPGSA+0xcc>)
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fd61 	bl	800221c <strtoke>
 800275a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <NEO6_ParseGPGSA+0x9c>
	{
		GpsStateHandler->Hdop = atof(ParsePoiner);
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	f007 fad6 	bl	8009d16 <atof>
 800276a:	eeb0 7a40 	vmov.f32	s14, s0
 800276e:	eef0 7a60 	vmov.f32	s15, s1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8
	}
	// VDOP
	ParsePoiner = strtoke(NULL, ",");
 8002778:	490b      	ldr	r1, [pc, #44]	; (80027a8 <NEO6_ParseGPGSA+0xcc>)
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff fd4e 	bl	800221c <strtoke>
 8002780:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePoiner) > 0)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <NEO6_ParseGPGSA+0xc2>
	{
		GpsStateHandler->Vdop = atof(ParsePoiner);
 800278a:	68b8      	ldr	r0, [r7, #8]
 800278c:	f007 fac3 	bl	8009d16 <atof>
 8002790:	eeb0 7a40 	vmov.f32	s14, s0
 8002794:	eef0 7a60 	vmov.f32	s15, s1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0
	}
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	0800e290 	.word	0x0800e290

080027ac <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f203 1307 	addw	r3, r3, #263	; 0x107
 80027ba:	491a      	ldr	r1, [pc, #104]	; (8002824 <NEO6_ParseLine+0x78>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fd2d 	bl	800221c <strtoke>
 80027c2:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 80027c4:	4918      	ldr	r1, [pc, #96]	; (8002828 <NEO6_ParseLine+0x7c>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7fd fd0a 	bl	80001e0 <strcmp>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <NEO6_ParseLine+0x2e>
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fe00 	bl	80023d8 <NEO6_ParseGPRMC>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 80027d8:	e01f      	b.n	800281a <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
 80027da:	4914      	ldr	r1, [pc, #80]	; (800282c <NEO6_ParseLine+0x80>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7fd fcff 	bl	80001e0 <strcmp>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <NEO6_ParseLine+0x44>
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff fecf 	bl	800258c <NEO6_ParseGPVTG>
}
 80027ee:	e014      	b.n	800281a <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
 80027f0:	490f      	ldr	r1, [pc, #60]	; (8002830 <NEO6_ParseLine+0x84>)
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7fd fcf4 	bl	80001e0 <strcmp>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <NEO6_ParseLine+0x5a>
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff0e 	bl	8002620 <NEO6_ParseGPGGA>
}
 8002804:	e009      	b.n	800281a <NEO6_ParseLine+0x6e>
	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
 8002806:	490b      	ldr	r1, [pc, #44]	; (8002834 <NEO6_ParseLine+0x88>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7fd fce9 	bl	80001e0 <strcmp>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <NEO6_ParseLine+0x6e>
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff61 	bl	80026dc <NEO6_ParseGPGSA>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	0800e290 	.word	0x0800e290
 8002828:	0800e294 	.word	0x0800e294
 800282c:	0800e29c 	.word	0x0800e29c
 8002830:	0800e2a4 	.word	0x0800e2a4
 8002834:	0800e2ac 	.word	0x0800e2ac

08002838 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <NEO6_Task+0x1e>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fd86 	bl	8002376 <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff9e 	bl	80027ac <NEO6_ParseLine>
	}
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2230      	movs	r2, #48	; 0x30
 80028e2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2230      	movs	r2, #48	; 0x30
 80028f8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <NEO6_Init+0xf0>)
 800295a:	4618      	mov	r0, r3
 800295c:	f003 f9cc 	bl	8005cf8 <HAL_UART_Receive_IT>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200004dc 	.word	0x200004dc

0800296c <FixIndicator>:
extern SD_CARD SdCard;



void FixIndicator(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af02      	add	r7, sp, #8
	if(CurrentFix == 0)	ILI9341_DrawImage(120, 0, nofix, 30, 30);
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <FixIndicator+0x40>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <FixIndicator+0x20>
 800297a:	231e      	movs	r3, #30
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	231e      	movs	r3, #30
 8002980:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <FixIndicator+0x44>)
 8002982:	2100      	movs	r1, #0
 8002984:	2078      	movs	r0, #120	; 0x78
 8002986:	f7ff f87d 	bl	8001a84 <ILI9341_DrawImage>
	else if(CurrentFix == 1) ILI9341_DrawImage(120, 0, fix, 30, 30);
}
 800298a:	e00b      	b.n	80029a4 <FixIndicator+0x38>
	else if(CurrentFix == 1) ILI9341_DrawImage(120, 0, fix, 30, 30);
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <FixIndicator+0x40>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <FixIndicator+0x38>
 8002994:	231e      	movs	r3, #30
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	231e      	movs	r3, #30
 800299a:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <FixIndicator+0x48>)
 800299c:	2100      	movs	r1, #0
 800299e:	2078      	movs	r0, #120	; 0x78
 80029a0:	f7ff f870 	bl	8001a84 <ILI9341_DrawImage>
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000538 	.word	0x20000538
 80029b0:	08010b1c 	.word	0x08010b1c
 80029b4:	08010414 	.word	0x08010414

080029b8 <StartButton>:

//
// Draw Clearing Button above the drawing area
//
void StartButton(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af02      	add	r7, sp, #8
	GFX_DrawFillRectangle(TOGGLE_BUTTON_X, TOGGLE_BUTTON_Y, TOGGLE_BUTTON_WIDTH, TOGGLE_BUTTON_HEIGHT, ILI9341_DARKGREEN); //
 80029be:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	231a      	movs	r3, #26
 80029c6:	2278      	movs	r2, #120	; 0x78
 80029c8:	2103      	movs	r1, #3
 80029ca:	20be      	movs	r0, #190	; 0xbe
 80029cc:	f7fe fbcd 	bl	800116a <GFX_DrawFillRectangle>
	  //ILI9341_ClearArea(TOGGLE_BUTTON_X, TOGGLE_BUTTON_Y, TOGGLE_BUTTON_WIDTH, TOGGLE_BUTTON_HEIGHT, ILI9341_DARKGREEN); //
	EF_PutString((const uint8_t*)"START", TOGGLE_BUTTON_X+5, TOGGLE_BUTTON_Y, ILI9341_WHITE, BG_TRANSPARENT, ILI9341_DARKGREEN); //
 80029d0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	2300      	movs	r3, #0
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029de:	2203      	movs	r2, #3
 80029e0:	21c3      	movs	r1, #195	; 0xc3
 80029e2:	4803      	ldr	r0, [pc, #12]	; (80029f0 <StartButton+0x38>)
 80029e4:	f7fe fdf4 	bl	80015d0 <EF_PutString>

}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	0800e2b4 	.word	0x0800e2b4

080029f4 <StopButton>:

void StopButton(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af02      	add	r7, sp, #8
	GFX_DrawFillRectangle(0, 40, 360, 120, ILI9341_WHITE); // Button Color
 80029fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2378      	movs	r3, #120	; 0x78
 8002a02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002a06:	2128      	movs	r1, #40	; 0x28
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fbae 	bl	800116a <GFX_DrawFillRectangle>

	GFX_DrawFillRectangle(TOGGLE_BUTTON_X, TOGGLE_BUTTON_Y, TOGGLE_BUTTON_WIDTH, TOGGLE_BUTTON_HEIGHT, ILI9341_DARKGREEN); //
 8002a0e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	231a      	movs	r3, #26
 8002a16:	2278      	movs	r2, #120	; 0x78
 8002a18:	2103      	movs	r1, #3
 8002a1a:	20be      	movs	r0, #190	; 0xbe
 8002a1c:	f7fe fba5 	bl	800116a <GFX_DrawFillRectangle>
	  //ILI9341_ClearArea(TOGGLE_BUTTON_X, TOGGLE_BUTTON_Y, TOGGLE_BUTTON_WIDTH, TOGGLE_BUTTON_HEIGHT, ILI9341_DARKGREEN); //
	EF_PutString((const uint8_t*)"STOP", TOGGLE_BUTTON_X+5, TOGGLE_BUTTON_Y, ILI9341_WHITE, BG_TRANSPARENT, ILI9341_DARKGREEN); //
 8002a20:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a2e:	2203      	movs	r2, #3
 8002a30:	21c3      	movs	r1, #195	; 0xc3
 8002a32:	4803      	ldr	r0, [pc, #12]	; (8002a40 <StopButton+0x4c>)
 8002a34:	f7fe fdcc 	bl	80015d0 <EF_PutString>
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800e2bc 	.word	0x0800e2bc

08002a44 <TimeReset>:

void TimeReset(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]

	  hrtc.Instance = RTC;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <TimeReset+0x80>)
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <TimeReset+0x84>)
 8002a5c:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <TimeReset+0x80>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
	  hrtc.Init.AsynchPrediv = 127;
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <TimeReset+0x80>)
 8002a66:	227f      	movs	r2, #127	; 0x7f
 8002a68:	609a      	str	r2, [r3, #8]
	  hrtc.Init.SynchPrediv = 255;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <TimeReset+0x80>)
 8002a6c:	22ff      	movs	r2, #255	; 0xff
 8002a6e:	60da      	str	r2, [r3, #12]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <TimeReset+0x80>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <TimeReset+0x80>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <TimeReset+0x80>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a82:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <TimeReset+0x80>)
 8002a84:	f002 fa6e 	bl	8004f64 <HAL_RTC_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <TimeReset+0x4e>
	  {
	    Error_Handler();
 8002a8e:	f000 fcd5 	bl	800343c <Error_Handler>

	  /* USER CODE END Check_RTC_BKUP */

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <TimeReset+0x80>)
 8002aae:	f002 faea 	bl	8005086 <HAL_RTC_SetTime>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <TimeReset+0x78>
	  {
	    Error_Handler();
 8002ab8:	f000 fcc0 	bl	800343c <Error_Handler>
	  }

}
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000a30 	.word	0x20000a30
 8002ac8:	40002800 	.word	0x40002800

08002acc <TimeAndDate>:
void TimeAndDate(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b0a2      	sub	sp, #136	; 0x88
 8002ad0:	af02      	add	r7, sp, #8

		uint8_t Time[64];
		uint8_t Date[64];

		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4931      	ldr	r1, [pc, #196]	; (8002b9c <TimeAndDate+0xd0>)
 8002ad6:	4832      	ldr	r0, [pc, #200]	; (8002ba0 <TimeAndDate+0xd4>)
 8002ad8:	f002 fb92 	bl	8005200 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002adc:	2200      	movs	r2, #0
 8002ade:	4931      	ldr	r1, [pc, #196]	; (8002ba4 <TimeAndDate+0xd8>)
 8002ae0:	482f      	ldr	r0, [pc, #188]	; (8002ba0 <TimeAndDate+0xd4>)
 8002ae2:	f002 fc92 	bl	800540a <HAL_RTC_GetDate>
		if(RtcTime.Seconds != CompareSeconds)
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <TimeAndDate+0xd0>)
 8002ae8:	789a      	ldrb	r2, [r3, #2]
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <TimeAndDate+0xdc>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d04f      	beq.n	8002b92 <TimeAndDate+0xc6>
		{
			sprintf((char*)Date, "%02d.%02d.%02d",GpsState.Day, GpsState.Month, GpsState.Year);
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <TimeAndDate+0xe0>)
 8002af4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <TimeAndDate+0xe0>)
 8002afc:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8002b00:	4619      	mov	r1, r3
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <TimeAndDate+0xe0>)
 8002b04:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002b08:	4638      	mov	r0, r7
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4928      	ldr	r1, [pc, #160]	; (8002bb0 <TimeAndDate+0xe4>)
 8002b10:	f007 fda4 	bl	800a65c <siprintf>
			sprintf((char*)Time, "%02d:%02d:%02d",GpsState.Hour+2, GpsState.Minute,GpsState.Second);
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <TimeAndDate+0xe0>)
 8002b16:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8002b1a:	1c9a      	adds	r2, r3, #2
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <TimeAndDate+0xe0>)
 8002b1e:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8002b22:	4619      	mov	r1, r3
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <TimeAndDate+0xe0>)
 8002b26:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8002b2a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	4920      	ldr	r1, [pc, #128]	; (8002bb4 <TimeAndDate+0xe8>)
 8002b34:	f007 fd92 	bl	800a65c <siprintf>

			GFX_DrawFillRectangle(TIME_X, TIME_Y, TIME_WIDTH, TIME_HEIGHT, ILI9341_WHITE); // Button Color
 8002b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	231a      	movs	r3, #26
 8002b40:	2282      	movs	r2, #130	; 0x82
 8002b42:	21d2      	movs	r1, #210	; 0xd2
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe fb10 	bl	800116a <GFX_DrawFillRectangle>

			EF_PutString(Time, TIME_X+5, TIME_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE); // Button text
 8002b4a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	22d2      	movs	r2, #210	; 0xd2
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	f7fe fd37 	bl	80015d0 <EF_PutString>

			GFX_DrawFillRectangle(DATE_X, DATE_Y, DATE_WIDTH, DATE_HEIGHT, ILI9341_WHITE); // Button Color
 8002b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	231a      	movs	r3, #26
 8002b6a:	2278      	movs	r2, #120	; 0x78
 8002b6c:	21d2      	movs	r1, #210	; 0xd2
 8002b6e:	20c8      	movs	r0, #200	; 0xc8
 8002b70:	f7fe fafb 	bl	800116a <GFX_DrawFillRectangle>

			EF_PutString(Date, DATE_X+5, DATE_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE); // Button text
 8002b74:	4638      	mov	r0, r7
 8002b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	22d2      	movs	r2, #210	; 0xd2
 8002b84:	21cd      	movs	r1, #205	; 0xcd
 8002b86:	f7fe fd23 	bl	80015d0 <EF_PutString>
			CompareSeconds = RtcTime.Seconds;
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <TimeAndDate+0xd0>)
 8002b8c:	789a      	ldrb	r2, [r3, #2]
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <TimeAndDate+0xdc>)
 8002b90:	701a      	strb	r2, [r3, #0]
		}
}
 8002b92:	bf00      	nop
 8002b94:	3780      	adds	r7, #128	; 0x80
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000524 	.word	0x20000524
 8002ba0:	20000a30 	.word	0x20000a30
 8002ba4:	2000053c 	.word	0x2000053c
 8002ba8:	20000540 	.word	0x20000540
 8002bac:	200002c0 	.word	0x200002c0
 8002bb0:	0800e2c4 	.word	0x0800e2c4
 8002bb4:	0800e2d4 	.word	0x0800e2d4

08002bb8 <StatsDisplay>:

void StatsDisplay(void)
{
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b0a4      	sub	sp, #144	; 0x90
 8002bbc:	af02      	add	r7, sp, #8
	uint8_t Text[64]="Training stats:";
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <StatsDisplay+0xe8>)
 8002bc0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002bca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bce:	2230      	movs	r2, #48	; 0x30
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 f8d0 	bl	8009d78 <memset>
	uint8_t SpeedInfo[64];
	double AverageSpeed;

	AverageSpeed = TrainingSpeed/counter;
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <StatsDisplay+0xec>)
 8002bda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bde:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <StatsDisplay+0xf0>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fcb6 	bl	8000554 <__aeabi_i2d>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fd fe44 	bl	800087c <__aeabi_ddiv>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	sprintf((char*)SpeedInfo, "Avg speed:%.2lf km/h",AverageSpeed);
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002c02:	492a      	ldr	r1, [pc, #168]	; (8002cac <StatsDisplay+0xf4>)
 8002c04:	f007 fd2a 	bl	800a65c <siprintf>

	GFX_DrawFillRectangle(TIME_X+70, TIME_Y-150, TIME_WIDTH+120, TIME_HEIGHT, ILI9341_WHITE); // Button Color
 8002c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	231a      	movs	r3, #26
 8002c10:	22fa      	movs	r2, #250	; 0xfa
 8002c12:	213c      	movs	r1, #60	; 0x3c
 8002c14:	2046      	movs	r0, #70	; 0x46
 8002c16:	f7fe faa8 	bl	800116a <GFX_DrawFillRectangle>

	GFX_DrawFillRectangle(TIME_X+10, TIME_Y-150, TIME_WIDTH+120, TIME_HEIGHT, ILI9341_WHITE);
 8002c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	231a      	movs	r3, #26
 8002c22:	22fa      	movs	r2, #250	; 0xfa
 8002c24:	213c      	movs	r1, #60	; 0x3c
 8002c26:	200a      	movs	r0, #10
 8002c28:	f7fe fa9f 	bl	800116a <GFX_DrawFillRectangle>
	EF_PutString(Text, TIME_X+10, TIME_Y-170, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE);
 8002c2c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2228      	movs	r2, #40	; 0x28
 8002c3e:	210a      	movs	r1, #10
 8002c40:	f7fe fcc6 	bl	80015d0 <EF_PutString>

	GFX_DrawFillRectangle(TIME_X+10, TIME_Y-120, TIME_WIDTH+160, TIME_HEIGHT, ILI9341_WHITE); // Button Color
 8002c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	231a      	movs	r3, #26
 8002c4c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002c50:	215a      	movs	r1, #90	; 0x5a
 8002c52:	200a      	movs	r0, #10
 8002c54:	f7fe fa89 	bl	800116a <GFX_DrawFillRectangle>
	EF_PutString(TrainingTimeBuffer, TIME_X+10, TIME_Y-120, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE); // Button text
 8002c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	225a      	movs	r2, #90	; 0x5a
 8002c66:	210a      	movs	r1, #10
 8002c68:	4811      	ldr	r0, [pc, #68]	; (8002cb0 <StatsDisplay+0xf8>)
 8002c6a:	f7fe fcb1 	bl	80015d0 <EF_PutString>

	GFX_DrawFillRectangle(TIME_X+10, TIME_Y-90, TIME_WIDTH+120, TIME_HEIGHT, ILI9341_WHITE); // Button Color
 8002c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	231a      	movs	r3, #26
 8002c76:	22fa      	movs	r2, #250	; 0xfa
 8002c78:	2178      	movs	r1, #120	; 0x78
 8002c7a:	200a      	movs	r0, #10
 8002c7c:	f7fe fa75 	bl	800116a <GFX_DrawFillRectangle>
	EF_PutString(SpeedInfo, TIME_X+10, TIME_Y-90, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE); // Button text
 8002c80:	4638      	mov	r0, r7
 8002c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2278      	movs	r2, #120	; 0x78
 8002c90:	210a      	movs	r1, #10
 8002c92:	f7fe fc9d 	bl	80015d0 <EF_PutString>

	;

}
 8002c96:	bf00      	nop
 8002c98:	3788      	adds	r7, #136	; 0x88
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	0800e2fc 	.word	0x0800e2fc
 8002ca4:	20000268 	.word	0x20000268
 8002ca8:	20000270 	.word	0x20000270
 8002cac:	0800e2e4 	.word	0x0800e2e4
 8002cb0:	200004e0 	.word	0x200004e0

08002cb4 <IsToggleButtonTouched>:

uint8_t IsToggleButtonTouched(uint16_t x, uint16_t y)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	80fb      	strh	r3, [r7, #6]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	80bb      	strh	r3, [r7, #4]
	// Check if Touch point is higher than X begin of clear button
	if(x > TOGGLE_BUTTON_X)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	2bbe      	cmp	r3, #190	; 0xbe
 8002cc8:	d90b      	bls.n	8002ce2 <IsToggleButtonTouched+0x2e>
	{
		// Check if Touch point is higher than X end of clear button
		if(x < (TOGGLE_BUTTON_X + TOGGLE_BUTTON_WIDTH))
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002cd0:	d207      	bcs.n	8002ce2 <IsToggleButtonTouched+0x2e>
		{
			// Check if Touch point is higher than Y begin of clear button
			if(y > TOGGLE_BUTTON_Y)
 8002cd2:	88bb      	ldrh	r3, [r7, #4]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d904      	bls.n	8002ce2 <IsToggleButtonTouched+0x2e>
			{
				// Check if Touch point is higher than Y end of clear button
				if(y < (TOGGLE_BUTTON_Y+TOGGLE_BUTTON_HEIGHT))
 8002cd8:	88bb      	ldrh	r3, [r7, #4]
 8002cda:	2b1c      	cmp	r3, #28
 8002cdc:	d801      	bhi.n	8002ce2 <IsToggleButtonTouched+0x2e>
				{
					// If we are sure that touched point was inside clear button - return 1
					return 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <IsToggleButtonTouched+0x30>
				}
			}
		}
	}
	// If clear button is not touched
	return 0;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <FixCheck>:
//
// PAINT_INIT state function
//

void FixCheck(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
		CurrentFix = NEO6_IsFix(&GpsState);
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <FixCheck+0x34>)
 8002cf6:	f7ff fd9f 	bl	8002838 <NEO6_IsFix>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <FixCheck+0x38>)
 8002d00:	701a      	strb	r2, [r3, #0]
		if(CurrentFix!=CompareFix){
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <FixCheck+0x38>)
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <FixCheck+0x3c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d008      	beq.n	8002d20 <FixCheck+0x30>
		FixIndicator();
 8002d0e:	f7ff fe2d 	bl	800296c <FixIndicator>
		CompareFix = NEO6_IsFix(&GpsState);
 8002d12:	4804      	ldr	r0, [pc, #16]	; (8002d24 <FixCheck+0x34>)
 8002d14:	f7ff fd90 	bl	8002838 <NEO6_IsFix>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <FixCheck+0x3c>)
 8002d1e:	701a      	strb	r2, [r3, #0]
		}

}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200002c0 	.word	0x200002c0
 8002d28:	20000538 	.word	0x20000538
 8002d2c:	20000520 	.word	0x20000520

08002d30 <InitScreen>:

void InitScreen(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af02      	add	r7, sp, #8
	// Clear whole display
	ILI9341_ClearDisplay(ILI9341_WHITE);
 8002d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d3a:	f7fe fecd 	bl	8001ad8 <ILI9341_ClearDisplay>
	// Title
	EF_PutString((const uint8_t*)"GPS", 5, 2, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8002d3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	480c      	ldr	r0, [pc, #48]	; (8002d80 <InitScreen+0x50>)
 8002d50:	f7fe fc3e 	bl	80015d0 <EF_PutString>
	// Drawing area
	GFX_DrawRectangle(DRAW_WINDOW_X_START, DRAW_WINDOW_Y_START, DRAW_WINDOW_X_STOP, DRAW_WINDOW_Y_STOP, ILI9341_BLACK);
 8002d54:	2300      	movs	r3, #0
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	23b4      	movs	r3, #180	; 0xb4
 8002d5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d5e:	211e      	movs	r1, #30
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fe f9d5 	bl	8001110 <GFX_DrawRectangle>
	// Current color indicator
	FixIndicator();
 8002d66:	f7ff fe01 	bl	800296c <FixIndicator>
	// Clear button
	StartButton();
 8002d6a:	f7ff fe25 	bl	80029b8 <StartButton>
	FixCheck();
 8002d6e:	f7ff ffbf 	bl	8002cf0 <FixCheck>



//	ColorButtons();

	State = GUI_DRAW;
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <InitScreen+0x54>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	0800e33c 	.word	0x0800e33c
 8002d84:	20000260 	.word	0x20000260

08002d88 <DrawScreen>:

//
// PAINT_DRAW state function
//
void DrawScreen(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
	TimeAndDate();
 8002d8e:	f7ff fe9d 	bl	8002acc <TimeAndDate>
	FixCheck();
 8002d92:	f7ff ffad 	bl	8002cf0 <FixCheck>
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8002d96:	f7ff f867 	bl	8001e68 <XPT2046_IsTouched>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d011      	beq.n	8002dc4 <DrawScreen+0x3c>
	{
		uint16_t x, y; // Touch points

		XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8002da0:	1d3a      	adds	r2, r7, #4
 8002da2:	1dbb      	adds	r3, r7, #6
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f820 	bl	8001dec <XPT2046_GetTouchPoint>


		// Check if Toggle button was touched
		if(IsToggleButtonTouched(x, y))
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	88ba      	ldrh	r2, [r7, #4]
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff7e 	bl	8002cb4 <IsToggleButtonTouched>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <DrawScreen+0x3c>
		{
			// Jump to Clearing state
			State = GUI_TOGGLE;
 8002dbe:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <DrawScreen+0x44>)
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000260 	.word	0x20000260

08002dd0 <DrawToggle>:

void DrawToggle(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	if(CurrentButton == 0){
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <DrawToggle+0x3c>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <DrawToggle+0x1c>
		CurrentButton = 1;
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <DrawToggle+0x3c>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	801a      	strh	r2, [r3, #0]
		StopButton();
 8002de2:	f7ff fe07 	bl	80029f4 <StopButton>
		TimeReset();
 8002de6:	f7ff fe2d 	bl	8002a44 <TimeReset>
 8002dea:	e00a      	b.n	8002e02 <DrawToggle+0x32>
		//	zapis na SD
	}
	else if(CurrentButton == 1){
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <DrawToggle+0x3c>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <DrawToggle+0x32>
		CurrentButton = 0;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <DrawToggle+0x3c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]
		StartButton();
 8002dfa:	f7ff fddd 	bl	80029b8 <StartButton>
		StatsDisplay();
 8002dfe:	f7ff fedb 	bl	8002bb8 <StatsDisplay>
	}



	State = GUI_DRAW;
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <DrawToggle+0x40>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000262 	.word	0x20000262
 8002e10:	20000260 	.word	0x20000260

08002e14 <Gps>:

void Gps(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b094      	sub	sp, #80	; 0x50
 8002e18:	af02      	add	r7, sp, #8
	uint8_t Message[64];
	uint8_t MessageLength;

	NEO6_Task(&GpsState);
 8002e1a:	4891      	ldr	r0, [pc, #580]	; (8003060 <Gps+0x24c>)
 8002e1c:	f7ff fd19 	bl	8002852 <NEO6_Task>

		  if((HAL_GetTick() - Timer) > 1000)
 8002e20:	f000 ff84 	bl	8003d2c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b8f      	ldr	r3, [pc, #572]	; (8003064 <Gps+0x250>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e30:	f240 81d1 	bls.w	80031d6 <Gps+0x3c2>
		  {
			  MessageLength = sprintf((char*)Message, "\033[2J\033[;H"); // Clear terminal and home cursor
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	498c      	ldr	r1, [pc, #560]	; (8003068 <Gps+0x254>)
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f007 fc0f 	bl	800a65c <siprintf>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	1d39      	adds	r1, r7, #4
 8002e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e50:	4886      	ldr	r0, [pc, #536]	; (800306c <Gps+0x258>)
 8002e52:	f002 feb8 	bl	8005bc6 <HAL_UART_Transmit>

			  if(NEO6_IsFix(&GpsState))
 8002e56:	4882      	ldr	r0, [pc, #520]	; (8003060 <Gps+0x24c>)
 8002e58:	f7ff fcee 	bl	8002838 <NEO6_IsFix>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 81a3 	beq.w	80031aa <Gps+0x396>
			  {
				  if(CurrentButton)
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <Gps+0x25c>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 811f 	beq.w	80030ac <Gps+0x298>
				  {
									  SdCard.FatFsResult = f_open(&SdCard.SdCardFile, "dane_gps.txt", FA_WRITE|FA_OPEN_APPEND);
 8002e6e:	2232      	movs	r2, #50	; 0x32
 8002e70:	4980      	ldr	r1, [pc, #512]	; (8003074 <Gps+0x260>)
 8002e72:	4881      	ldr	r0, [pc, #516]	; (8003078 <Gps+0x264>)
 8002e74:	f006 f882 	bl	8008f7c <f_open>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b7f      	ldr	r3, [pc, #508]	; (800307c <Gps+0x268>)
 8002e7e:	701a      	strb	r2, [r3, #0]

									  MessageLength = sprintf((char*)Message, "Time:%02d:%02d:%02d\n\r", GpsState.Hour+2, GpsState.Minute, GpsState.Second);
 8002e80:	4b77      	ldr	r3, [pc, #476]	; (8003060 <Gps+0x24c>)
 8002e82:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	4b75      	ldr	r3, [pc, #468]	; (8003060 <Gps+0x24c>)
 8002e8a:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4b73      	ldr	r3, [pc, #460]	; (8003060 <Gps+0x24c>)
 8002e92:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8002e96:	1d38      	adds	r0, r7, #4
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4978      	ldr	r1, [pc, #480]	; (8003080 <Gps+0x26c>)
 8002e9e:	f007 fbdd 	bl	800a65c <siprintf>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
									  f_printf(&SdCard.SdCardFile, (char*)Message);
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4872      	ldr	r0, [pc, #456]	; (8003078 <Gps+0x264>)
 8002eae:	f006 fcb7 	bl	8009820 <f_printf>
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002eb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	1d39      	adds	r1, r7, #4
 8002eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ebe:	486b      	ldr	r0, [pc, #428]	; (800306c <Gps+0x258>)
 8002ec0:	f002 fe81 	bl	8005bc6 <HAL_UART_Transmit>

					  				  MessageLength = sprintf((char*)Message, "Date:%02d.%02d.20%02d\n\r", GpsState.Day, GpsState.Month, GpsState.Year);
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <Gps+0x24c>)
 8002ec6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b64      	ldr	r3, [pc, #400]	; (8003060 <Gps+0x24c>)
 8002ece:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <Gps+0x24c>)
 8002ed6:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002eda:	1d38      	adds	r0, r7, #4
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4968      	ldr	r1, [pc, #416]	; (8003084 <Gps+0x270>)
 8002ee2:	f007 fbbb 	bl	800a65c <siprintf>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	1d39      	adds	r1, r7, #4
 8002ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef8:	485c      	ldr	r0, [pc, #368]	; (800306c <Gps+0x258>)
 8002efa:	f002 fe64 	bl	8005bc6 <HAL_UART_Transmit>
					  				  f_printf(&SdCard.SdCardFile, (char*)Message);
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	485d      	ldr	r0, [pc, #372]	; (8003078 <Gps+0x264>)
 8002f04:	f006 fc8c 	bl	8009820 <f_printf>

					  				  MessageLength = sprintf((char*)Message, "Latitude: %.2f %c\n\r", GpsState.Latitude, GpsState.LatitudeDirection);
 8002f08:	4b55      	ldr	r3, [pc, #340]	; (8003060 <Gps+0x24c>)
 8002f0a:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8002f0e:	4954      	ldr	r1, [pc, #336]	; (8003060 <Gps+0x24c>)
 8002f10:	f891 1198 	ldrb.w	r1, [r1, #408]	; 0x198
 8002f14:	1d38      	adds	r0, r7, #4
 8002f16:	9100      	str	r1, [sp, #0]
 8002f18:	495b      	ldr	r1, [pc, #364]	; (8003088 <Gps+0x274>)
 8002f1a:	f007 fb9f 	bl	800a65c <siprintf>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002f24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	1d39      	adds	r1, r7, #4
 8002f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f30:	484e      	ldr	r0, [pc, #312]	; (800306c <Gps+0x258>)
 8002f32:	f002 fe48 	bl	8005bc6 <HAL_UART_Transmit>
					  				  f_printf(&SdCard.SdCardFile, (char*)Message);
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	484f      	ldr	r0, [pc, #316]	; (8003078 <Gps+0x264>)
 8002f3c:	f006 fc70 	bl	8009820 <f_printf>

					  				  MessageLength = sprintf((char*)Message, "Longitude: %.2f %c\n\r", GpsState.Longitude, GpsState.LongitudeDirection);
 8002f40:	4b47      	ldr	r3, [pc, #284]	; (8003060 <Gps+0x24c>)
 8002f42:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8002f46:	4946      	ldr	r1, [pc, #280]	; (8003060 <Gps+0x24c>)
 8002f48:	f891 11a8 	ldrb.w	r1, [r1, #424]	; 0x1a8
 8002f4c:	1d38      	adds	r0, r7, #4
 8002f4e:	9100      	str	r1, [sp, #0]
 8002f50:	494e      	ldr	r1, [pc, #312]	; (800308c <Gps+0x278>)
 8002f52:	f007 fb83 	bl	800a65c <siprintf>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	1d39      	adds	r1, r7, #4
 8002f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f68:	4840      	ldr	r0, [pc, #256]	; (800306c <Gps+0x258>)
 8002f6a:	f002 fe2c 	bl	8005bc6 <HAL_UART_Transmit>
					  				  f_printf(&SdCard.SdCardFile, (char*)Message);
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4841      	ldr	r0, [pc, #260]	; (8003078 <Gps+0x264>)
 8002f74:	f006 fc54 	bl	8009820 <f_printf>

//					  				  MessageLength = sprintf((char*)Message, "Altitude: %.2f m above sea level\n\r", GpsState.Altitude);
//					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
//					  				  f_printf(&SdCard.SdCardFile, (char*)Message);

					  				  MessageLength = sprintf((char*)Message, "Speed:%.2f km/h\n\r", GpsState.SpeedKilometers);
 8002f78:	4b39      	ldr	r3, [pc, #228]	; (8003060 <Gps+0x24c>)
 8002f7a:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8002f7e:	1d38      	adds	r0, r7, #4
 8002f80:	4943      	ldr	r1, [pc, #268]	; (8003090 <Gps+0x27c>)
 8002f82:	f007 fb6b 	bl	800a65c <siprintf>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  TrainingSpeed+=GpsState.SpeedKilometers;
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <Gps+0x24c>)
 8002f8e:	e9d3 0170 	ldrd	r0, r1, [r3, #448]	; 0x1c0
 8002f92:	4b40      	ldr	r3, [pc, #256]	; (8003094 <Gps+0x280>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd f990 	bl	80002bc <__adddf3>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	493c      	ldr	r1, [pc, #240]	; (8003094 <Gps+0x280>)
 8002fa2:	e9c1 2300 	strd	r2, r3, [r1]

					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8002fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	1d39      	adds	r1, r7, #4
 8002fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb2:	482e      	ldr	r0, [pc, #184]	; (800306c <Gps+0x258>)
 8002fb4:	f002 fe07 	bl	8005bc6 <HAL_UART_Transmit>

					  				  GFX_DrawFillRectangle(50, 90, 240, TIME_HEIGHT, ILI9341_WHITE); // Button Color
 8002fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	231a      	movs	r3, #26
 8002fc0:	22f0      	movs	r2, #240	; 0xf0
 8002fc2:	215a      	movs	r1, #90	; 0x5a
 8002fc4:	2032      	movs	r0, #50	; 0x32
 8002fc6:	f7fe f8d0 	bl	800116a <GFX_DrawFillRectangle>

					  				  EF_PutString(Message, 50, 90, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE); // Button text
 8002fca:	1d38      	adds	r0, r7, #4
 8002fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	225a      	movs	r2, #90	; 0x5a
 8002fda:	2132      	movs	r1, #50	; 0x32
 8002fdc:	f7fe faf8 	bl	80015d0 <EF_PutString>

					  				  f_printf(&SdCard.SdCardFile, (char*)Message);
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4824      	ldr	r0, [pc, #144]	; (8003078 <Gps+0x264>)
 8002fe6:	f006 fc1b 	bl	8009820 <f_printf>

//					  				  MessageLength = sprintf((char*)Message, "Vertical dilution of precision: %.2f\n\r", GpsState.Vdop);
//					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
//					  				  f_printf(&SdCard.SdCardFile, (char*)Message);

					  				SdCard.FatFsResult = f_close(&SdCard.SdCardFile);
 8002fea:	4823      	ldr	r0, [pc, #140]	; (8003078 <Gps+0x264>)
 8002fec:	f006 fb77 	bl	80096de <f_close>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <Gps+0x268>)
 8002ff6:	701a      	strb	r2, [r3, #0]

					  				HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4927      	ldr	r1, [pc, #156]	; (8003098 <Gps+0x284>)
 8002ffc:	4827      	ldr	r0, [pc, #156]	; (800309c <Gps+0x288>)
 8002ffe:	f002 f8ff 	bl	8005200 <HAL_RTC_GetTime>
									HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003002:	2200      	movs	r2, #0
 8003004:	4926      	ldr	r1, [pc, #152]	; (80030a0 <Gps+0x28c>)
 8003006:	4825      	ldr	r0, [pc, #148]	; (800309c <Gps+0x288>)
 8003008:	f002 f9ff 	bl	800540a <HAL_RTC_GetDate>


									sprintf((char*)TrainingTimeBuffer, "Time:%02d:%02d:%02d\n\r", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <Gps+0x284>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b21      	ldr	r3, [pc, #132]	; (8003098 <Gps+0x284>)
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	4619      	mov	r1, r3
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <Gps+0x284>)
 800301a:	789b      	ldrb	r3, [r3, #2]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	460b      	mov	r3, r1
 8003020:	4917      	ldr	r1, [pc, #92]	; (8003080 <Gps+0x26c>)
 8003022:	4820      	ldr	r0, [pc, #128]	; (80030a4 <Gps+0x290>)
 8003024:	f007 fb1a 	bl	800a65c <siprintf>

									GFX_DrawFillRectangle(TIME_X+70, TIME_Y-150, TIME_WIDTH+80, TIME_HEIGHT, ILI9341_WHITE); // Button Color
 8003028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	231a      	movs	r3, #26
 8003030:	22d2      	movs	r2, #210	; 0xd2
 8003032:	213c      	movs	r1, #60	; 0x3c
 8003034:	2046      	movs	r0, #70	; 0x46
 8003036:	f7fe f898 	bl	800116a <GFX_DrawFillRectangle>

									EF_PutString(TrainingTimeBuffer, TIME_X+70, TIME_Y-150, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_WHITE); // Button text
 800303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2300      	movs	r3, #0
 8003046:	223c      	movs	r2, #60	; 0x3c
 8003048:	2146      	movs	r1, #70	; 0x46
 800304a:	4816      	ldr	r0, [pc, #88]	; (80030a4 <Gps+0x290>)
 800304c:	f7fe fac0 	bl	80015d0 <EF_PutString>

									counter++;
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <Gps+0x294>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <Gps+0x294>)
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e0b6      	b.n	80031cc <Gps+0x3b8>
 800305e:	bf00      	nop
 8003060:	200002c0 	.word	0x200002c0
 8003064:	20000544 	.word	0x20000544
 8003068:	0800e340 	.word	0x0800e340
 800306c:	20000b98 	.word	0x20000b98
 8003070:	20000262 	.word	0x20000262
 8003074:	0800e34c 	.word	0x0800e34c
 8003078:	2000077c 	.word	0x2000077c
 800307c:	20000548 	.word	0x20000548
 8003080:	0800e35c 	.word	0x0800e35c
 8003084:	0800e374 	.word	0x0800e374
 8003088:	0800e38c 	.word	0x0800e38c
 800308c:	0800e3a0 	.word	0x0800e3a0
 8003090:	0800e3b8 	.word	0x0800e3b8
 8003094:	20000268 	.word	0x20000268
 8003098:	20000524 	.word	0x20000524
 800309c:	20000a30 	.word	0x20000a30
 80030a0:	2000053c 	.word	0x2000053c
 80030a4:	200004e0 	.word	0x200004e0
 80030a8:	20000270 	.word	0x20000270


				  }
				  else
				  {
					  counter =0;
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <Gps+0x3cc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
					  MessageLength = sprintf((char*)Message, "Time:%02d:%02d:%02d\n\r", GpsState.Hour+2, GpsState.Minute, GpsState.Second);
 80030b2:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <Gps+0x3d0>)
 80030b4:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <Gps+0x3d0>)
 80030bc:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 80030c0:	4619      	mov	r1, r3
 80030c2:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <Gps+0x3d0>)
 80030c4:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80030c8:	1d38      	adds	r0, r7, #4
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	4946      	ldr	r1, [pc, #280]	; (80031e8 <Gps+0x3d4>)
 80030d0:	f007 fac4 	bl	800a65c <siprintf>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80030da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030de:	b29a      	uxth	r2, r3
 80030e0:	1d39      	adds	r1, r7, #4
 80030e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e6:	4841      	ldr	r0, [pc, #260]	; (80031ec <Gps+0x3d8>)
 80030e8:	f002 fd6d 	bl	8005bc6 <HAL_UART_Transmit>

					  				  MessageLength = sprintf((char*)Message, "Date:%02d.%02d.20%02d\n\r", GpsState.Day, GpsState.Month, GpsState.Year);
 80030ec:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <Gps+0x3d0>)
 80030ee:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <Gps+0x3d0>)
 80030f6:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 80030fa:	4619      	mov	r1, r3
 80030fc:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <Gps+0x3d0>)
 80030fe:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8003102:	1d38      	adds	r0, r7, #4
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	460b      	mov	r3, r1
 8003108:	4939      	ldr	r1, [pc, #228]	; (80031f0 <Gps+0x3dc>)
 800310a:	f007 faa7 	bl	800a65c <siprintf>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003114:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003118:	b29a      	uxth	r2, r3
 800311a:	1d39      	adds	r1, r7, #4
 800311c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003120:	4832      	ldr	r0, [pc, #200]	; (80031ec <Gps+0x3d8>)
 8003122:	f002 fd50 	bl	8005bc6 <HAL_UART_Transmit>


					  				  MessageLength = sprintf((char*)Message, "Latitude: %.2f %c\n\r", GpsState.Latitude, GpsState.LatitudeDirection);
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <Gps+0x3d0>)
 8003128:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 800312c:	492d      	ldr	r1, [pc, #180]	; (80031e4 <Gps+0x3d0>)
 800312e:	f891 1198 	ldrb.w	r1, [r1, #408]	; 0x198
 8003132:	1d38      	adds	r0, r7, #4
 8003134:	9100      	str	r1, [sp, #0]
 8003136:	492f      	ldr	r1, [pc, #188]	; (80031f4 <Gps+0x3e0>)
 8003138:	f007 fa90 	bl	800a65c <siprintf>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003142:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003146:	b29a      	uxth	r2, r3
 8003148:	1d39      	adds	r1, r7, #4
 800314a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314e:	4827      	ldr	r0, [pc, #156]	; (80031ec <Gps+0x3d8>)
 8003150:	f002 fd39 	bl	8005bc6 <HAL_UART_Transmit>

					  				  MessageLength = sprintf((char*)Message, "Longitude: %.2f %c\n\r", GpsState.Longitude, GpsState.LongitudeDirection);
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <Gps+0x3d0>)
 8003156:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <Gps+0x3d0>)
 800315c:	f891 11a8 	ldrb.w	r1, [r1, #424]	; 0x1a8
 8003160:	1d38      	adds	r0, r7, #4
 8003162:	9100      	str	r1, [sp, #0]
 8003164:	4924      	ldr	r1, [pc, #144]	; (80031f8 <Gps+0x3e4>)
 8003166:	f007 fa79 	bl	800a65c <siprintf>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003174:	b29a      	uxth	r2, r3
 8003176:	1d39      	adds	r1, r7, #4
 8003178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317c:	481b      	ldr	r0, [pc, #108]	; (80031ec <Gps+0x3d8>)
 800317e:	f002 fd22 	bl	8005bc6 <HAL_UART_Transmit>

//					  				  MessageLength = sprintf((char*)Message, "Altitude: %.2f m above sea level\n\r", GpsState.Altitude);
//					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);

					  				  MessageLength = sprintf((char*)Message, "Speed:%f km/h\n\r",GpsState.SpeedKilometers);
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <Gps+0x3d0>)
 8003184:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	; 0x1c0
 8003188:	1d38      	adds	r0, r7, #4
 800318a:	491c      	ldr	r1, [pc, #112]	; (80031fc <Gps+0x3e8>)
 800318c:	f007 fa66 	bl	800a65c <siprintf>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					  				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8003196:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800319a:	b29a      	uxth	r2, r3
 800319c:	1d39      	adds	r1, r7, #4
 800319e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a2:	4812      	ldr	r0, [pc, #72]	; (80031ec <Gps+0x3d8>)
 80031a4:	f002 fd0f 	bl	8005bc6 <HAL_UART_Transmit>
 80031a8:	e010      	b.n	80031cc <Gps+0x3b8>
				  }

			  }
			  else
			  {
				  MessageLength = sprintf((char*)Message, "No Fix\n\r");
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	4914      	ldr	r1, [pc, #80]	; (8003200 <Gps+0x3ec>)
 80031ae:	4618      	mov	r0, r3
 80031b0:	f007 fa54 	bl	800a65c <siprintf>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				  HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 80031ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031be:	b29a      	uxth	r2, r3
 80031c0:	1d39      	adds	r1, r7, #4
 80031c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <Gps+0x3d8>)
 80031c8:	f002 fcfd 	bl	8005bc6 <HAL_UART_Transmit>
			  }

			  Timer = HAL_GetTick();
 80031cc:	f000 fdae 	bl	8003d2c <HAL_GetTick>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a0c      	ldr	r2, [pc, #48]	; (8003204 <Gps+0x3f0>)
 80031d4:	6013      	str	r3, [r2, #0]

		  }

}
 80031d6:	bf00      	nop
 80031d8:	3748      	adds	r7, #72	; 0x48
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000270 	.word	0x20000270
 80031e4:	200002c0 	.word	0x200002c0
 80031e8:	0800e35c 	.word	0x0800e35c
 80031ec:	20000b98 	.word	0x20000b98
 80031f0:	0800e374 	.word	0x0800e374
 80031f4:	0800e38c 	.word	0x0800e38c
 80031f8:	0800e3a0 	.word	0x0800e3a0
 80031fc:	0800e3cc 	.word	0x0800e3cc
 8003200:	0800e3dc 	.word	0x0800e3dc
 8003204:	20000544 	.word	0x20000544

08003208 <Gui>:
void Gui(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
	switch(State)
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <Gui+0x30>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d00c      	beq.n	800322e <Gui+0x26>
 8003214:	2b02      	cmp	r3, #2
 8003216:	dc0d      	bgt.n	8003234 <Gui+0x2c>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <Gui+0x1a>
 800321c:	2b01      	cmp	r3, #1
 800321e:	d003      	beq.n	8003228 <Gui+0x20>
		  break;
	case GUI_TOGGLE:
		DrawToggle();
		break;
	}
}
 8003220:	e008      	b.n	8003234 <Gui+0x2c>
		InitScreen();
 8003222:	f7ff fd85 	bl	8002d30 <InitScreen>
		break;
 8003226:	e005      	b.n	8003234 <Gui+0x2c>
		DrawScreen();
 8003228:	f7ff fdae 	bl	8002d88 <DrawScreen>
		  break;
 800322c:	e002      	b.n	8003234 <Gui+0x2c>
		DrawToggle();
 800322e:	f7ff fdcf 	bl	8002dd0 <DrawToggle>
		break;
 8003232:	bf00      	nop
}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000260 	.word	0x20000260

0800323c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003240:	f000 fd0e 	bl	8003c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003244:	f000 f840 	bl	80032c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003248:	f7fe ff42 	bl	80020d0 <MX_GPIO_Init>
  MX_FATFS_Init();
 800324c:	f003 fbc6 	bl	80069dc <MX_FATFS_Init>
  MX_SPI1_Init();
 8003250:	f000 f96c 	bl	800352c <MX_SPI1_Init>
  MX_SPI2_Init();
 8003254:	f000 f9a0 	bl	8003598 <MX_SPI2_Init>
  MX_SPI3_Init();
 8003258:	f000 f9d4 	bl	8003604 <MX_SPI3_Init>
  MX_RTC_Init();
 800325c:	f000 f8f6 	bl	800344c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003260:	f000 fbfc 	bl	8003a5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003264:	f000 fc24 	bl	8003ab0 <MX_USART2_UART_Init>


  /* Initialize interrupts */
  MX_NVIC_Init();
 8003268:	f000 f8b2 	bl	80033d0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init(&hspi1);
 800326c:	480f      	ldr	r0, [pc, #60]	; (80032ac <main+0x70>)
 800326e:	f7fe fc8f 	bl	8001b90 <ILI9341_Init>
  GFX_SetFont(font_8x5);
 8003272:	480f      	ldr	r0, [pc, #60]	; (80032b0 <main+0x74>)
 8003274:	f7fd fe82 	bl	8000f7c <GFX_SetFont>
  EF_SetFont(&arialBlack_20ptFontInfo);
 8003278:	480e      	ldr	r0, [pc, #56]	; (80032b4 <main+0x78>)
 800327a:	f7fd ff99 	bl	80011b0 <EF_SetFont>
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800327e:	2117      	movs	r1, #23
 8003280:	480d      	ldr	r0, [pc, #52]	; (80032b8 <main+0x7c>)
 8003282:	f7fe fed5 	bl	8002030 <XPT2046_Init>
  NEO6_Init(&GpsState, &huart1);
 8003286:	490d      	ldr	r1, [pc, #52]	; (80032bc <main+0x80>)
 8003288:	480d      	ldr	r0, [pc, #52]	; (80032c0 <main+0x84>)
 800328a:	f7ff faf5 	bl	8002878 <NEO6_Init>
  MountSD();
 800328e:	f7fe fa21 	bl	80016d4 <MountSD>

  Timer = HAL_GetTick();
 8003292:	f000 fd4b 	bl	8003d2c <HAL_GetTick>
 8003296:	4603      	mov	r3, r0
 8003298:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <main+0x88>)
 800329a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 Gps();
 800329c:	f7ff fdba 	bl	8002e14 <Gps>
	 XPT2046_Task();
 80032a0:	f7fe fdf4 	bl	8001e8c <XPT2046_Task>
	 Gui();
 80032a4:	f7ff ffb0 	bl	8003208 <Gui>
	 Gps();
 80032a8:	e7f8      	b.n	800329c <main+0x60>
 80032aa:	bf00      	nop
 80032ac:	20000b00 	.word	0x20000b00
 80032b0:	08011224 	.word	0x08011224
 80032b4:	08010398 	.word	0x08010398
 80032b8:	20000aa8 	.word	0x20000aa8
 80032bc:	20000b58 	.word	0x20000b58
 80032c0:	200002c0 	.word	0x200002c0
 80032c4:	20000544 	.word	0x20000544

080032c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b09a      	sub	sp, #104	; 0x68
 80032cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032d2:	2230      	movs	r2, #48	; 0x30
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f006 fd4e 	bl	8009d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
 80032fc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <SystemClock_Config+0x100>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a30      	ldr	r2, [pc, #192]	; (80033c8 <SystemClock_Config+0x100>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <SystemClock_Config+0x100>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <SystemClock_Config+0x104>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <SystemClock_Config+0x104>)
 8003324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <SystemClock_Config+0x104>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003336:	2306      	movs	r3, #6
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800333a:	2301      	movs	r3, #1
 800333c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800333e:	2301      	movs	r3, #1
 8003340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003342:	2310      	movs	r3, #16
 8003344:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003346:	2302      	movs	r3, #2
 8003348:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800334a:	2300      	movs	r3, #0
 800334c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800334e:	2310      	movs	r3, #16
 8003350:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003352:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003356:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003358:	2304      	movs	r3, #4
 800335a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800335c:	2304      	movs	r3, #4
 800335e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003364:	4618      	mov	r0, r3
 8003366:	f001 f8a1 	bl	80044ac <HAL_RCC_OscConfig>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003370:	f000 f864 	bl	800343c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003374:	230f      	movs	r3, #15
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003378:	2302      	movs	r3, #2
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800338a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fafb 	bl	800498c <HAL_RCC_ClockConfig>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800339c:	f000 f84e 	bl	800343c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033a0:	2302      	movs	r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033aa:	f107 030c 	add.w	r3, r7, #12
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 fce8 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80033ba:	f000 f83f 	bl	800343c <Error_Handler>
  }
}
 80033be:	bf00      	nop
 80033c0:	3768      	adds	r7, #104	; 0x68
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000

080033d0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2100      	movs	r1, #0
 80033d8:	2025      	movs	r0, #37	; 0x25
 80033da:	f000 fe16 	bl	800400a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033de:	2025      	movs	r0, #37	; 0x25
 80033e0:	f000 fe2f 	bl	8004042 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	2017      	movs	r0, #23
 80033ea:	f000 fe0e 	bl	800400a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033ee:	2017      	movs	r0, #23
 80033f0:	f000 fe27 	bl	8004042 <HAL_NVIC_EnableIRQ>
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d101      	bne.n	800340e <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 800340a:	f7fe fe05 	bl	8002018 <XPT2046_IRQ>
	}
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_UART_RxCpltCallback+0x20>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	d102      	bne.n	8003430 <HAL_UART_RxCpltCallback+0x18>
	{
		NEO6_ReceiveUartChar(&GpsState);
 800342a:	4803      	ldr	r0, [pc, #12]	; (8003438 <HAL_UART_RxCpltCallback+0x20>)
 800342c:	f7fe ff28 	bl	8002280 <NEO6_ReceiveUartChar>
	}
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	200002c0 	.word	0x200002c0

0800343c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003460:	2300      	movs	r3, #0
 8003462:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <MX_RTC_Init+0xac>)
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <MX_RTC_Init+0xb0>)
 8003468:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <MX_RTC_Init+0xac>)
 800346c:	2200      	movs	r2, #0
 800346e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <MX_RTC_Init+0xac>)
 8003472:	227f      	movs	r2, #127	; 0x7f
 8003474:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <MX_RTC_Init+0xac>)
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <MX_RTC_Init+0xac>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <MX_RTC_Init+0xac>)
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MX_RTC_Init+0xac>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800348e:	481a      	ldr	r0, [pc, #104]	; (80034f8 <MX_RTC_Init+0xac>)
 8003490:	f001 fd68 	bl	8004f64 <HAL_RTC_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800349a:	f7ff ffcf 	bl	800343c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800349e:	2300      	movs	r3, #0
 80034a0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	2201      	movs	r2, #1
 80034b6:	4619      	mov	r1, r3
 80034b8:	480f      	ldr	r0, [pc, #60]	; (80034f8 <MX_RTC_Init+0xac>)
 80034ba:	f001 fde4 	bl	8005086 <HAL_RTC_SetTime>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80034c4:	f7ff ffba 	bl	800343c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80034c8:	2307      	movs	r3, #7
 80034ca:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 80034cc:	2306      	movs	r3, #6
 80034ce:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80034d0:	2306      	movs	r3, #6
 80034d2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80034d4:	2321      	movs	r3, #33	; 0x21
 80034d6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80034d8:	463b      	mov	r3, r7
 80034da:	2201      	movs	r2, #1
 80034dc:	4619      	mov	r1, r3
 80034de:	4806      	ldr	r0, [pc, #24]	; (80034f8 <MX_RTC_Init+0xac>)
 80034e0:	f001 feec 	bl	80052bc <HAL_RTC_SetDate>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80034ea:	f7ff ffa7 	bl	800343c <Error_Handler>
  }

}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000a30 	.word	0x20000a30
 80034fc:	40002800 	.word	0x40002800

08003500 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a05      	ldr	r2, [pc, #20]	; (8003524 <HAL_RTC_MspInit+0x24>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d102      	bne.n	8003518 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RTC_MspInit+0x28>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40002800 	.word	0x40002800
 8003528:	42470e3c 	.word	0x42470e3c

0800352c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_SPI1_Init+0x64>)
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <MX_SPI1_Init+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <MX_SPI1_Init+0x64>)
 8003538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800353c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_SPI1_Init+0x64>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_SPI1_Init+0x64>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_SPI1_Init+0x64>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_SPI1_Init+0x64>)
 8003552:	2200      	movs	r2, #0
 8003554:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <MX_SPI1_Init+0x64>)
 8003558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <MX_SPI1_Init+0x64>)
 8003560:	2210      	movs	r2, #16
 8003562:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <MX_SPI1_Init+0x64>)
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <MX_SPI1_Init+0x64>)
 800356c:	2200      	movs	r2, #0
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <MX_SPI1_Init+0x64>)
 8003572:	2200      	movs	r2, #0
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <MX_SPI1_Init+0x64>)
 8003578:	220a      	movs	r2, #10
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800357c:	4804      	ldr	r0, [pc, #16]	; (8003590 <MX_SPI1_Init+0x64>)
 800357e:	f002 f823 	bl	80055c8 <HAL_SPI_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003588:	f7ff ff58 	bl	800343c <Error_Handler>
  }

}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000b00 	.word	0x20000b00
 8003594:	40013000 	.word	0x40013000

08003598 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <MX_SPI2_Init+0x64>)
 800359e:	4a18      	ldr	r2, [pc, #96]	; (8003600 <MX_SPI2_Init+0x68>)
 80035a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <MX_SPI2_Init+0x64>)
 80035a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <MX_SPI2_Init+0x64>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <MX_SPI2_Init+0x64>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <MX_SPI2_Init+0x64>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <MX_SPI2_Init+0x64>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <MX_SPI2_Init+0x64>)
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <MX_SPI2_Init+0x64>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <MX_SPI2_Init+0x64>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <MX_SPI2_Init+0x64>)
 80035d8:	2200      	movs	r2, #0
 80035da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <MX_SPI2_Init+0x64>)
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <MX_SPI2_Init+0x64>)
 80035e4:	220a      	movs	r2, #10
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035e8:	4804      	ldr	r0, [pc, #16]	; (80035fc <MX_SPI2_Init+0x64>)
 80035ea:	f001 ffed 	bl	80055c8 <HAL_SPI_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80035f4:	f7ff ff22 	bl	800343c <Error_Handler>
  }

}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000a50 	.word	0x20000a50
 8003600:	40003800 	.word	0x40003800

08003604 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <MX_SPI3_Init+0x64>)
 800360a:	4a18      	ldr	r2, [pc, #96]	; (800366c <MX_SPI3_Init+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <MX_SPI3_Init+0x64>)
 8003610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003614:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <MX_SPI3_Init+0x64>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <MX_SPI3_Init+0x64>)
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <MX_SPI3_Init+0x64>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <MX_SPI3_Init+0x64>)
 800362a:	2200      	movs	r2, #0
 800362c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <MX_SPI3_Init+0x64>)
 8003630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003634:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <MX_SPI3_Init+0x64>)
 8003638:	2220      	movs	r2, #32
 800363a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <MX_SPI3_Init+0x64>)
 800363e:	2200      	movs	r2, #0
 8003640:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <MX_SPI3_Init+0x64>)
 8003644:	2200      	movs	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <MX_SPI3_Init+0x64>)
 800364a:	2200      	movs	r2, #0
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <MX_SPI3_Init+0x64>)
 8003650:	220a      	movs	r2, #10
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <MX_SPI3_Init+0x64>)
 8003656:	f001 ffb7 	bl	80055c8 <HAL_SPI_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003660:	f7ff feec 	bl	800343c <Error_Handler>
  }

}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000aa8 	.word	0x20000aa8
 800366c:	40003c00 	.word	0x40003c00

08003670 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	; 0x38
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a4b      	ldr	r2, [pc, #300]	; (80037bc <HAL_SPI_MspInit+0x14c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d12c      	bne.n	80036ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	4a49      	ldr	r2, [pc, #292]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 800369c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a0:	6453      	str	r3, [r2, #68]	; 0x44
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a42      	ldr	r2, [pc, #264]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036ca:	23e0      	movs	r3, #224	; 0xe0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036da:	2305      	movs	r3, #5
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e2:	4619      	mov	r1, r3
 80036e4:	4837      	ldr	r0, [pc, #220]	; (80037c4 <HAL_SPI_MspInit+0x154>)
 80036e6:	f000 fd13 	bl	8004110 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80036ea:	e063      	b.n	80037b4 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a35      	ldr	r2, [pc, #212]	; (80037c8 <HAL_SPI_MspInit+0x158>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d12d      	bne.n	8003752 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800372e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003740:	2305      	movs	r3, #5
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	4619      	mov	r1, r3
 800374a:	4820      	ldr	r0, [pc, #128]	; (80037cc <HAL_SPI_MspInit+0x15c>)
 800374c:	f000 fce0 	bl	8004110 <HAL_GPIO_Init>
}
 8003750:	e030      	b.n	80037b4 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_SPI_MspInit+0x160>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d12b      	bne.n	80037b4 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 8003782:	f043 0302 	orr.w	r3, r3, #2
 8003786:	6313      	str	r3, [r2, #48]	; 0x30
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_SPI_MspInit+0x150>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003794:	2338      	movs	r3, #56	; 0x38
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a0:	2303      	movs	r3, #3
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037a4:	2306      	movs	r3, #6
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ac:	4619      	mov	r1, r3
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <HAL_SPI_MspInit+0x15c>)
 80037b0:	f000 fcae 	bl	8004110 <HAL_GPIO_Init>
}
 80037b4:	bf00      	nop
 80037b6:	3738      	adds	r7, #56	; 0x38
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013000 	.word	0x40013000
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40003800 	.word	0x40003800
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40003c00 	.word	0x40003c00

080037d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_MspInit+0x4c>)
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <HAL_MspInit+0x4c>)
 80037e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_MspInit+0x4c>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_MspInit+0x4c>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <HAL_MspInit+0x4c>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_MspInit+0x4c>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003812:	2007      	movs	r0, #7
 8003814:	f000 fbee 	bl	8003ff4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <HardFault_Handler+0x4>

08003838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <MemManage_Handler+0x4>

0800383e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003842:	e7fe      	b.n	8003842 <BusFault_Handler+0x4>

08003844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003848:	e7fe      	b.n	8003848 <UsageFault_Handler+0x4>

0800384a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003866:	b480      	push	{r7}
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003878:	f000 fa44 	bl	8003d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}

08003880 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003884:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003888:	f000 fdf8 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <USART1_IRQHandler+0x10>)
 8003896:	f002 fa85 	bl	8005da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000b58 	.word	0x20000b58

080038a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
	return 1;
 80038a8:	2301      	movs	r3, #1
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_kill>:

int _kill(int pid, int sig)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038be:	f006 fa31 	bl	8009d24 <__errno>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2216      	movs	r2, #22
 80038c6:	601a      	str	r2, [r3, #0]
	return -1;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <_exit>:

void _exit (int status)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038dc:	f04f 31ff 	mov.w	r1, #4294967295
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ffe7 	bl	80038b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038e6:	e7fe      	b.n	80038e6 <_exit+0x12>

080038e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e00a      	b.n	8003910 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038fa:	f3af 8000 	nop.w
 80038fe:	4601      	mov	r1, r0
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	60ba      	str	r2, [r7, #8]
 8003906:	b2ca      	uxtb	r2, r1
 8003908:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3301      	adds	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	dbf0      	blt.n	80038fa <_read+0x12>
	}

return len;
 8003918:	687b      	ldr	r3, [r7, #4]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e009      	b.n	8003948 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	60ba      	str	r2, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	dbf1      	blt.n	8003934 <_write+0x12>
	}
	return len;
 8003950:	687b      	ldr	r3, [r7, #4]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <_close>:

int _close(int file)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
	return -1;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003982:	605a      	str	r2, [r3, #4]
	return 0;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <_isatty>:

int _isatty(int file)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
	return 1;
 800399a:	2301      	movs	r3, #1
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
	return 0;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <_sbrk+0x5c>)
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <_sbrk+0x60>)
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <_sbrk+0x64>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <_sbrk+0x64>)
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <_sbrk+0x68>)
 80039e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <_sbrk+0x64>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d207      	bcs.n	8003a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039f4:	f006 f996 	bl	8009d24 <__errno>
 80039f8:	4603      	mov	r3, r0
 80039fa:	220c      	movs	r2, #12
 80039fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	e009      	b.n	8003a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <_sbrk+0x64>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <_sbrk+0x64>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <_sbrk+0x64>)
 8003a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20020000 	.word	0x20020000
 8003a24:	00000400 	.word	0x00000400
 8003a28:	20000274 	.word	0x20000274
 8003a2c:	20001060 	.word	0x20001060

08003a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <SystemInit+0x28>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <SystemInit+0x28>)
 8003a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <SystemInit+0x28>)
 8003a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a62:	4a12      	ldr	r2, [pc, #72]	; (8003aac <MX_USART1_UART_Init+0x50>)
 8003a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a80:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a82:	220c      	movs	r2, #12
 8003a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a92:	4805      	ldr	r0, [pc, #20]	; (8003aa8 <MX_USART1_UART_Init+0x4c>)
 8003a94:	f002 f84a 	bl	8005b2c <HAL_UART_Init>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a9e:	f7ff fccd 	bl	800343c <Error_Handler>
  }

}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000b58 	.word	0x20000b58
 8003aac:	40011000 	.word	0x40011000

08003ab0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <MX_USART2_UART_Init+0x50>)
 8003ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003ad6:	220c      	movs	r2, #12
 8003ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ae6:	4805      	ldr	r0, [pc, #20]	; (8003afc <MX_USART2_UART_Init+0x4c>)
 8003ae8:	f002 f820 	bl	8005b2c <HAL_UART_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003af2:	f7ff fca3 	bl	800343c <Error_Handler>
  }

}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000b98 	.word	0x20000b98
 8003b00:	40004400 	.word	0x40004400

08003b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	; 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a36      	ldr	r2, [pc, #216]	; (8003bfc <HAL_UART_MspInit+0xf8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d135      	bne.n	8003b92 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	4a34      	ldr	r2, [pc, #208]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003b30:	f043 0310 	orr.w	r3, r3, #16
 8003b34:	6453      	str	r3, [r2, #68]	; 0x44
 8003b36:	4b32      	ldr	r3, [pc, #200]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6313      	str	r3, [r2, #48]	; 0x30
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b70:	2307      	movs	r3, #7
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b74:	f107 031c 	add.w	r3, r7, #28
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4822      	ldr	r0, [pc, #136]	; (8003c04 <HAL_UART_MspInit+0x100>)
 8003b7c:	f000 fac8 	bl	8004110 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	2100      	movs	r1, #0
 8003b84:	2025      	movs	r0, #37	; 0x25
 8003b86:	f000 fa40 	bl	800400a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b8a:	2025      	movs	r0, #37	; 0x25
 8003b8c:	f000 fa59 	bl	8004042 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b90:	e030      	b.n	8003bf4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_UART_MspInit+0x104>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d12b      	bne.n	8003bf4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003baa:	6413      	str	r3, [r2, #64]	; 0x40
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_UART_MspInit+0xfc>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003bd4:	230c      	movs	r3, #12
 8003bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003be4:	2307      	movs	r3, #7
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	f107 031c 	add.w	r3, r7, #28
 8003bec:	4619      	mov	r1, r3
 8003bee:	4805      	ldr	r0, [pc, #20]	; (8003c04 <HAL_UART_MspInit+0x100>)
 8003bf0:	f000 fa8e 	bl	8004110 <HAL_GPIO_Init>
}
 8003bf4:	bf00      	nop
 8003bf6:	3730      	adds	r7, #48	; 0x30
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020000 	.word	0x40020000
 8003c08:	40004400 	.word	0x40004400

08003c0c <Reset_Handler>:
 8003c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c44 <LoopFillZerobss+0x14>
 8003c10:	2100      	movs	r1, #0
 8003c12:	e003      	b.n	8003c1c <LoopCopyDataInit>

08003c14 <CopyDataInit>:
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <LoopFillZerobss+0x18>)
 8003c16:	585b      	ldr	r3, [r3, r1]
 8003c18:	5043      	str	r3, [r0, r1]
 8003c1a:	3104      	adds	r1, #4

08003c1c <LoopCopyDataInit>:
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <LoopFillZerobss+0x1c>)
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <LoopFillZerobss+0x20>)
 8003c20:	1842      	adds	r2, r0, r1
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3f6      	bcc.n	8003c14 <CopyDataInit>
 8003c26:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <LoopFillZerobss+0x24>)
 8003c28:	e002      	b.n	8003c30 <LoopFillZerobss>

08003c2a <FillZerobss>:
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f842 3b04 	str.w	r3, [r2], #4

08003c30 <LoopFillZerobss>:
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <LoopFillZerobss+0x28>)
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3f9      	bcc.n	8003c2a <FillZerobss>
 8003c36:	f7ff fefb 	bl	8003a30 <SystemInit>
 8003c3a:	f006 f879 	bl	8009d30 <__libc_init_array>
 8003c3e:	f7ff fafd 	bl	800323c <main>
 8003c42:	4770      	bx	lr
 8003c44:	20020000 	.word	0x20020000
 8003c48:	0801195c 	.word	0x0801195c
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	20000228 	.word	0x20000228
 8003c54:	20000228 	.word	0x20000228
 8003c58:	2000105c 	.word	0x2000105c

08003c5c <ADC_IRQHandler>:
 8003c5c:	e7fe      	b.n	8003c5c <ADC_IRQHandler>
	...

08003c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_Init+0x40>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <HAL_Init+0x40>)
 8003c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_Init+0x40>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <HAL_Init+0x40>)
 8003c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_Init+0x40>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <HAL_Init+0x40>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c88:	2003      	movs	r0, #3
 8003c8a:	f000 f9b3 	bl	8003ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f808 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c94:	f7ff fd9e 	bl	80037d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023c00 	.word	0x40023c00

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_InitTick+0x54>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_InitTick+0x58>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f9d9 	bl	800407a <HAL_SYSTICK_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00e      	b.n	8003cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0f      	cmp	r3, #15
 8003cd6:	d80a      	bhi.n	8003cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f000 f993 	bl	800400a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ce4:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <HAL_InitTick+0x5c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000030 	.word	0x20000030
 8003cfc:	20000038 	.word	0x20000038
 8003d00:	20000034 	.word	0x20000034

08003d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_IncTick+0x20>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_IncTick+0x24>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <HAL_IncTick+0x24>)
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000038 	.word	0x20000038
 8003d28:	20000bd8 	.word	0x20000bd8

08003d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_GetTick+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000bd8 	.word	0x20000bd8

08003d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff ffee 	bl	8003d2c <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d005      	beq.n	8003d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_Delay+0x44>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6a:	bf00      	nop
 8003d6c:	f7ff ffde 	bl	8003d2c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d8f7      	bhi.n	8003d6c <HAL_Delay+0x28>
  {
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000038 	.word	0x20000038

08003d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <__NVIC_GetPriorityGrouping+0x18>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f003 0307 	and.w	r3, r3, #7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db0b      	blt.n	8003e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	4907      	ldr	r1, [pc, #28]	; (8003e28 <__NVIC_EnableIRQ+0x38>)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2001      	movs	r0, #1
 8003e12:	fa00 f202 	lsl.w	r2, r0, r2
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db12      	blt.n	8003e64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	490a      	ldr	r1, [pc, #40]	; (8003e70 <__NVIC_DisableIRQ+0x44>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	3320      	adds	r3, #32
 8003e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e58:	f3bf 8f4f 	dsb	sy
}
 8003e5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e5e:	f3bf 8f6f 	isb	sy
}
 8003e62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db0e      	blt.n	8003ea4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003e86:	4a0b      	ldr	r2, [pc, #44]	; (8003eb4 <__NVIC_GetPendingIRQ+0x40>)
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	3340      	adds	r3, #64	; 0x40
 8003e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	e000      	b.n	8003ea6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8003ea4:	2300      	movs	r3, #0
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	db0c      	blt.n	8003ee4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	f003 021f 	and.w	r2, r3, #31
 8003ed0:	4907      	ldr	r1, [pc, #28]	; (8003ef0 <__NVIC_ClearPendingIRQ+0x38>)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2001      	movs	r0, #1
 8003eda:	fa00 f202 	lsl.w	r2, r0, r2
 8003ede:	3360      	adds	r3, #96	; 0x60
 8003ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000e100 	.word	0xe000e100

08003ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	6039      	str	r1, [r7, #0]
 8003efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	db0a      	blt.n	8003f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	490c      	ldr	r1, [pc, #48]	; (8003f40 <__NVIC_SetPriority+0x4c>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	0112      	lsls	r2, r2, #4
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	440b      	add	r3, r1
 8003f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f1c:	e00a      	b.n	8003f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4908      	ldr	r1, [pc, #32]	; (8003f44 <__NVIC_SetPriority+0x50>)
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	3b04      	subs	r3, #4
 8003f2c:	0112      	lsls	r2, r2, #4
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	440b      	add	r3, r1
 8003f32:	761a      	strb	r2, [r3, #24]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	e000e100 	.word	0xe000e100
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b089      	sub	sp, #36	; 0x24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f1c3 0307 	rsb	r3, r3, #7
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf28      	it	cs
 8003f66:	2304      	movcs	r3, #4
 8003f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d902      	bls.n	8003f78 <NVIC_EncodePriority+0x30>
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3b03      	subs	r3, #3
 8003f76:	e000      	b.n	8003f7a <NVIC_EncodePriority+0x32>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43da      	mvns	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f90:	f04f 31ff 	mov.w	r1, #4294967295
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	43d9      	mvns	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	4313      	orrs	r3, r2
         );
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3724      	adds	r7, #36	; 0x24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc0:	d301      	bcc.n	8003fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e00f      	b.n	8003fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <SysTick_Config+0x40>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fce:	210f      	movs	r1, #15
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	f7ff ff8e 	bl	8003ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <SysTick_Config+0x40>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <SysTick_Config+0x40>)
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	e000e010 	.word	0xe000e010

08003ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fec5 	bl	8003d8c <__NVIC_SetPriorityGrouping>
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800401c:	f7ff feda 	bl	8003dd4 <__NVIC_GetPriorityGrouping>
 8004020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f7ff ff8e 	bl	8003f48 <NVIC_EncodePriority>
 800402c:	4602      	mov	r2, r0
 800402e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff5d 	bl	8003ef4 <__NVIC_SetPriority>
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	4603      	mov	r3, r0
 800404a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800404c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fecd 	bl	8003df0 <__NVIC_EnableIRQ>
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	4603      	mov	r3, r0
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fedd 	bl	8003e2c <__NVIC_DisableIRQ>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ff94 	bl	8003fb0 <SysTick_Config>
 8004088:	4603      	mov	r3, r0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	4603      	mov	r3, r0
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff fee7 	bl	8003e74 <__NVIC_GetPendingIRQ>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fefa 	bl	8003eb8 <__NVIC_ClearPendingIRQ>
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d004      	beq.n	80040ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2280      	movs	r2, #128	; 0x80
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e00c      	b.n	8004104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2205      	movs	r2, #5
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	e159      	b.n	80043e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800412c:	2201      	movs	r2, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	f040 8148 	bne.w	80043da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d00b      	beq.n	800416a <HAL_GPIO_Init+0x5a>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d007      	beq.n	800416a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800415e:	2b11      	cmp	r3, #17
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b12      	cmp	r3, #18
 8004168:	d130      	bne.n	80041cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	2203      	movs	r2, #3
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a0:	2201      	movs	r2, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 0201 	and.w	r2, r3, #1
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0xfc>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b12      	cmp	r3, #18
 800420a:	d123      	bne.n	8004254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80a2 	beq.w	80043da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <HAL_GPIO_Init+0x2e8>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4a56      	ldr	r2, [pc, #344]	; (80043f8 <HAL_GPIO_Init+0x2e8>)
 80042a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a4:	6453      	str	r3, [r2, #68]	; 0x44
 80042a6:	4b54      	ldr	r3, [pc, #336]	; (80043f8 <HAL_GPIO_Init+0x2e8>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b2:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_GPIO_Init+0x2ec>)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a49      	ldr	r2, [pc, #292]	; (8004400 <HAL_GPIO_Init+0x2f0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_Init+0x202>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a48      	ldr	r2, [pc, #288]	; (8004404 <HAL_GPIO_Init+0x2f4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x1fe>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a47      	ldr	r2, [pc, #284]	; (8004408 <HAL_GPIO_Init+0x2f8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_Init+0x1fa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a46      	ldr	r2, [pc, #280]	; (800440c <HAL_GPIO_Init+0x2fc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_Init+0x1f6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a45      	ldr	r2, [pc, #276]	; (8004410 <HAL_GPIO_Init+0x300>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_Init+0x1f2>
 80042fe:	2304      	movs	r3, #4
 8004300:	e008      	b.n	8004314 <HAL_GPIO_Init+0x204>
 8004302:	2307      	movs	r3, #7
 8004304:	e006      	b.n	8004314 <HAL_GPIO_Init+0x204>
 8004306:	2303      	movs	r3, #3
 8004308:	e004      	b.n	8004314 <HAL_GPIO_Init+0x204>
 800430a:	2302      	movs	r3, #2
 800430c:	e002      	b.n	8004314 <HAL_GPIO_Init+0x204>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_GPIO_Init+0x204>
 8004312:	2300      	movs	r3, #0
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f002 0203 	and.w	r2, r2, #3
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	4093      	lsls	r3, r2
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004324:	4935      	ldr	r1, [pc, #212]	; (80043fc <HAL_GPIO_Init+0x2ec>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004332:	4b38      	ldr	r3, [pc, #224]	; (8004414 <HAL_GPIO_Init+0x304>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004356:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <HAL_GPIO_Init+0x304>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_GPIO_Init+0x304>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_GPIO_Init+0x304>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_GPIO_Init+0x304>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043aa:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_GPIO_Init+0x304>)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_GPIO_Init+0x304>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043d4:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <HAL_GPIO_Init+0x304>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	f67f aea2 	bls.w	800412c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40013800 	.word	0x40013800
 8004400:	40020000 	.word	0x40020000
 8004404:	40020400 	.word	0x40020400
 8004408:	40020800 	.word	0x40020800
 800440c:	40020c00 	.word	0x40020c00
 8004410:	40021000 	.word	0x40021000
 8004414:	40013c00 	.word	0x40013c00

08004418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e001      	b.n	800443a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004458:	787b      	ldrb	r3, [r7, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004464:	e003      	b.n	800446e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	041a      	lsls	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	619a      	str	r2, [r3, #24]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe ffac 	bl	80033f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013c00 	.word	0x40013c00

080044ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e25b      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d075      	beq.n	80045b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ca:	4ba3      	ldr	r3, [pc, #652]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d00c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d6:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d112      	bne.n	8004508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e2:	4b9d      	ldr	r3, [pc, #628]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ee:	d10b      	bne.n	8004508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	4b99      	ldr	r3, [pc, #612]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05b      	beq.n	80045b4 <HAL_RCC_OscConfig+0x108>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d157      	bne.n	80045b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e236      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x74>
 8004512:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a90      	ldr	r2, [pc, #576]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e01d      	b.n	800455c <HAL_RCC_OscConfig+0xb0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x98>
 800452a:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a8a      	ldr	r2, [pc, #552]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a87      	ldr	r2, [pc, #540]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0xb0>
 8004544:	4b84      	ldr	r3, [pc, #528]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a83      	ldr	r2, [pc, #524]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800454a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b81      	ldr	r3, [pc, #516]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a80      	ldr	r2, [pc, #512]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7ff fbe2 	bl	8003d2c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800456c:	f7ff fbde 	bl	8003d2c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1fb      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0xc0>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7ff fbce 	bl	8003d2c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004594:	f7ff fbca 	bl	8003d2c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1e7      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0xe8>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d063      	beq.n	800468a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045c2:	4b65      	ldr	r3, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b62      	ldr	r3, [pc, #392]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d11c      	bne.n	8004614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045da:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d116      	bne.n	8004614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_RCC_OscConfig+0x152>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e1bb      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4952      	ldr	r1, [pc, #328]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	e03a      	b.n	800468a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461c:	4b4f      	ldr	r3, [pc, #316]	; (800475c <HAL_RCC_OscConfig+0x2b0>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004622:	f7ff fb83 	bl	8003d2c <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462a:	f7ff fb7f 	bl	8003d2c <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e19c      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	4b46      	ldr	r3, [pc, #280]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4940      	ldr	r1, [pc, #256]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
 800465c:	e015      	b.n	800468a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465e:	4b3f      	ldr	r3, [pc, #252]	; (800475c <HAL_RCC_OscConfig+0x2b0>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7ff fb62 	bl	8003d2c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466c:	f7ff fb5e 	bl	8003d2c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e17b      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	4b36      	ldr	r3, [pc, #216]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d030      	beq.n	80046f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800469e:	4b30      	ldr	r3, [pc, #192]	; (8004760 <HAL_RCC_OscConfig+0x2b4>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7ff fb42 	bl	8003d2c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ac:	f7ff fb3e 	bl	8003d2c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e15b      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x200>
 80046ca:	e015      	b.n	80046f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCC_OscConfig+0x2b4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d2:	f7ff fb2b 	bl	8003d2c <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046da:	f7ff fb27 	bl	8003d2c <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e144      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80a0 	beq.w	8004846 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a0e      	ldr	r2, [pc, #56]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_OscConfig+0x2b8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d121      	bne.n	8004786 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_RCC_OscConfig+0x2b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <HAL_RCC_OscConfig+0x2b8>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474e:	f7ff faed 	bl	8003d2c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	e011      	b.n	800477a <HAL_RCC_OscConfig+0x2ce>
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800
 800475c:	42470000 	.word	0x42470000
 8004760:	42470e80 	.word	0x42470e80
 8004764:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004768:	f7ff fae0 	bl	8003d2c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e0fd      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477a:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x4d4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d106      	bne.n	800479c <HAL_RCC_OscConfig+0x2f0>
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x32a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x312>
 80047a4:	4b77      	ldr	r3, [pc, #476]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a76      	ldr	r2, [pc, #472]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	4b74      	ldr	r3, [pc, #464]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a73      	ldr	r2, [pc, #460]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x32a>
 80047be:	4b71      	ldr	r3, [pc, #452]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a70      	ldr	r2, [pc, #448]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	4b6e      	ldr	r3, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a6d      	ldr	r2, [pc, #436]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7ff faa5 	bl	8003d2c <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7ff faa1 	bl	8003d2c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0bc      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x33a>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7ff fa8f 	bl	8003d2c <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7ff fa8b 	bl	8003d2c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0a6      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b56      	ldr	r3, [pc, #344]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b52      	ldr	r3, [pc, #328]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a51      	ldr	r2, [pc, #324]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8092 	beq.w	8004974 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004850:	4b4c      	ldr	r3, [pc, #304]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d05c      	beq.n	8004916 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d141      	bne.n	80048e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b48      	ldr	r3, [pc, #288]	; (8004988 <HAL_RCC_OscConfig+0x4dc>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7ff fa5f 	bl	8003d2c <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004872:	f7ff fa5b 	bl	8003d2c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e078      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004884:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	019b      	lsls	r3, r3, #6
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	3b01      	subs	r3, #1
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	4933      	ldr	r1, [pc, #204]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ba:	4b33      	ldr	r3, [pc, #204]	; (8004988 <HAL_RCC_OscConfig+0x4dc>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7ff fa34 	bl	8003d2c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7ff fa30 	bl	8003d2c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e04d      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x41c>
 80048e6:	e045      	b.n	8004974 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_OscConfig+0x4dc>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7ff fa1d 	bl	8003d2c <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f6:	f7ff fa19 	bl	8003d2c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e036      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x44a>
 8004914:	e02e      	b.n	8004974 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e029      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_RCC_OscConfig+0x4d8>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	429a      	cmp	r2, r3
 8004934:	d11c      	bne.n	8004970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d115      	bne.n	8004970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800494a:	4013      	ands	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004950:	4293      	cmp	r3, r2
 8004952:	d10d      	bne.n	8004970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40007000 	.word	0x40007000
 8004984:	40023800 	.word	0x40023800
 8004988:	42470060 	.word	0x42470060

0800498c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0cc      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b68      	ldr	r3, [pc, #416]	; (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d90c      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e0:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a58      	ldr	r2, [pc, #352]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f8:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b50      	ldr	r3, [pc, #320]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	494d      	ldr	r1, [pc, #308]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d044      	beq.n	8004aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d119      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e067      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6a:	4b37      	ldr	r3, [pc, #220]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 0203 	bic.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4934      	ldr	r1, [pc, #208]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a7c:	f7ff f956 	bl	8003d2c <HAL_GetTick>
 8004a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a84:	f7ff f952 	bl	8003d2c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e04f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 020c 	and.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1eb      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aac:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d20c      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e032      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4916      	ldr	r1, [pc, #88]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	490e      	ldr	r1, [pc, #56]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b12:	f000 f821 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	490a      	ldr	r1, [pc, #40]	; (8004b4c <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	5ccb      	ldrb	r3, [r1, r3]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_ClockConfig+0x1c8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff f8b6 	bl	8003ca4 <HAL_InitTick>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023c00 	.word	0x40023c00
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	08011404 	.word	0x08011404
 8004b50:	20000030 	.word	0x20000030
 8004b54:	20000034 	.word	0x20000034

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b70:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	f200 80bd 	bhi.w	8004cfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8a:	e0b7      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b8e:	60bb      	str	r3, [r7, #8]
       break;
 8004b90:	e0b7      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b92:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b94:	60bb      	str	r3, [r7, #8]
      break;
 8004b96:	e0b4      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b98:	4b5d      	ldr	r3, [pc, #372]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04d      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	ea02 0800 	and.w	r8, r2, r0
 8004bc6:	ea03 0901 	and.w	r9, r3, r1
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	014b      	lsls	r3, r1, #5
 8004bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bdc:	0142      	lsls	r2, r0, #5
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	ebb0 0008 	subs.w	r0, r0, r8
 8004be6:	eb61 0109 	sbc.w	r1, r1, r9
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	018b      	lsls	r3, r1, #6
 8004bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bf8:	0182      	lsls	r2, r0, #6
 8004bfa:	1a12      	subs	r2, r2, r0
 8004bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8004c00:	f04f 0000 	mov.w	r0, #0
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	00d9      	lsls	r1, r3, #3
 8004c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c0e:	00d0      	lsls	r0, r2, #3
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	eb12 0208 	adds.w	r2, r2, r8
 8004c18:	eb43 0309 	adc.w	r3, r3, r9
 8004c1c:	f04f 0000 	mov.w	r0, #0
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	0259      	lsls	r1, r3, #9
 8004c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c2a:	0250      	lsls	r0, r2, #9
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	f7fb ffec 	bl	8000c18 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e04a      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	ea02 0400 	and.w	r4, r2, r0
 8004c62:	ea03 0501 	and.w	r5, r3, r1
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	014b      	lsls	r3, r1, #5
 8004c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c78:	0142      	lsls	r2, r0, #5
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	1b00      	subs	r0, r0, r4
 8004c80:	eb61 0105 	sbc.w	r1, r1, r5
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	018b      	lsls	r3, r1, #6
 8004c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c92:	0182      	lsls	r2, r0, #6
 8004c94:	1a12      	subs	r2, r2, r0
 8004c96:	eb63 0301 	sbc.w	r3, r3, r1
 8004c9a:	f04f 0000 	mov.w	r0, #0
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	00d9      	lsls	r1, r3, #3
 8004ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca8:	00d0      	lsls	r0, r2, #3
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	1912      	adds	r2, r2, r4
 8004cb0:	eb45 0303 	adc.w	r3, r5, r3
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	0299      	lsls	r1, r3, #10
 8004cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cc2:	0290      	lsls	r0, r2, #10
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4619      	mov	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f7fb ffa0 	bl	8000c18 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4613      	mov	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	3301      	adds	r3, #1
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	60bb      	str	r3, [r7, #8]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cfe:	60bb      	str	r3, [r7, #8]
      break;
 8004d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d02:	68bb      	ldr	r3, [r7, #8]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	00f42400 	.word	0x00f42400
 8004d18:	007a1200 	.word	0x007a1200

08004d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000030 	.word	0x20000030

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d38:	f7ff fff0 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0a9b      	lsrs	r3, r3, #10
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	08011414 	.word	0x08011414

08004d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d60:	f7ff ffdc 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0b5b      	lsrs	r3, r3, #13
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	08011414 	.word	0x08011414

08004d84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d038      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dac:	4b68      	ldr	r3, [pc, #416]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004db2:	f7fe ffbb 	bl	8003d2c <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dba:	f7fe ffb7 	bl	8003d2c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e0bd      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dcc:	4b61      	ldr	r3, [pc, #388]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	019b      	lsls	r3, r3, #6
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	071b      	lsls	r3, r3, #28
 8004dea:	495a      	ldr	r1, [pc, #360]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004df2:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004df8:	f7fe ff98 	bl	8003d2c <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e00:	f7fe ff94 	bl	8003d2c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e09a      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e12:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8083 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	4b48      	ldr	r3, [pc, #288]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	4a47      	ldr	r2, [pc, #284]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3c:	4b45      	ldr	r3, [pc, #276]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e48:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a42      	ldr	r2, [pc, #264]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e52:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e54:	f7fe ff6a 	bl	8003d2c <HAL_GetTick>
 8004e58:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e5c:	f7fe ff66 	bl	8003d2c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e06c      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e6e:	4b3a      	ldr	r3, [pc, #232]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e7a:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02f      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d028      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e98:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eae:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eb4:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d114      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fe ff34 	bl	8003d2c <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fe ff30 	bl	8003d2c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e034      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ee      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004ef8:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0c:	4911      	ldr	r1, [pc, #68]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
 8004f12:	e005      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f14:	4b0f      	ldr	r3, [pc, #60]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a0e      	ldr	r2, [pc, #56]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f1e:	6093      	str	r3, [r2, #8]
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2c:	4909      	ldr	r1, [pc, #36]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	7d1a      	ldrb	r2, [r3, #20]
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f44:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	42470068 	.word	0x42470068
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470e40 	.word	0x42470e40
 8004f60:	424711e0 	.word	0x424711e0

08004f64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e083      	b.n	800507e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7f5b      	ldrb	r3, [r3, #29]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fe faba 	bl	8003500 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	22ca      	movs	r2, #202	; 0xca
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2253      	movs	r2, #83	; 0x53
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 faa8 	bl	80054f8 <RTC_EnterInitMode>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	22ff      	movs	r2, #255	; 0xff
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e05e      	b.n	800507e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68d2      	ldr	r2, [r2, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6919      	ldr	r1, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	041a      	lsls	r2, r3, #16
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800501e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10e      	bne.n	800504c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa3a 	bl	80054a8 <HAL_RTC_WaitForSynchro>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e018      	b.n	800507e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	22ff      	movs	r2, #255	; 0xff
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800507c:	2300      	movs	r3, #0
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005086:	b590      	push	{r4, r7, lr}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	7f1b      	ldrb	r3, [r3, #28]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_RTC_SetTime+0x1c>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0aa      	b.n	80051f8 <HAL_RTC_SetTime+0x172>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2202      	movs	r2, #2
 80050ac:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d126      	bne.n	8005102 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fa3f 	bl	8005550 <RTC_ByteToBcd2>
 80050d2:	4603      	mov	r3, r0
 80050d4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fa38 	bl	8005550 <RTC_ByteToBcd2>
 80050e0:	4603      	mov	r3, r0
 80050e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050e4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	789b      	ldrb	r3, [r3, #2]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fa30 	bl	8005550 <RTC_ByteToBcd2>
 80050f0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e018      	b.n	8005134 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005122:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005128:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	22ca      	movs	r2, #202	; 0xca
 800513a:	625a      	str	r2, [r3, #36]	; 0x24
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2253      	movs	r2, #83	; 0x53
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f9d7 	bl	80054f8 <RTC_EnterInitMode>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2204      	movs	r2, #4
 800515c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e047      	b.n	80051f8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005172:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005176:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005186:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6899      	ldr	r1, [r3, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	431a      	orrs	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d111      	bne.n	80051e2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f972 	bl	80054a8 <HAL_RTC_WaitForSynchro>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2204      	movs	r2, #4
 80051d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00a      	b.n	80051f8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	22ff      	movs	r2, #255	; 0xff
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80051f6:	2300      	movs	r3, #0
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}

08005200 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005232:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005236:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11a      	bne.n	80052b2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f983 	bl	800558c <RTC_Bcd2ToByte>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f97a 	bl	800558c <RTC_Bcd2ToByte>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	789b      	ldrb	r3, [r3, #2]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f971 	bl	800558c <RTC_Bcd2ToByte>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	7f1b      	ldrb	r3, [r3, #28]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_RTC_SetDate+0x1c>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e094      	b.n	8005402 <HAL_RTC_SetDate+0x146>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2202      	movs	r2, #2
 80052e2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10e      	bne.n	8005308 <HAL_RTC_SetDate+0x4c>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	f023 0310 	bic.w	r3, r3, #16
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	330a      	adds	r3, #10
 8005302:	b2da      	uxtb	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11c      	bne.n	8005348 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	78db      	ldrb	r3, [r3, #3]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f91c 	bl	8005550 <RTC_ByteToBcd2>
 8005318:	4603      	mov	r3, r0
 800531a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f915 	bl	8005550 <RTC_ByteToBcd2>
 8005326:	4603      	mov	r3, r0
 8005328:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800532a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	789b      	ldrb	r3, [r3, #2]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f90d 	bl	8005550 <RTC_ByteToBcd2>
 8005336:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005338:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e00e      	b.n	8005366 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	78db      	ldrb	r3, [r3, #3]
 800534c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005354:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800535a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	22ca      	movs	r2, #202	; 0xca
 800536c:	625a      	str	r2, [r3, #36]	; 0x24
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2253      	movs	r2, #83	; 0x53
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f8be 	bl	80054f8 <RTC_EnterInitMode>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2204      	movs	r2, #4
 800538e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e033      	b.n	8005402 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d111      	bne.n	80053ec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f86d 	bl	80054a8 <HAL_RTC_WaitForSynchro>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2204      	movs	r2, #4
 80053e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e00a      	b.n	8005402 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005400:	2300      	movs	r3, #0
  }
}
 8005402:	4618      	mov	r0, r3
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}

0800540a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005428:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	b2da      	uxtb	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	0b5b      	lsrs	r3, r3, #13
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11a      	bne.n	800549e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f88d 	bl	800558c <RTC_Bcd2ToByte>
 8005472:	4603      	mov	r3, r0
 8005474:	461a      	mov	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f884 	bl	800558c <RTC_Bcd2ToByte>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	789b      	ldrb	r3, [r3, #2]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f87b 	bl	800558c <RTC_Bcd2ToByte>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054c4:	f7fe fc32 	bl	8003d2c <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054ca:	e009      	b.n	80054e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054cc:	f7fe fc2e 	bl	8003d2c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054da:	d901      	bls.n	80054e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e007      	b.n	80054f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0ee      	beq.n	80054cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d119      	bne.n	8005546 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f04f 32ff 	mov.w	r2, #4294967295
 800551a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800551c:	f7fe fc06 	bl	8003d2c <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005522:	e009      	b.n	8005538 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005524:	f7fe fc02 	bl	8003d2c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005532:	d901      	bls.n	8005538 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e007      	b.n	8005548 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800555e:	e005      	b.n	800556c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	3b0a      	subs	r3, #10
 800556a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b09      	cmp	r3, #9
 8005570:	d8f6      	bhi.n	8005560 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	b2da      	uxtb	r2, r3
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	4313      	orrs	r3, r2
 800557e:	b2db      	uxtb	r3, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	b2db      	uxtb	r3, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e056      	b.n	8005688 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fe f83b 	bl	8003670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005610:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	ea42 0103 	orr.w	r1, r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	f003 0104 	and.w	r1, r3, #4
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005676:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	; 0x30
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800569e:	2301      	movs	r3, #1
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x26>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e18a      	b.n	80059cc <HAL_SPI_TransmitReceive+0x33c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056be:	f7fe fb35 	bl	8003d2c <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d00f      	beq.n	8005700 <HAL_SPI_TransmitReceive+0x70>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e6:	d107      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d103      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x68>
 80056f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d003      	beq.n	8005700 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80056fe:	e15b      	b.n	80059b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x82>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x82>
 800570c:	887b      	ldrh	r3, [r7, #2]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005718:	e14e      	b.n	80059b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b04      	cmp	r3, #4
 8005724:	d003      	beq.n	800572e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2205      	movs	r2, #5
 800572a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	887a      	ldrh	r2, [r7, #2]
 8005744:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	887a      	ldrh	r2, [r7, #2]
 8005750:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	887a      	ldrh	r2, [r7, #2]
 8005756:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d007      	beq.n	8005782 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578a:	d178      	bne.n	800587e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_SPI_TransmitReceive+0x10a>
 8005794:	8b7b      	ldrh	r3, [r7, #26]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d166      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	881a      	ldrh	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057be:	e053      	b.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d11b      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x176>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d016      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x176>
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d113      	bne.n	8005806 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	1c9a      	adds	r2, r3, #2
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b01      	cmp	r3, #1
 8005812:	d119      	bne.n	8005848 <HAL_SPI_TransmitReceive+0x1b8>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d014      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	b292      	uxth	r2, r2
 800582a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005844:	2301      	movs	r3, #1
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005848:	f7fe fa70 	bl	8003d2c <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005854:	429a      	cmp	r2, r3
 8005856:	d807      	bhi.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d003      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005866:	e0a7      	b.n	80059b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1a6      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x130>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1a1      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x130>
 800587c:	e07c      	b.n	8005978 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_SPI_TransmitReceive+0x1fc>
 8005886:	8b7b      	ldrh	r3, [r7, #26]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d16b      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b2:	e057      	b.n	8005964 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d11c      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x26c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d017      	beq.n	80058fc <HAL_SPI_TransmitReceive+0x26c>
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d114      	bne.n	80058fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	7812      	ldrb	r2, [r2, #0]
 80058de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b01      	cmp	r3, #1
 8005908:	d119      	bne.n	800593e <HAL_SPI_TransmitReceive+0x2ae>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d014      	beq.n	800593e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800593a:	2301      	movs	r3, #1
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800593e:	f7fe f9f5 	bl	8003d2c <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594a:	429a      	cmp	r2, r3
 800594c:	d803      	bhi.n	8005956 <HAL_SPI_TransmitReceive+0x2c6>
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d102      	bne.n	800595c <HAL_SPI_TransmitReceive+0x2cc>
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005962:	e029      	b.n	80059b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1a2      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x224>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d19d      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f893 	bl	8005aa8 <SPI_EndRxTxTransaction>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d006      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005994:	e010      	b.n	80059b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	e000      	b.n	80059b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3730      	adds	r7, #48	; 0x30
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e4:	e04c      	b.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d048      	beq.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059ee:	f7fe f99d 	bl	8003d2c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d902      	bls.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0x30>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d13d      	bne.n	8005a80 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1c:	d111      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a26:	d004      	beq.n	8005a32 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d107      	bne.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4a:	d10f      	bne.n	8005a6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e00f      	b.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d1a3      	bne.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <SPI_EndRxTxTransaction+0x7c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <SPI_EndRxTxTransaction+0x80>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0d5b      	lsrs	r3, r3, #21
 8005ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad2:	d112      	bne.n	8005afa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff ff78 	bl	80059d4 <SPI_WaitFlagStateUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e00f      	b.n	8005b1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d0f2      	beq.n	8005afa <SPI_EndRxTxTransaction+0x52>
 8005b14:	e000      	b.n	8005b18 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b16:	bf00      	nop
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000030 	.word	0x20000030
 8005b28:	165e9f81 	.word	0x165e9f81

08005b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e03f      	b.n	8005bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fd ffd6 	bl	8003b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2224      	movs	r2, #36	; 0x24
 8005b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb97 	bl	80062a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b088      	sub	sp, #32
 8005bca:	af02      	add	r7, sp, #8
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	f040 8083 	bne.w	8005cee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Transmit+0x2e>
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e07b      	b.n	8005cf0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Transmit+0x40>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e074      	b.n	8005cf0 <HAL_UART_Transmit+0x12a>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2221      	movs	r2, #33	; 0x21
 8005c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c1c:	f7fe f886 	bl	8003d2c <HAL_GetTick>
 8005c20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005c36:	e042      	b.n	8005cbe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d122      	bne.n	8005c96 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	2180      	movs	r1, #128	; 0x80
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f9b6 	bl	8005fcc <UART_WaitOnFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e042      	b.n	8005cf0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3302      	adds	r3, #2
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	e017      	b.n	8005cbe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	e013      	b.n	8005cbe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f993 	bl	8005fcc <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e01f      	b.n	8005cf0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	60ba      	str	r2, [r7, #8]
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1b7      	bne.n	8005c38 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2140      	movs	r1, #64	; 0x40
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f97a 	bl	8005fcc <UART_WaitOnFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e006      	b.n	8005cf0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e000      	b.n	8005cf0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005cee:	2302      	movs	r3, #2
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d140      	bne.n	8005d94 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_UART_Receive_IT+0x26>
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e039      	b.n	8005d96 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_UART_Receive_IT+0x38>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e032      	b.n	8005d96 <HAL_UART_Receive_IT+0x9e>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2222      	movs	r2, #34	; 0x22
 8005d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0220 	orr.w	r2, r2, #32
 8005d8e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e000      	b.n	8005d96 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10d      	bne.n	8005df6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_UART_IRQHandler+0x52>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f9d6 	bl	80061a0 <UART_Receive_IT>
      return;
 8005df4:	e0d0      	b.n	8005f98 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80b0 	beq.w	8005f5e <HAL_UART_IRQHandler+0x1ba>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d105      	bne.n	8005e14 <HAL_UART_IRQHandler+0x70>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80a5 	beq.w	8005f5e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_UART_IRQHandler+0x90>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2c:	f043 0201 	orr.w	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_UART_IRQHandler+0xb0>
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	f043 0202 	orr.w	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_UART_IRQHandler+0xd0>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	f043 0204 	orr.w	r2, r3, #4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00f      	beq.n	8005e9e <HAL_UART_IRQHandler+0xfa>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_UART_IRQHandler+0xee>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	f043 0208 	orr.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d077      	beq.n	8005f96 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x11c>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f970 	bl	80061a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	bf0c      	ite	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x144>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d031      	beq.n	8005f4c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f8b9 	bl	8006060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b40      	cmp	r3, #64	; 0x40
 8005efa:	d123      	bne.n	8005f44 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d013      	beq.n	8005f3c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_UART_IRQHandler+0x1fc>)
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe f8d3 	bl	80040cc <HAL_DMA_Abort_IT>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d016      	beq.n	8005f5a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f36:	4610      	mov	r0, r2
 8005f38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3a:	e00e      	b.n	8005f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f83b 	bl	8005fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f42:	e00a      	b.n	8005f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f837 	bl	8005fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4a:	e006      	b.n	8005f5a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f833 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f58:	e01d      	b.n	8005f96 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5a:	bf00      	nop
    return;
 8005f5c:	e01b      	b.n	8005f96 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1d6>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f8a6 	bl	80060c4 <UART_Transmit_IT>
    return;
 8005f78:	e00e      	b.n	8005f98 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <HAL_UART_IRQHandler+0x1f4>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8ee 	bl	8006170 <UART_EndTransmit_IT>
    return;
 8005f94:	e000      	b.n	8005f98 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005f96:	bf00      	nop
  }
}
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	0800609d 	.word	0x0800609d

08005fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fdc:	e02c      	b.n	8006038 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d028      	beq.n	8006038 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8005fec:	f7fd fe9e 	bl	8003d2c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d21d      	bcs.n	8006038 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800600a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e00f      	b.n	8006058 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	429a      	cmp	r2, r3
 8006054:	d0c3      	beq.n	8005fde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006076:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ff7e 	bl	8005fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b21      	cmp	r3, #33	; 0x21
 80060d6:	d144      	bne.n	8006162 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e0:	d11a      	bne.n	8006118 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d105      	bne.n	800610c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	621a      	str	r2, [r3, #32]
 800610a:	e00e      	b.n	800612a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]
 8006116:	e008      	b.n	800612a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	1c59      	adds	r1, r3, #1
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6211      	str	r1, [r2, #32]
 8006122:	781a      	ldrb	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29b      	uxth	r3, r3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4619      	mov	r1, r3
 8006138:	84d1      	strh	r1, [r2, #38]	; 0x26
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10f      	bne.n	800615e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800614c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006186:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff07 	bl	8005fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b22      	cmp	r3, #34	; 0x22
 80061b2:	d171      	bne.n	8006298 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d123      	bne.n	8006206 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10e      	bne.n	80061ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	1c9a      	adds	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
 80061e8:	e029      	b.n	800623e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28
 8006204:	e01b      	b.n	800623e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6858      	ldr	r0, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	1c59      	adds	r1, r3, #1
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6291      	str	r1, [r2, #40]	; 0x28
 800621e:	b2c2      	uxtb	r2, r0
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e00c      	b.n	800623e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	1c58      	adds	r0, r3, #1
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	6288      	str	r0, [r1, #40]	; 0x28
 8006236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4619      	mov	r1, r3
 800624c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800624e:	2b00      	cmp	r3, #0
 8006250:	d120      	bne.n	8006294 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0220 	bic.w	r2, r2, #32
 8006260:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695a      	ldr	r2, [r3, #20]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fd f8c4 	bl	8003418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e002      	b.n	800629a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	b0bd      	sub	sp, #244	; 0xf4
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	68d9      	ldr	r1, [r3, #12]
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	ea40 0301 	orr.w	r3, r0, r1
 80062cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	431a      	orrs	r2, r3
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062fc:	f021 010c 	bic.w	r1, r1, #12
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800630a:	430b      	orrs	r3, r1
 800630c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631e:	6999      	ldr	r1, [r3, #24]
 8006320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	ea40 0301 	orr.w	r3, r0, r1
 800632a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	f040 81a5 	bne.w	8006684 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4bcd      	ldr	r3, [pc, #820]	; (8006678 <UART_SetConfig+0x3d4>)
 8006342:	429a      	cmp	r2, r3
 8006344:	d006      	beq.n	8006354 <UART_SetConfig+0xb0>
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4bcb      	ldr	r3, [pc, #812]	; (800667c <UART_SetConfig+0x3d8>)
 800634e:	429a      	cmp	r2, r3
 8006350:	f040 80cb 	bne.w	80064ea <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006354:	f7fe fd02 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 8006358:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800635c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006360:	461c      	mov	r4, r3
 8006362:	f04f 0500 	mov.w	r5, #0
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	1891      	adds	r1, r2, r2
 800636c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006370:	415b      	adcs	r3, r3
 8006372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006376:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800637a:	1912      	adds	r2, r2, r4
 800637c:	eb45 0303 	adc.w	r3, r5, r3
 8006380:	f04f 0000 	mov.w	r0, #0
 8006384:	f04f 0100 	mov.w	r1, #0
 8006388:	00d9      	lsls	r1, r3, #3
 800638a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800638e:	00d0      	lsls	r0, r2, #3
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	1911      	adds	r1, r2, r4
 8006396:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800639a:	416b      	adcs	r3, r5
 800639c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	1891      	adds	r1, r2, r2
 80063ae:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80063b2:	415b      	adcs	r3, r3
 80063b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80063bc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80063c0:	f7fa fc2a 	bl	8000c18 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4bad      	ldr	r3, [pc, #692]	; (8006680 <UART_SetConfig+0x3dc>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011e      	lsls	r6, r3, #4
 80063d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063d6:	461c      	mov	r4, r3
 80063d8:	f04f 0500 	mov.w	r5, #0
 80063dc:	4622      	mov	r2, r4
 80063de:	462b      	mov	r3, r5
 80063e0:	1891      	adds	r1, r2, r2
 80063e2:	67b9      	str	r1, [r7, #120]	; 0x78
 80063e4:	415b      	adcs	r3, r3
 80063e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80063ec:	1912      	adds	r2, r2, r4
 80063ee:	eb45 0303 	adc.w	r3, r5, r3
 80063f2:	f04f 0000 	mov.w	r0, #0
 80063f6:	f04f 0100 	mov.w	r1, #0
 80063fa:	00d9      	lsls	r1, r3, #3
 80063fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006400:	00d0      	lsls	r0, r2, #3
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	1911      	adds	r1, r2, r4
 8006408:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800640c:	416b      	adcs	r3, r5
 800640e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	461a      	mov	r2, r3
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	1891      	adds	r1, r2, r2
 8006420:	6739      	str	r1, [r7, #112]	; 0x70
 8006422:	415b      	adcs	r3, r3
 8006424:	677b      	str	r3, [r7, #116]	; 0x74
 8006426:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800642a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800642e:	f7fa fbf3 	bl	8000c18 <__aeabi_uldivmod>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4b92      	ldr	r3, [pc, #584]	; (8006680 <UART_SetConfig+0x3dc>)
 8006438:	fba3 1302 	umull	r1, r3, r3, r2
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	2164      	movs	r1, #100	; 0x64
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	3332      	adds	r3, #50	; 0x32
 800644a:	4a8d      	ldr	r2, [pc, #564]	; (8006680 <UART_SetConfig+0x3dc>)
 800644c:	fba2 2303 	umull	r2, r3, r2, r3
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006458:	441e      	add	r6, r3
 800645a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800645e:	4618      	mov	r0, r3
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	1894      	adds	r4, r2, r2
 800646a:	66bc      	str	r4, [r7, #104]	; 0x68
 800646c:	415b      	adcs	r3, r3
 800646e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006470:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006474:	1812      	adds	r2, r2, r0
 8006476:	eb41 0303 	adc.w	r3, r1, r3
 800647a:	f04f 0400 	mov.w	r4, #0
 800647e:	f04f 0500 	mov.w	r5, #0
 8006482:	00dd      	lsls	r5, r3, #3
 8006484:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006488:	00d4      	lsls	r4, r2, #3
 800648a:	4622      	mov	r2, r4
 800648c:	462b      	mov	r3, r5
 800648e:	1814      	adds	r4, r2, r0
 8006490:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006494:	414b      	adcs	r3, r1
 8006496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	1891      	adds	r1, r2, r2
 80064a8:	6639      	str	r1, [r7, #96]	; 0x60
 80064aa:	415b      	adcs	r3, r3
 80064ac:	667b      	str	r3, [r7, #100]	; 0x64
 80064ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80064b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064b6:	f7fa fbaf 	bl	8000c18 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4b70      	ldr	r3, [pc, #448]	; (8006680 <UART_SetConfig+0x3dc>)
 80064c0:	fba3 1302 	umull	r1, r3, r3, r2
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	2164      	movs	r1, #100	; 0x64
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	3332      	adds	r3, #50	; 0x32
 80064d2:	4a6b      	ldr	r2, [pc, #428]	; (8006680 <UART_SetConfig+0x3dc>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	f003 0207 	and.w	r2, r3, #7
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4432      	add	r2, r6
 80064e6:	609a      	str	r2, [r3, #8]
 80064e8:	e26d      	b.n	80069c6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ea:	f7fe fc23 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 80064ee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f6:	461c      	mov	r4, r3
 80064f8:	f04f 0500 	mov.w	r5, #0
 80064fc:	4622      	mov	r2, r4
 80064fe:	462b      	mov	r3, r5
 8006500:	1891      	adds	r1, r2, r2
 8006502:	65b9      	str	r1, [r7, #88]	; 0x58
 8006504:	415b      	adcs	r3, r3
 8006506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006508:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800650c:	1912      	adds	r2, r2, r4
 800650e:	eb45 0303 	adc.w	r3, r5, r3
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	00d9      	lsls	r1, r3, #3
 800651c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006520:	00d0      	lsls	r0, r2, #3
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	1911      	adds	r1, r2, r4
 8006528:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800652c:	416b      	adcs	r3, r5
 800652e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	461a      	mov	r2, r3
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	1891      	adds	r1, r2, r2
 8006540:	6539      	str	r1, [r7, #80]	; 0x50
 8006542:	415b      	adcs	r3, r3
 8006544:	657b      	str	r3, [r7, #84]	; 0x54
 8006546:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800654a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800654e:	f7fa fb63 	bl	8000c18 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b4a      	ldr	r3, [pc, #296]	; (8006680 <UART_SetConfig+0x3dc>)
 8006558:	fba3 2302 	umull	r2, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	011e      	lsls	r6, r3, #4
 8006560:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006564:	461c      	mov	r4, r3
 8006566:	f04f 0500 	mov.w	r5, #0
 800656a:	4622      	mov	r2, r4
 800656c:	462b      	mov	r3, r5
 800656e:	1891      	adds	r1, r2, r2
 8006570:	64b9      	str	r1, [r7, #72]	; 0x48
 8006572:	415b      	adcs	r3, r3
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006576:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800657a:	1912      	adds	r2, r2, r4
 800657c:	eb45 0303 	adc.w	r3, r5, r3
 8006580:	f04f 0000 	mov.w	r0, #0
 8006584:	f04f 0100 	mov.w	r1, #0
 8006588:	00d9      	lsls	r1, r3, #3
 800658a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800658e:	00d0      	lsls	r0, r2, #3
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	1911      	adds	r1, r2, r4
 8006596:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800659a:	416b      	adcs	r3, r5
 800659c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	6439      	str	r1, [r7, #64]	; 0x40
 80065b0:	415b      	adcs	r3, r3
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80065bc:	f7fa fb2c 	bl	8000c18 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4b2e      	ldr	r3, [pc, #184]	; (8006680 <UART_SetConfig+0x3dc>)
 80065c6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	2164      	movs	r1, #100	; 0x64
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	3332      	adds	r3, #50	; 0x32
 80065d8:	4a29      	ldr	r2, [pc, #164]	; (8006680 <UART_SetConfig+0x3dc>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065e6:	441e      	add	r6, r3
 80065e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065ec:	4618      	mov	r0, r3
 80065ee:	f04f 0100 	mov.w	r1, #0
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	1894      	adds	r4, r2, r2
 80065f8:	63bc      	str	r4, [r7, #56]	; 0x38
 80065fa:	415b      	adcs	r3, r3
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006602:	1812      	adds	r2, r2, r0
 8006604:	eb41 0303 	adc.w	r3, r1, r3
 8006608:	f04f 0400 	mov.w	r4, #0
 800660c:	f04f 0500 	mov.w	r5, #0
 8006610:	00dd      	lsls	r5, r3, #3
 8006612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006616:	00d4      	lsls	r4, r2, #3
 8006618:	4622      	mov	r2, r4
 800661a:	462b      	mov	r3, r5
 800661c:	1814      	adds	r4, r2, r0
 800661e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006622:	414b      	adcs	r3, r1
 8006624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	1891      	adds	r1, r2, r2
 8006636:	6339      	str	r1, [r7, #48]	; 0x30
 8006638:	415b      	adcs	r3, r3
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006640:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006644:	f7fa fae8 	bl	8000c18 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <UART_SetConfig+0x3dc>)
 800664e:	fba3 1302 	umull	r1, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	2164      	movs	r1, #100	; 0x64
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	3332      	adds	r3, #50	; 0x32
 8006660:	4a07      	ldr	r2, [pc, #28]	; (8006680 <UART_SetConfig+0x3dc>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f003 0207 	and.w	r2, r3, #7
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4432      	add	r2, r6
 8006674:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006676:	e1a6      	b.n	80069c6 <UART_SetConfig+0x722>
 8006678:	40011000 	.word	0x40011000
 800667c:	40011400 	.word	0x40011400
 8006680:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4bd1      	ldr	r3, [pc, #836]	; (80069d0 <UART_SetConfig+0x72c>)
 800668c:	429a      	cmp	r2, r3
 800668e:	d006      	beq.n	800669e <UART_SetConfig+0x3fa>
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4bcf      	ldr	r3, [pc, #828]	; (80069d4 <UART_SetConfig+0x730>)
 8006698:	429a      	cmp	r2, r3
 800669a:	f040 80ca 	bne.w	8006832 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800669e:	f7fe fb5d 	bl	8004d5c <HAL_RCC_GetPCLK2Freq>
 80066a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066aa:	461c      	mov	r4, r3
 80066ac:	f04f 0500 	mov.w	r5, #0
 80066b0:	4622      	mov	r2, r4
 80066b2:	462b      	mov	r3, r5
 80066b4:	1891      	adds	r1, r2, r2
 80066b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80066b8:	415b      	adcs	r3, r3
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066c0:	1912      	adds	r2, r2, r4
 80066c2:	eb45 0303 	adc.w	r3, r5, r3
 80066c6:	f04f 0000 	mov.w	r0, #0
 80066ca:	f04f 0100 	mov.w	r1, #0
 80066ce:	00d9      	lsls	r1, r3, #3
 80066d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066d4:	00d0      	lsls	r0, r2, #3
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	eb12 0a04 	adds.w	sl, r2, r4
 80066de:	eb43 0b05 	adc.w	fp, r3, r5
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	008b      	lsls	r3, r1, #2
 80066f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066fc:	0082      	lsls	r2, r0, #2
 80066fe:	4650      	mov	r0, sl
 8006700:	4659      	mov	r1, fp
 8006702:	f7fa fa89 	bl	8000c18 <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4bb3      	ldr	r3, [pc, #716]	; (80069d8 <UART_SetConfig+0x734>)
 800670c:	fba3 2302 	umull	r2, r3, r3, r2
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	011e      	lsls	r6, r3, #4
 8006714:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006718:	4618      	mov	r0, r3
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	1894      	adds	r4, r2, r2
 8006724:	623c      	str	r4, [r7, #32]
 8006726:	415b      	adcs	r3, r3
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
 800672a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800672e:	1812      	adds	r2, r2, r0
 8006730:	eb41 0303 	adc.w	r3, r1, r3
 8006734:	f04f 0400 	mov.w	r4, #0
 8006738:	f04f 0500 	mov.w	r5, #0
 800673c:	00dd      	lsls	r5, r3, #3
 800673e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006742:	00d4      	lsls	r4, r2, #3
 8006744:	4622      	mov	r2, r4
 8006746:	462b      	mov	r3, r5
 8006748:	1814      	adds	r4, r2, r0
 800674a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800674e:	414b      	adcs	r3, r1
 8006750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	008b      	lsls	r3, r1, #2
 800676a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800676e:	0082      	lsls	r2, r0, #2
 8006770:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006774:	f7fa fa50 	bl	8000c18 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4b96      	ldr	r3, [pc, #600]	; (80069d8 <UART_SetConfig+0x734>)
 800677e:	fba3 1302 	umull	r1, r3, r3, r2
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	2164      	movs	r1, #100	; 0x64
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	3332      	adds	r3, #50	; 0x32
 8006790:	4a91      	ldr	r2, [pc, #580]	; (80069d8 <UART_SetConfig+0x734>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800679c:	441e      	add	r6, r3
 800679e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a2:	4618      	mov	r0, r3
 80067a4:	f04f 0100 	mov.w	r1, #0
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	1894      	adds	r4, r2, r2
 80067ae:	61bc      	str	r4, [r7, #24]
 80067b0:	415b      	adcs	r3, r3
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b8:	1812      	adds	r2, r2, r0
 80067ba:	eb41 0303 	adc.w	r3, r1, r3
 80067be:	f04f 0400 	mov.w	r4, #0
 80067c2:	f04f 0500 	mov.w	r5, #0
 80067c6:	00dd      	lsls	r5, r3, #3
 80067c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067cc:	00d4      	lsls	r4, r2, #3
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	1814      	adds	r4, r2, r0
 80067d4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80067d8:	414b      	adcs	r3, r1
 80067da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	008b      	lsls	r3, r1, #2
 80067f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067f8:	0082      	lsls	r2, r0, #2
 80067fa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80067fe:	f7fa fa0b 	bl	8000c18 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4b74      	ldr	r3, [pc, #464]	; (80069d8 <UART_SetConfig+0x734>)
 8006808:	fba3 1302 	umull	r1, r3, r3, r2
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	2164      	movs	r1, #100	; 0x64
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	3332      	adds	r3, #50	; 0x32
 800681a:	4a6f      	ldr	r2, [pc, #444]	; (80069d8 <UART_SetConfig+0x734>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4432      	add	r2, r6
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	e0c9      	b.n	80069c6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006832:	f7fe fa7f 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8006836:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800683a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800683e:	461c      	mov	r4, r3
 8006840:	f04f 0500 	mov.w	r5, #0
 8006844:	4622      	mov	r2, r4
 8006846:	462b      	mov	r3, r5
 8006848:	1891      	adds	r1, r2, r2
 800684a:	6139      	str	r1, [r7, #16]
 800684c:	415b      	adcs	r3, r3
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006854:	1912      	adds	r2, r2, r4
 8006856:	eb45 0303 	adc.w	r3, r5, r3
 800685a:	f04f 0000 	mov.w	r0, #0
 800685e:	f04f 0100 	mov.w	r1, #0
 8006862:	00d9      	lsls	r1, r3, #3
 8006864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006868:	00d0      	lsls	r0, r2, #3
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	eb12 0804 	adds.w	r8, r2, r4
 8006872:	eb43 0905 	adc.w	r9, r3, r5
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	f04f 0300 	mov.w	r3, #0
 800688a:	008b      	lsls	r3, r1, #2
 800688c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006890:	0082      	lsls	r2, r0, #2
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7fa f9bf 	bl	8000c18 <__aeabi_uldivmod>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4b4e      	ldr	r3, [pc, #312]	; (80069d8 <UART_SetConfig+0x734>)
 80068a0:	fba3 2302 	umull	r2, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	011e      	lsls	r6, r3, #4
 80068a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068ac:	4618      	mov	r0, r3
 80068ae:	f04f 0100 	mov.w	r1, #0
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	1894      	adds	r4, r2, r2
 80068b8:	60bc      	str	r4, [r7, #8]
 80068ba:	415b      	adcs	r3, r3
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c2:	1812      	adds	r2, r2, r0
 80068c4:	eb41 0303 	adc.w	r3, r1, r3
 80068c8:	f04f 0400 	mov.w	r4, #0
 80068cc:	f04f 0500 	mov.w	r5, #0
 80068d0:	00dd      	lsls	r5, r3, #3
 80068d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068d6:	00d4      	lsls	r4, r2, #3
 80068d8:	4622      	mov	r2, r4
 80068da:	462b      	mov	r3, r5
 80068dc:	1814      	adds	r4, r2, r0
 80068de:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80068e2:	414b      	adcs	r3, r1
 80068e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f04f 0100 	mov.w	r1, #0
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	008b      	lsls	r3, r1, #2
 80068fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006902:	0082      	lsls	r2, r0, #2
 8006904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006908:	f7fa f986 	bl	8000c18 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <UART_SetConfig+0x734>)
 8006912:	fba3 1302 	umull	r1, r3, r3, r2
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2164      	movs	r1, #100	; 0x64
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	3332      	adds	r3, #50	; 0x32
 8006924:	4a2c      	ldr	r2, [pc, #176]	; (80069d8 <UART_SetConfig+0x734>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006930:	441e      	add	r6, r3
 8006932:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006936:	4618      	mov	r0, r3
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	1894      	adds	r4, r2, r2
 8006942:	603c      	str	r4, [r7, #0]
 8006944:	415b      	adcs	r3, r3
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694c:	1812      	adds	r2, r2, r0
 800694e:	eb41 0303 	adc.w	r3, r1, r3
 8006952:	f04f 0400 	mov.w	r4, #0
 8006956:	f04f 0500 	mov.w	r5, #0
 800695a:	00dd      	lsls	r5, r3, #3
 800695c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006960:	00d4      	lsls	r4, r2, #3
 8006962:	4622      	mov	r2, r4
 8006964:	462b      	mov	r3, r5
 8006966:	1814      	adds	r4, r2, r0
 8006968:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800696c:	414b      	adcs	r3, r1
 800696e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	f04f 0100 	mov.w	r1, #0
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	008b      	lsls	r3, r1, #2
 8006988:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800698c:	0082      	lsls	r2, r0, #2
 800698e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006992:	f7fa f941 	bl	8000c18 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <UART_SetConfig+0x734>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	; 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <UART_SetConfig+0x734>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 020f 	and.w	r2, r3, #15
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4432      	add	r2, r6
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	e7ff      	b.n	80069c6 <UART_SetConfig+0x722>
 80069c6:	bf00      	nop
 80069c8:	37f4      	adds	r7, #244	; 0xf4
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	40011000 	.word	0x40011000
 80069d4:	40011400 	.word	0x40011400
 80069d8:	51eb851f 	.word	0x51eb851f

080069dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069e0:	4904      	ldr	r1, [pc, #16]	; (80069f4 <MX_FATFS_Init+0x18>)
 80069e2:	4805      	ldr	r0, [pc, #20]	; (80069f8 <MX_FATFS_Init+0x1c>)
 80069e4:	f003 f988 	bl	8009cf8 <FATFS_LinkDriver>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <MX_FATFS_Init+0x20>)
 80069ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069f0:	bf00      	nop
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000bdc 	.word	0x20000bdc
 80069f8:	2000003c 	.word	0x2000003c
 80069fc:	20000be0 	.word	0x20000be0

08006a00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f9d9 	bl	8006dd4 <USER_SPI_initialize>
 8006a22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fab3 	bl	8006fa4 <USER_SPI_status>
 8006a3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006a58:	7bf8      	ldrb	r0, [r7, #15]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	f000 fab6 	bl	8006fd0 <USER_SPI_read>
 8006a64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006a7e:	7bf8      	ldrb	r0, [r7, #15]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	f000 fb09 	bl	800709c <USER_SPI_write>
 8006a8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	603a      	str	r2, [r7, #0]
 8006a9e:	71fb      	strb	r3, [r7, #7]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006aa4:	79b9      	ldrb	r1, [r7, #6]
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fb72 	bl	8007194 <USER_SPI_ioctl>
 8006ab0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006ac4:	f7fd f932 	bl	8003d2c <HAL_GetTick>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	4a04      	ldr	r2, [pc, #16]	; (8006adc <SPI_Timer_On+0x20>)
 8006acc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <SPI_Timer_On+0x24>)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20001044 	.word	0x20001044
 8006ae0:	20001048 	.word	0x20001048

08006ae4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006ae8:	f7fd f920 	bl	8003d2c <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <SPI_Timer_Status+0x24>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <SPI_Timer_Status+0x28>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	bf34      	ite	cc
 8006afc:	2301      	movcc	r3, #1
 8006afe:	2300      	movcs	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20001044 	.word	0x20001044
 8006b0c:	20001048 	.word	0x20001048

08006b10 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	4603      	mov	r3, r0
 8006b18:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 50);
 8006b1a:	f107 020f 	add.w	r2, r7, #15
 8006b1e:	1df9      	adds	r1, r7, #7
 8006b20:	2332      	movs	r3, #50	; 0x32
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2301      	movs	r3, #1
 8006b26:	4804      	ldr	r0, [pc, #16]	; (8006b38 <xchg_spi+0x28>)
 8006b28:	f7fe fdb2 	bl	8005690 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000a50 	.word	0x20000a50

08006b3c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	e00a      	b.n	8006b62 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	18d4      	adds	r4, r2, r3
 8006b52:	20ff      	movs	r0, #255	; 0xff
 8006b54:	f7ff ffdc 	bl	8006b10 <xchg_spi>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d3f0      	bcc.n	8006b4c <rcvr_spi_multi+0x10>
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}

08006b74 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e009      	b.n	8006b98 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff ffbf 	bl	8006b10 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d3f1      	bcc.n	8006b84 <xmit_spi_multi+0x10>
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006bb2:	f7fd f8bb 	bl	8003d2c <HAL_GetTick>
 8006bb6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006bbc:	20ff      	movs	r0, #255	; 0xff
 8006bbe:	f7ff ffa7 	bl	8006b10 <xchg_spi>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2bff      	cmp	r3, #255	; 0xff
 8006bca:	d007      	beq.n	8006bdc <wait_ready+0x32>
 8006bcc:	f7fd f8ae 	bl	8003d2c <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d8ef      	bhi.n	8006bbc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2bff      	cmp	r3, #255	; 0xff
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2102      	movs	r1, #2
 8006bf8:	4803      	ldr	r0, [pc, #12]	; (8006c08 <despiselect+0x18>)
 8006bfa:	f7fd fc25 	bl	8004448 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006bfe:	20ff      	movs	r0, #255	; 0xff
 8006c00:	f7ff ff86 	bl	8006b10 <xchg_spi>

}
 8006c04:	bf00      	nop
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40020400 	.word	0x40020400

08006c0c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006c10:	2200      	movs	r2, #0
 8006c12:	2102      	movs	r1, #2
 8006c14:	4809      	ldr	r0, [pc, #36]	; (8006c3c <spiselect+0x30>)
 8006c16:	f7fd fc17 	bl	8004448 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006c1a:	20ff      	movs	r0, #255	; 0xff
 8006c1c:	f7ff ff78 	bl	8006b10 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c24:	f7ff ffc1 	bl	8006baa <wait_ready>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <spiselect+0x26>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e002      	b.n	8006c38 <spiselect+0x2c>

	despiselect();
 8006c32:	f7ff ffdd 	bl	8006bf0 <despiselect>
	return 0;	/* Timeout */
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40020400 	.word	0x40020400

08006c40 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006c4a:	20c8      	movs	r0, #200	; 0xc8
 8006c4c:	f7ff ff36 	bl	8006abc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006c50:	20ff      	movs	r0, #255	; 0xff
 8006c52:	f7ff ff5d 	bl	8006b10 <xchg_spi>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2bff      	cmp	r3, #255	; 0xff
 8006c5e:	d104      	bne.n	8006c6a <rcvr_datablock+0x2a>
 8006c60:	f7ff ff40 	bl	8006ae4 <SPI_Timer_Status>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f2      	bne.n	8006c50 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2bfe      	cmp	r3, #254	; 0xfe
 8006c6e:	d001      	beq.n	8006c74 <rcvr_datablock+0x34>
 8006c70:	2300      	movs	r3, #0
 8006c72:	e00a      	b.n	8006c8a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff ff60 	bl	8006b3c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006c7c:	20ff      	movs	r0, #255	; 0xff
 8006c7e:	f7ff ff47 	bl	8006b10 <xchg_spi>
 8006c82:	20ff      	movs	r0, #255	; 0xff
 8006c84:	f7ff ff44 	bl	8006b10 <xchg_spi>

	return 1;						/* Function succeeded */
 8006c88:	2301      	movs	r3, #1
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ca2:	f7ff ff82 	bl	8006baa <wait_ready>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <xmit_datablock+0x1e>
 8006cac:	2300      	movs	r3, #0
 8006cae:	e01e      	b.n	8006cee <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff ff2c 	bl	8006b10 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2bfd      	cmp	r3, #253	; 0xfd
 8006cbc:	d016      	beq.n	8006cec <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff ff56 	bl	8006b74 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006cc8:	20ff      	movs	r0, #255	; 0xff
 8006cca:	f7ff ff21 	bl	8006b10 <xchg_spi>
 8006cce:	20ff      	movs	r0, #255	; 0xff
 8006cd0:	f7ff ff1e 	bl	8006b10 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006cd4:	20ff      	movs	r0, #255	; 0xff
 8006cd6:	f7ff ff1b 	bl	8006b10 <xchg_spi>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d001      	beq.n	8006cec <xmit_datablock+0x5a>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e000      	b.n	8006cee <xmit_datablock+0x5c>
	}
	return 1;
 8006cec:	2301      	movs	r3, #1
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	6039      	str	r1, [r7, #0]
 8006d00:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da0e      	bge.n	8006d28 <send_cmd+0x32>
		cmd &= 0x7F;
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006d12:	2100      	movs	r1, #0
 8006d14:	2037      	movs	r0, #55	; 0x37
 8006d16:	f7ff ffee 	bl	8006cf6 <send_cmd>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d901      	bls.n	8006d28 <send_cmd+0x32>
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	e051      	b.n	8006dcc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b0c      	cmp	r3, #12
 8006d2c:	d008      	beq.n	8006d40 <send_cmd+0x4a>
		despiselect();
 8006d2e:	f7ff ff5f 	bl	8006bf0 <despiselect>
		if (!spiselect()) return 0xFF;
 8006d32:	f7ff ff6b 	bl	8006c0c <spiselect>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <send_cmd+0x4a>
 8006d3c:	23ff      	movs	r3, #255	; 0xff
 8006d3e:	e045      	b.n	8006dcc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fee1 	bl	8006b10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	0e1b      	lsrs	r3, r3, #24
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fedb 	bl	8006b10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	0c1b      	lsrs	r3, r3, #16
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fed5 	bl	8006b10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fecf 	bl	8006b10 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff feca 	bl	8006b10 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <send_cmd+0x94>
 8006d86:	2395      	movs	r3, #149	; 0x95
 8006d88:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d101      	bne.n	8006d94 <send_cmd+0x9e>
 8006d90:	2387      	movs	r3, #135	; 0x87
 8006d92:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff feba 	bl	8006b10 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d102      	bne.n	8006da8 <send_cmd+0xb2>
 8006da2:	20ff      	movs	r0, #255	; 0xff
 8006da4:	f7ff feb4 	bl	8006b10 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006da8:	230a      	movs	r3, #10
 8006daa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006dac:	20ff      	movs	r0, #255	; 0xff
 8006dae:	f7ff feaf 	bl	8006b10 <xchg_spi>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	da05      	bge.n	8006dca <send_cmd+0xd4>
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f0      	bne.n	8006dac <send_cmd+0xb6>

	return res;							/* Return received response */
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006dd4:	b590      	push	{r4, r7, lr}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <USER_SPI_initialize+0x14>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0d2      	b.n	8006f8e <USER_SPI_initialize+0x1ba>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006de8:	4b6b      	ldr	r3, [pc, #428]	; (8006f98 <USER_SPI_initialize+0x1c4>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <USER_SPI_initialize+0x2a>
 8006df6:	4b68      	ldr	r3, [pc, #416]	; (8006f98 <USER_SPI_initialize+0x1c4>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	e0c7      	b.n	8006f8e <USER_SPI_initialize+0x1ba>

	FCLK_SLOW();
 8006dfe:	4b67      	ldr	r3, [pc, #412]	; (8006f9c <USER_SPI_initialize+0x1c8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	4b65      	ldr	r3, [pc, #404]	; (8006f9c <USER_SPI_initialize+0x1c8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006e0c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006e0e:	230a      	movs	r3, #10
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e005      	b.n	8006e20 <USER_SPI_initialize+0x4c>
 8006e14:	20ff      	movs	r0, #255	; 0xff
 8006e16:	f7ff fe7b 	bl	8006b10 <xchg_spi>
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f6      	bne.n	8006e14 <USER_SPI_initialize+0x40>

	ty = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7ff ff62 	bl	8006cf6 <send_cmd>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 808b 	bne.w	8006f50 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e3e:	f7ff fe3d 	bl	8006abc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006e42:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e46:	2008      	movs	r0, #8
 8006e48:	f7ff ff55 	bl	8006cf6 <send_cmd>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d151      	bne.n	8006ef6 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
 8006e56:	e00d      	b.n	8006e74 <USER_SPI_initialize+0xa0>
 8006e58:	7bfc      	ldrb	r4, [r7, #15]
 8006e5a:	20ff      	movs	r0, #255	; 0xff
 8006e5c:	f7ff fe58 	bl	8006b10 <xchg_spi>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	f107 0310 	add.w	r3, r7, #16
 8006e68:	4423      	add	r3, r4
 8006e6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	3301      	adds	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d9ee      	bls.n	8006e58 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006e7a:	7abb      	ldrb	r3, [r7, #10]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d167      	bne.n	8006f50 <USER_SPI_initialize+0x17c>
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2baa      	cmp	r3, #170	; 0xaa
 8006e84:	d164      	bne.n	8006f50 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006e86:	bf00      	nop
 8006e88:	f7ff fe2c 	bl	8006ae4 <SPI_Timer_Status>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <USER_SPI_initialize+0xce>
 8006e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e96:	20a9      	movs	r0, #169	; 0xa9
 8006e98:	f7ff ff2d 	bl	8006cf6 <send_cmd>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f2      	bne.n	8006e88 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006ea2:	f7ff fe1f 	bl	8006ae4 <SPI_Timer_Status>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d051      	beq.n	8006f50 <USER_SPI_initialize+0x17c>
 8006eac:	2100      	movs	r1, #0
 8006eae:	203a      	movs	r0, #58	; 0x3a
 8006eb0:	f7ff ff21 	bl	8006cf6 <send_cmd>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d14a      	bne.n	8006f50 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
 8006ebe:	e00d      	b.n	8006edc <USER_SPI_initialize+0x108>
 8006ec0:	7bfc      	ldrb	r4, [r7, #15]
 8006ec2:	20ff      	movs	r0, #255	; 0xff
 8006ec4:	f7ff fe24 	bl	8006b10 <xchg_spi>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f107 0310 	add.w	r3, r7, #16
 8006ed0:	4423      	add	r3, r4
 8006ed2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d9ee      	bls.n	8006ec0 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006ee2:	7a3b      	ldrb	r3, [r7, #8]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USER_SPI_initialize+0x11c>
 8006eec:	230c      	movs	r3, #12
 8006eee:	e000      	b.n	8006ef2 <USER_SPI_initialize+0x11e>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	737b      	strb	r3, [r7, #13]
 8006ef4:	e02c      	b.n	8006f50 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	20a9      	movs	r0, #169	; 0xa9
 8006efa:	f7ff fefc 	bl	8006cf6 <send_cmd>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d804      	bhi.n	8006f0e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006f04:	2302      	movs	r3, #2
 8006f06:	737b      	strb	r3, [r7, #13]
 8006f08:	23a9      	movs	r3, #169	; 0xa9
 8006f0a:	73bb      	strb	r3, [r7, #14]
 8006f0c:	e003      	b.n	8006f16 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006f0e:	2301      	movs	r3, #1
 8006f10:	737b      	strb	r3, [r7, #13]
 8006f12:	2301      	movs	r3, #1
 8006f14:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006f16:	bf00      	nop
 8006f18:	f7ff fde4 	bl	8006ae4 <SPI_Timer_Status>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <USER_SPI_initialize+0x15e>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fee5 	bl	8006cf6 <send_cmd>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f2      	bne.n	8006f18 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006f32:	f7ff fdd7 	bl	8006ae4 <SPI_Timer_Status>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <USER_SPI_initialize+0x178>
 8006f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f40:	2010      	movs	r0, #16
 8006f42:	f7ff fed8 	bl	8006cf6 <send_cmd>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <USER_SPI_initialize+0x17c>
				ty = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 8006f50:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <USER_SPI_initialize+0x1cc>)
 8006f52:	7b7b      	ldrb	r3, [r7, #13]
 8006f54:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006f56:	f7ff fe4b 	bl	8006bf0 <despiselect>

	if (ty) {			/* OK */
 8006f5a:	7b7b      	ldrb	r3, [r7, #13]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <USER_SPI_initialize+0x1ae>
		FCLK_FAST();			/* Set fast clock */
 8006f60:	4b0e      	ldr	r3, [pc, #56]	; (8006f9c <USER_SPI_initialize+0x1c8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <USER_SPI_initialize+0x1c8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006f6e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006f70:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <USER_SPI_initialize+0x1c4>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <USER_SPI_initialize+0x1c4>)
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e002      	b.n	8006f88 <USER_SPI_initialize+0x1b4>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <USER_SPI_initialize+0x1c4>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006f88:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <USER_SPI_initialize+0x1c4>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b2db      	uxtb	r3, r3
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd90      	pop	{r4, r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000050 	.word	0x20000050
 8006f9c:	20000a50 	.word	0x20000a50
 8006fa0:	20000278 	.word	0x20000278

08006fa4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <USER_SPI_status+0x14>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e002      	b.n	8006fbe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <USER_SPI_status+0x28>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b2db      	uxtb	r3, r3
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000050 	.word	0x20000050

08006fd0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <USER_SPI_read+0x1c>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USER_SPI_read+0x20>
 8006fec:	2304      	movs	r3, #4
 8006fee:	e04d      	b.n	800708c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ff0:	4b28      	ldr	r3, [pc, #160]	; (8007094 <USER_SPI_read+0xc4>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <USER_SPI_read+0x32>
 8006ffe:	2303      	movs	r3, #3
 8007000:	e044      	b.n	800708c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007002:	4b25      	ldr	r3, [pc, #148]	; (8007098 <USER_SPI_read+0xc8>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <USER_SPI_read+0x44>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	025b      	lsls	r3, r3, #9
 8007012:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d111      	bne.n	800703e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	2011      	movs	r0, #17
 800701e:	f7ff fe6a 	bl	8006cf6 <send_cmd>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d129      	bne.n	800707c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800702c:	68b8      	ldr	r0, [r7, #8]
 800702e:	f7ff fe07 	bl	8006c40 <rcvr_datablock>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d021      	beq.n	800707c <USER_SPI_read+0xac>
			count = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	e01e      	b.n	800707c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	2012      	movs	r0, #18
 8007042:	f7ff fe58 	bl	8006cf6 <send_cmd>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d117      	bne.n	800707c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800704c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007050:	68b8      	ldr	r0, [r7, #8]
 8007052:	f7ff fdf5 	bl	8006c40 <rcvr_datablock>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <USER_SPI_read+0xa2>
				buff += 512;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007062:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	3b01      	subs	r3, #1
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ed      	bne.n	800704c <USER_SPI_read+0x7c>
 8007070:	e000      	b.n	8007074 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007072:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007074:	2100      	movs	r1, #0
 8007076:	200c      	movs	r0, #12
 8007078:	f7ff fe3d 	bl	8006cf6 <send_cmd>
		}
	}
	despiselect();
 800707c:	f7ff fdb8 	bl	8006bf0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000050 	.word	0x20000050
 8007098:	20000278 	.word	0x20000278

0800709c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <USER_SPI_write+0x1c>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <USER_SPI_write+0x20>
 80070b8:	2304      	movs	r3, #4
 80070ba:	e063      	b.n	8007184 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80070bc:	4b33      	ldr	r3, [pc, #204]	; (800718c <USER_SPI_write+0xf0>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <USER_SPI_write+0x32>
 80070ca:	2303      	movs	r3, #3
 80070cc:	e05a      	b.n	8007184 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80070ce:	4b2f      	ldr	r3, [pc, #188]	; (800718c <USER_SPI_write+0xf0>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <USER_SPI_write+0x44>
 80070dc:	2302      	movs	r3, #2
 80070de:	e051      	b.n	8007184 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80070e0:	4b2b      	ldr	r3, [pc, #172]	; (8007190 <USER_SPI_write+0xf4>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <USER_SPI_write+0x56>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	025b      	lsls	r3, r3, #9
 80070f0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d110      	bne.n	800711a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	2018      	movs	r0, #24
 80070fc:	f7ff fdfb 	bl	8006cf6 <send_cmd>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d136      	bne.n	8007174 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007106:	21fe      	movs	r1, #254	; 0xfe
 8007108:	68b8      	ldr	r0, [r7, #8]
 800710a:	f7ff fdc2 	bl	8006c92 <xmit_datablock>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02f      	beq.n	8007174 <USER_SPI_write+0xd8>
			count = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	e02c      	b.n	8007174 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800711a:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <USER_SPI_write+0xf4>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	f003 0306 	and.w	r3, r3, #6
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <USER_SPI_write+0x92>
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	2097      	movs	r0, #151	; 0x97
 800712a:	f7ff fde4 	bl	8006cf6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	2019      	movs	r0, #25
 8007132:	f7ff fde0 	bl	8006cf6 <send_cmd>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d11b      	bne.n	8007174 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800713c:	21fc      	movs	r1, #252	; 0xfc
 800713e:	68b8      	ldr	r0, [r7, #8]
 8007140:	f7ff fda7 	bl	8006c92 <xmit_datablock>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <USER_SPI_write+0xc4>
				buff += 512;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007150:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	3b01      	subs	r3, #1
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1ee      	bne.n	800713c <USER_SPI_write+0xa0>
 800715e:	e000      	b.n	8007162 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007160:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007162:	21fd      	movs	r1, #253	; 0xfd
 8007164:	2000      	movs	r0, #0
 8007166:	f7ff fd94 	bl	8006c92 <xmit_datablock>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <USER_SPI_write+0xd8>
 8007170:	2301      	movs	r3, #1
 8007172:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007174:	f7ff fd3c 	bl	8006bf0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	bf14      	ite	ne
 800717e:	2301      	movne	r3, #1
 8007180:	2300      	moveq	r3, #0
 8007182:	b2db      	uxtb	r3, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000050 	.word	0x20000050
 8007190:	20000278 	.word	0x20000278

08007194 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08c      	sub	sp, #48	; 0x30
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	603a      	str	r2, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
 80071a0:	460b      	mov	r3, r1
 80071a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <USER_SPI_ioctl+0x1a>
 80071aa:	2304      	movs	r3, #4
 80071ac:	e15a      	b.n	8007464 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80071ae:	4baf      	ldr	r3, [pc, #700]	; (800746c <USER_SPI_ioctl+0x2d8>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USER_SPI_ioctl+0x2c>
 80071bc:	2303      	movs	r3, #3
 80071be:	e151      	b.n	8007464 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80071c6:	79bb      	ldrb	r3, [r7, #6]
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	f200 8136 	bhi.w	800743a <USER_SPI_ioctl+0x2a6>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <USER_SPI_ioctl+0x40>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071e9 	.word	0x080071e9
 80071d8:	080071fd 	.word	0x080071fd
 80071dc:	0800743b 	.word	0x0800743b
 80071e0:	080072a9 	.word	0x080072a9
 80071e4:	0800739f 	.word	0x0800739f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80071e8:	f7ff fd10 	bl	8006c0c <spiselect>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8127 	beq.w	8007442 <USER_SPI_ioctl+0x2ae>
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80071fa:	e122      	b.n	8007442 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80071fc:	2100      	movs	r1, #0
 80071fe:	2009      	movs	r0, #9
 8007200:	f7ff fd79 	bl	8006cf6 <send_cmd>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 811d 	bne.w	8007446 <USER_SPI_ioctl+0x2b2>
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	2110      	movs	r1, #16
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff fd14 	bl	8006c40 <rcvr_datablock>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8113 	beq.w	8007446 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007220:	7b3b      	ldrb	r3, [r7, #12]
 8007222:	099b      	lsrs	r3, r3, #6
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	d111      	bne.n	800724e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800722a:	7d7b      	ldrb	r3, [r7, #21]
 800722c:	461a      	mov	r2, r3
 800722e:	7d3b      	ldrb	r3, [r7, #20]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	4413      	add	r3, r2
 8007234:	461a      	mov	r2, r3
 8007236:	7cfb      	ldrb	r3, [r7, #19]
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800723e:	4413      	add	r3, r2
 8007240:	3301      	adds	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	029a      	lsls	r2, r3, #10
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e028      	b.n	80072a0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800724e:	7c7b      	ldrb	r3, [r7, #17]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	b2da      	uxtb	r2, r3
 8007256:	7dbb      	ldrb	r3, [r7, #22]
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	b2db      	uxtb	r3, r3
 800725c:	4413      	add	r3, r2
 800725e:	b2da      	uxtb	r2, r3
 8007260:	7d7b      	ldrb	r3, [r7, #21]
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0306 	and.w	r3, r3, #6
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4413      	add	r3, r2
 800726e:	b2db      	uxtb	r3, r3
 8007270:	3302      	adds	r3, #2
 8007272:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007276:	7d3b      	ldrb	r3, [r7, #20]
 8007278:	099b      	lsrs	r3, r3, #6
 800727a:	b2db      	uxtb	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	7cfb      	ldrb	r3, [r7, #19]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	441a      	add	r2, r3
 8007284:	7cbb      	ldrb	r3, [r7, #18]
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800728c:	4413      	add	r3, r2
 800728e:	3301      	adds	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007292:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007296:	3b09      	subs	r3, #9
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	409a      	lsls	r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80072a6:	e0ce      	b.n	8007446 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80072a8:	4b71      	ldr	r3, [pc, #452]	; (8007470 <USER_SPI_ioctl+0x2dc>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d031      	beq.n	8007318 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80072b4:	2100      	movs	r1, #0
 80072b6:	208d      	movs	r0, #141	; 0x8d
 80072b8:	f7ff fd1d 	bl	8006cf6 <send_cmd>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 80c3 	bne.w	800744a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80072c4:	20ff      	movs	r0, #255	; 0xff
 80072c6:	f7ff fc23 	bl	8006b10 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80072ca:	f107 030c 	add.w	r3, r7, #12
 80072ce:	2110      	movs	r1, #16
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fcb5 	bl	8006c40 <rcvr_datablock>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 80b6 	beq.w	800744a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80072de:	2330      	movs	r3, #48	; 0x30
 80072e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80072e4:	e007      	b.n	80072f6 <USER_SPI_ioctl+0x162>
 80072e6:	20ff      	movs	r0, #255	; 0xff
 80072e8:	f7ff fc12 	bl	8006b10 <xchg_spi>
 80072ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072f0:	3b01      	subs	r3, #1
 80072f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80072f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f3      	bne.n	80072e6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80072fe:	7dbb      	ldrb	r3, [r7, #22]
 8007300:	091b      	lsrs	r3, r3, #4
 8007302:	b2db      	uxtb	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	2310      	movs	r3, #16
 8007308:	fa03 f202 	lsl.w	r2, r3, r2
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007316:	e098      	b.n	800744a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007318:	2100      	movs	r1, #0
 800731a:	2009      	movs	r0, #9
 800731c:	f7ff fceb 	bl	8006cf6 <send_cmd>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	f040 8091 	bne.w	800744a <USER_SPI_ioctl+0x2b6>
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	2110      	movs	r1, #16
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fc86 	bl	8006c40 <rcvr_datablock>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8087 	beq.w	800744a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800733c:	4b4c      	ldr	r3, [pc, #304]	; (8007470 <USER_SPI_ioctl+0x2dc>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d012      	beq.n	800736e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007348:	7dbb      	ldrb	r3, [r7, #22]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007350:	7dfa      	ldrb	r2, [r7, #23]
 8007352:	09d2      	lsrs	r2, r2, #7
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	4413      	add	r3, r2
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	7e7b      	ldrb	r3, [r7, #25]
 800735c:	099b      	lsrs	r3, r3, #6
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	fa02 f303 	lsl.w	r3, r2, r3
 8007366:	461a      	mov	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	e013      	b.n	8007396 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800736e:	7dbb      	ldrb	r3, [r7, #22]
 8007370:	109b      	asrs	r3, r3, #2
 8007372:	b29b      	uxth	r3, r3
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	3301      	adds	r3, #1
 800737a:	7dfa      	ldrb	r2, [r7, #23]
 800737c:	00d2      	lsls	r2, r2, #3
 800737e:	f002 0218 	and.w	r2, r2, #24
 8007382:	7df9      	ldrb	r1, [r7, #23]
 8007384:	0949      	lsrs	r1, r1, #5
 8007386:	b2c9      	uxtb	r1, r1
 8007388:	440a      	add	r2, r1
 800738a:	3201      	adds	r2, #1
 800738c:	fb02 f303 	mul.w	r3, r2, r3
 8007390:	461a      	mov	r2, r3
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800739c:	e055      	b.n	800744a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800739e:	4b34      	ldr	r3, [pc, #208]	; (8007470 <USER_SPI_ioctl+0x2dc>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	f003 0306 	and.w	r3, r3, #6
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d051      	beq.n	800744e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80073aa:	f107 020c 	add.w	r2, r7, #12
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	210b      	movs	r1, #11
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff feee 	bl	8007194 <USER_SPI_ioctl>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d149      	bne.n	8007452 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80073be:	7b3b      	ldrb	r3, [r7, #12]
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <USER_SPI_ioctl+0x23e>
 80073c8:	7dbb      	ldrb	r3, [r7, #22]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d041      	beq.n	8007456 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	623b      	str	r3, [r7, #32]
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80073e2:	4b23      	ldr	r3, [pc, #140]	; (8007470 <USER_SPI_ioctl+0x2dc>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	025b      	lsls	r3, r3, #9
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	025b      	lsls	r3, r3, #9
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80073fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073fc:	2020      	movs	r0, #32
 80073fe:	f7ff fc7a 	bl	8006cf6 <send_cmd>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d128      	bne.n	800745a <USER_SPI_ioctl+0x2c6>
 8007408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800740a:	2021      	movs	r0, #33	; 0x21
 800740c:	f7ff fc73 	bl	8006cf6 <send_cmd>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d121      	bne.n	800745a <USER_SPI_ioctl+0x2c6>
 8007416:	2100      	movs	r1, #0
 8007418:	2026      	movs	r0, #38	; 0x26
 800741a:	f7ff fc6c 	bl	8006cf6 <send_cmd>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11a      	bne.n	800745a <USER_SPI_ioctl+0x2c6>
 8007424:	f247 5030 	movw	r0, #30000	; 0x7530
 8007428:	f7ff fbbf 	bl	8006baa <wait_ready>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d013      	beq.n	800745a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007432:	2300      	movs	r3, #0
 8007434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007438:	e00f      	b.n	800745a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800743a:	2304      	movs	r3, #4
 800743c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007440:	e00c      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		break;
 8007442:	bf00      	nop
 8007444:	e00a      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		break;
 8007446:	bf00      	nop
 8007448:	e008      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		break;
 800744a:	bf00      	nop
 800744c:	e006      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800744e:	bf00      	nop
 8007450:	e004      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007452:	bf00      	nop
 8007454:	e002      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007456:	bf00      	nop
 8007458:	e000      	b.n	800745c <USER_SPI_ioctl+0x2c8>
		break;
 800745a:	bf00      	nop
	}

	despiselect();
 800745c:	f7ff fbc8 	bl	8006bf0 <despiselect>

	return res;
 8007460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007464:	4618      	mov	r0, r3
 8007466:	3730      	adds	r7, #48	; 0x30
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000050 	.word	0x20000050
 8007470:	20000278 	.word	0x20000278

08007474 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <disk_status+0x30>)
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	79fa      	ldrb	r2, [r7, #7]
 800748c:	4905      	ldr	r1, [pc, #20]	; (80074a4 <disk_status+0x30>)
 800748e:	440a      	add	r2, r1
 8007490:	7a12      	ldrb	r2, [r2, #8]
 8007492:	4610      	mov	r0, r2
 8007494:	4798      	blx	r3
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
  return stat;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200002a4 	.word	0x200002a4

080074a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <disk_initialize+0x48>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d111      	bne.n	80074e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	4a0b      	ldr	r2, [pc, #44]	; (80074f0 <disk_initialize+0x48>)
 80074c4:	2101      	movs	r1, #1
 80074c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <disk_initialize+0x48>)
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	79fa      	ldrb	r2, [r7, #7]
 80074d6:	4906      	ldr	r1, [pc, #24]	; (80074f0 <disk_initialize+0x48>)
 80074d8:	440a      	add	r2, r1
 80074da:	7a12      	ldrb	r2, [r2, #8]
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200002a4 	.word	0x200002a4

080074f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	4a0a      	ldr	r2, [pc, #40]	; (8007530 <disk_read+0x3c>)
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	689c      	ldr	r4, [r3, #8]
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	4a07      	ldr	r2, [pc, #28]	; (8007530 <disk_read+0x3c>)
 8007514:	4413      	add	r3, r2
 8007516:	7a18      	ldrb	r0, [r3, #8]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	47a0      	blx	r4
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]
  return res;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
}
 8007526:	4618      	mov	r0, r3
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	bd90      	pop	{r4, r7, pc}
 800752e:	bf00      	nop
 8007530:	200002a4 	.word	0x200002a4

08007534 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007534:	b590      	push	{r4, r7, lr}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	4a0a      	ldr	r2, [pc, #40]	; (8007570 <disk_write+0x3c>)
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	68dc      	ldr	r4, [r3, #12]
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	4a07      	ldr	r2, [pc, #28]	; (8007570 <disk_write+0x3c>)
 8007554:	4413      	add	r3, r2
 8007556:	7a18      	ldrb	r0, [r3, #8]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	47a0      	blx	r4
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]
  return res;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	bd90      	pop	{r4, r7, pc}
 800756e:	bf00      	nop
 8007570:	200002a4 	.word	0x200002a4

08007574 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	603a      	str	r2, [r7, #0]
 800757e:	71fb      	strb	r3, [r7, #7]
 8007580:	460b      	mov	r3, r1
 8007582:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <disk_ioctl+0x38>)
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	79fa      	ldrb	r2, [r7, #7]
 8007592:	4906      	ldr	r1, [pc, #24]	; (80075ac <disk_ioctl+0x38>)
 8007594:	440a      	add	r2, r1
 8007596:	7a10      	ldrb	r0, [r2, #8]
 8007598:	79b9      	ldrb	r1, [r7, #6]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200002a4 	.word	0x200002a4

080075b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3301      	adds	r3, #1
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075c0:	89fb      	ldrh	r3, [r7, #14]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	b21a      	sxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b21b      	sxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b21b      	sxth	r3, r3
 80075d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075d2:	89fb      	ldrh	r3, [r7, #14]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3303      	adds	r3, #3
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	3202      	adds	r2, #2
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	3201      	adds	r2, #1
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	7812      	ldrb	r2, [r2, #0]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
	return rv;
 8007618:	68fb      	ldr	r3, [r7, #12]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	887a      	ldrh	r2, [r7, #2]
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	887b      	ldrh	r3, [r7, #2]
 8007640:	0a1b      	lsrs	r3, r3, #8
 8007642:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	887a      	ldrh	r2, [r7, #2]
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	0a1b      	lsrs	r3, r3, #8
 8007676:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	607a      	str	r2, [r7, #4]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	0a1b      	lsrs	r3, r3, #8
 800769a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	b2d2      	uxtb	r2, r2
 80076a6:	701a      	strb	r2, [r3, #0]
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00d      	beq.n	80076ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	1c53      	adds	r3, r2, #1
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1c59      	adds	r1, r3, #1
 80076d8:	6179      	str	r1, [r7, #20]
 80076da:	7812      	ldrb	r2, [r2, #0]
 80076dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	607b      	str	r3, [r7, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f1      	bne.n	80076ce <mem_cpy+0x1a>
	}
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076f6:	b480      	push	{r7}
 80076f8:	b087      	sub	sp, #28
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	617a      	str	r2, [r7, #20]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3b01      	subs	r3, #1
 8007716:	607b      	str	r3, [r7, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f3      	bne.n	8007706 <mem_set+0x10>
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	371c      	adds	r7, #28
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800772c:	b480      	push	{r7}
 800772e:	b089      	sub	sp, #36	; 0x24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	61fa      	str	r2, [r7, #28]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	4619      	mov	r1, r3
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	61ba      	str	r2, [r7, #24]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	1acb      	subs	r3, r1, r3
 8007758:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3b01      	subs	r3, #1
 800775e:	607b      	str	r3, [r7, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <mem_cmp+0x40>
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0eb      	beq.n	8007744 <mem_cmp+0x18>

	return r;
 800776c:	697b      	ldr	r3, [r7, #20]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3724      	adds	r7, #36	; 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007784:	e002      	b.n	800778c <chk_chr+0x12>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3301      	adds	r3, #1
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <chk_chr+0x26>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	4293      	cmp	r3, r2
 800779e:	d1f2      	bne.n	8007786 <chk_chr+0xc>
	return *str;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	781b      	ldrb	r3, [r3, #0]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e029      	b.n	8007818 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077c4:	4a27      	ldr	r2, [pc, #156]	; (8007864 <chk_lock+0xb4>)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	4413      	add	r3, r2
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d01d      	beq.n	800780e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077d2:	4a24      	ldr	r2, [pc, #144]	; (8007864 <chk_lock+0xb4>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	4413      	add	r3, r2
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d116      	bne.n	8007812 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80077e4:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <chk_lock+0xb4>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	4413      	add	r3, r2
 80077ec:	3304      	adds	r3, #4
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d10c      	bne.n	8007812 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077f8:	4a1a      	ldr	r2, [pc, #104]	; (8007864 <chk_lock+0xb4>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	4413      	add	r3, r2
 8007800:	3308      	adds	r3, #8
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007808:	429a      	cmp	r2, r3
 800780a:	d102      	bne.n	8007812 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800780c:	e007      	b.n	800781e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800780e:	2301      	movs	r3, #1
 8007810:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3301      	adds	r3, #1
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d9d2      	bls.n	80077c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d109      	bne.n	8007838 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d102      	bne.n	8007830 <chk_lock+0x80>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d101      	bne.n	8007834 <chk_lock+0x84>
 8007830:	2300      	movs	r3, #0
 8007832:	e010      	b.n	8007856 <chk_lock+0xa6>
 8007834:	2312      	movs	r3, #18
 8007836:	e00e      	b.n	8007856 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d108      	bne.n	8007850 <chk_lock+0xa0>
 800783e:	4a09      	ldr	r2, [pc, #36]	; (8007864 <chk_lock+0xb4>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	4413      	add	r3, r2
 8007846:	330c      	adds	r3, #12
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d101      	bne.n	8007854 <chk_lock+0xa4>
 8007850:	2310      	movs	r3, #16
 8007852:	e000      	b.n	8007856 <chk_lock+0xa6>
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20000284 	.word	0x20000284

08007868 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	e002      	b.n	800787a <enq_lock+0x12>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3301      	adds	r3, #1
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d806      	bhi.n	800788e <enq_lock+0x26>
 8007880:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <enq_lock+0x40>)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	4413      	add	r3, r2
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f2      	bne.n	8007874 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b02      	cmp	r3, #2
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000284 	.word	0x20000284

080078ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	e01f      	b.n	80078fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078bc:	4a41      	ldr	r2, [pc, #260]	; (80079c4 <inc_lock+0x118>)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	4413      	add	r3, r2
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d113      	bne.n	80078f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078ce:	4a3d      	ldr	r2, [pc, #244]	; (80079c4 <inc_lock+0x118>)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	4413      	add	r3, r2
 80078d6:	3304      	adds	r3, #4
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80078de:	429a      	cmp	r2, r3
 80078e0:	d109      	bne.n	80078f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078e2:	4a38      	ldr	r2, [pc, #224]	; (80079c4 <inc_lock+0x118>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	4413      	add	r3, r2
 80078ea:	3308      	adds	r3, #8
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d006      	beq.n	8007904 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d9dc      	bls.n	80078bc <inc_lock+0x10>
 8007902:	e000      	b.n	8007906 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007904:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d132      	bne.n	8007972 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	e002      	b.n	8007918 <inc_lock+0x6c>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d806      	bhi.n	800792c <inc_lock+0x80>
 800791e:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <inc_lock+0x118>)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	4413      	add	r3, r2
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1f2      	bne.n	8007912 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d101      	bne.n	8007936 <inc_lock+0x8a>
 8007932:	2300      	movs	r3, #0
 8007934:	e040      	b.n	80079b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4922      	ldr	r1, [pc, #136]	; (80079c4 <inc_lock+0x118>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	440b      	add	r3, r1
 8007942:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	491e      	ldr	r1, [pc, #120]	; (80079c4 <inc_lock+0x118>)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	440b      	add	r3, r1
 8007950:	3304      	adds	r3, #4
 8007952:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	491a      	ldr	r1, [pc, #104]	; (80079c4 <inc_lock+0x118>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	440b      	add	r3, r1
 8007960:	3308      	adds	r3, #8
 8007962:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007964:	4a17      	ldr	r2, [pc, #92]	; (80079c4 <inc_lock+0x118>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	4413      	add	r3, r2
 800796c:	330c      	adds	r3, #12
 800796e:	2200      	movs	r2, #0
 8007970:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <inc_lock+0xe0>
 8007978:	4a12      	ldr	r2, [pc, #72]	; (80079c4 <inc_lock+0x118>)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	011b      	lsls	r3, r3, #4
 800797e:	4413      	add	r3, r2
 8007980:	330c      	adds	r3, #12
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <inc_lock+0xe0>
 8007988:	2300      	movs	r3, #0
 800798a:	e015      	b.n	80079b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d108      	bne.n	80079a4 <inc_lock+0xf8>
 8007992:	4a0c      	ldr	r2, [pc, #48]	; (80079c4 <inc_lock+0x118>)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	4413      	add	r3, r2
 800799a:	330c      	adds	r3, #12
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	3301      	adds	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	e001      	b.n	80079a8 <inc_lock+0xfc>
 80079a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a8:	4906      	ldr	r1, [pc, #24]	; (80079c4 <inc_lock+0x118>)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	440b      	add	r3, r1
 80079b0:	330c      	adds	r3, #12
 80079b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	20000284 	.word	0x20000284

080079c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d825      	bhi.n	8007a28 <dec_lock+0x60>
		n = Files[i].ctr;
 80079dc:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <dec_lock+0x74>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	4413      	add	r3, r2
 80079e4:	330c      	adds	r3, #12
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80079ea:	89fb      	ldrh	r3, [r7, #14]
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d101      	bne.n	80079f6 <dec_lock+0x2e>
 80079f2:	2300      	movs	r3, #0
 80079f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80079f6:	89fb      	ldrh	r3, [r7, #14]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <dec_lock+0x3a>
 80079fc:	89fb      	ldrh	r3, [r7, #14]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007a02:	4a0e      	ldr	r2, [pc, #56]	; (8007a3c <dec_lock+0x74>)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	4413      	add	r3, r2
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	89fa      	ldrh	r2, [r7, #14]
 8007a0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <dec_lock+0x5a>
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <dec_lock+0x74>)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	4413      	add	r3, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	737b      	strb	r3, [r7, #13]
 8007a26:	e001      	b.n	8007a2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a28:	2302      	movs	r3, #2
 8007a2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000284 	.word	0x20000284

08007a40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	e010      	b.n	8007a70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a4e:	4a0d      	ldr	r2, [pc, #52]	; (8007a84 <clear_lock+0x44>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d105      	bne.n	8007a6a <clear_lock+0x2a>
 8007a5e:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <clear_lock+0x44>)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	4413      	add	r3, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d9eb      	bls.n	8007a4e <clear_lock+0xe>
	}
}
 8007a76:	bf00      	nop
 8007a78:	bf00      	nop
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	20000284 	.word	0x20000284

08007a88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	78db      	ldrb	r3, [r3, #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d034      	beq.n	8007b06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7858      	ldrb	r0, [r3, #1]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aac:	2301      	movs	r3, #1
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	f7ff fd40 	bl	8007534 <disk_write>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
 8007abe:	e022      	b.n	8007b06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	1ad2      	subs	r2, r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d217      	bcs.n	8007b06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	789b      	ldrb	r3, [r3, #2]
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	e010      	b.n	8007b00 <sync_window+0x78>
					wsect += fs->fsize;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7858      	ldrb	r0, [r3, #1]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007af2:	2301      	movs	r3, #1
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	f7ff fd1d 	bl	8007534 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d8eb      	bhi.n	8007ade <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d01b      	beq.n	8007b60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff ffad 	bl	8007a88 <sync_window>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d113      	bne.n	8007b60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	7858      	ldrb	r0, [r3, #1]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b42:	2301      	movs	r3, #1
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	f7ff fcd5 	bl	80074f4 <disk_read>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b50:	f04f 33ff 	mov.w	r3, #4294967295
 8007b54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff87 	bl	8007a88 <sync_window>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d158      	bne.n	8007c36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d148      	bne.n	8007c1e <sync_fs+0xb2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	791b      	ldrb	r3, [r3, #4]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d144      	bne.n	8007c1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3330      	adds	r3, #48	; 0x30
 8007b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff fda9 	bl	80076f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3330      	adds	r3, #48	; 0x30
 8007ba8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fd38 	bl	8007626 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3330      	adds	r3, #48	; 0x30
 8007bba:	4921      	ldr	r1, [pc, #132]	; (8007c40 <sync_fs+0xd4>)
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fd4d 	bl	800765c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3330      	adds	r3, #48	; 0x30
 8007bc6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bca:	491e      	ldr	r1, [pc, #120]	; (8007c44 <sync_fs+0xd8>)
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fd45 	bl	800765c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3330      	adds	r3, #48	; 0x30
 8007bd6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7ff fd3b 	bl	800765c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3330      	adds	r3, #48	; 0x30
 8007bea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7ff fd31 	bl	800765c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	7858      	ldrb	r0, [r3, #1]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c12:	2301      	movs	r3, #1
 8007c14:	f7ff fc8e 	bl	8007534 <disk_write>
			fs->fsi_flag = 0;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2200      	movs	r2, #0
 8007c24:	2100      	movs	r1, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff fca4 	bl	8007574 <disk_ioctl>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <sync_fs+0xca>
 8007c32:	2301      	movs	r3, #1
 8007c34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	41615252 	.word	0x41615252
 8007c44:	61417272 	.word	0x61417272

08007c48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3b02      	subs	r3, #2
 8007c56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	3b02      	subs	r3, #2
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d301      	bcc.n	8007c68 <clust2sect+0x20>
 8007c64:	2300      	movs	r3, #0
 8007c66:	e008      	b.n	8007c7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	895b      	ldrh	r3, [r3, #10]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	fb03 f202 	mul.w	r2, r3, r2
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c78:	4413      	add	r3, r2
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b086      	sub	sp, #24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d904      	bls.n	8007ca6 <get_fat+0x20>
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <get_fat+0x26>
		val = 1;	/* Internal error */
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	e08f      	b.n	8007dcc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d062      	beq.n	8007d80 <get_fat+0xfa>
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	dc7c      	bgt.n	8007db8 <get_fat+0x132>
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d002      	beq.n	8007cc8 <get_fat+0x42>
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d042      	beq.n	8007d4c <get_fat+0xc6>
 8007cc6:	e077      	b.n	8007db8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	085b      	lsrs	r3, r3, #1
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	0a5b      	lsrs	r3, r3, #9
 8007cde:	4413      	add	r3, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6938      	ldr	r0, [r7, #16]
 8007ce4:	f7ff ff14 	bl	8007b10 <move_window>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d167      	bne.n	8007dbe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	60fa      	str	r2, [r7, #12]
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6a1a      	ldr	r2, [r3, #32]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	0a5b      	lsrs	r3, r3, #9
 8007d0a:	4413      	add	r3, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6938      	ldr	r0, [r7, #16]
 8007d10:	f7ff fefe 	bl	8007b10 <move_window>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d153      	bne.n	8007dc2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4413      	add	r3, r2
 8007d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <get_fat+0xbc>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	091b      	lsrs	r3, r3, #4
 8007d40:	e002      	b.n	8007d48 <get_fat+0xc2>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d48:	617b      	str	r3, [r7, #20]
			break;
 8007d4a:	e03f      	b.n	8007dcc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	6a1a      	ldr	r2, [r3, #32]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	4413      	add	r3, r2
 8007d56:	4619      	mov	r1, r3
 8007d58:	6938      	ldr	r0, [r7, #16]
 8007d5a:	f7ff fed9 	bl	8007b10 <move_window>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d130      	bne.n	8007dc6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d72:	4413      	add	r3, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fc1b 	bl	80075b0 <ld_word>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	617b      	str	r3, [r7, #20]
			break;
 8007d7e:	e025      	b.n	8007dcc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6a1a      	ldr	r2, [r3, #32]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	4413      	add	r3, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6938      	ldr	r0, [r7, #16]
 8007d8e:	f7ff febf 	bl	8007b10 <move_window>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d118      	bne.n	8007dca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007da6:	4413      	add	r3, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff fc19 	bl	80075e0 <ld_dword>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007db4:	617b      	str	r3, [r7, #20]
			break;
 8007db6:	e009      	b.n	8007dcc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007db8:	2301      	movs	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e006      	b.n	8007dcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dbe:	bf00      	nop
 8007dc0:	e004      	b.n	8007dcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dc2:	bf00      	nop
 8007dc4:	e002      	b.n	8007dcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007dc6:	bf00      	nop
 8007dc8:	e000      	b.n	8007dcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007dca:	bf00      	nop
		}
	}

	return val;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007dd6:	b590      	push	{r4, r7, lr}
 8007dd8:	b089      	sub	sp, #36	; 0x24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007de2:	2302      	movs	r3, #2
 8007de4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	f240 80d2 	bls.w	8007f92 <put_fat+0x1bc>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	f080 80cc 	bcs.w	8007f92 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	f000 8096 	beq.w	8007f30 <put_fat+0x15a>
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	f300 80cd 	bgt.w	8007fa4 <put_fat+0x1ce>
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d002      	beq.n	8007e14 <put_fat+0x3e>
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d06e      	beq.n	8007ef0 <put_fat+0x11a>
 8007e12:	e0c7      	b.n	8007fa4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	61bb      	str	r3, [r7, #24]
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	4413      	add	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1a      	ldr	r2, [r3, #32]
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	0a5b      	lsrs	r3, r3, #9
 8007e2a:	4413      	add	r3, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fe6e 	bl	8007b10 <move_window>
 8007e34:	4603      	mov	r3, r0
 8007e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e38:	7ffb      	ldrb	r3, [r7, #31]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 80ab 	bne.w	8007f96 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	1c59      	adds	r1, r3, #1
 8007e4a:	61b9      	str	r1, [r7, #24]
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	4413      	add	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <put_fat+0xa4>
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	b25a      	sxtb	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	b25b      	sxtb	r3, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	e001      	b.n	8007e7e <put_fat+0xa8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1a      	ldr	r2, [r3, #32]
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	0a5b      	lsrs	r3, r3, #9
 8007e90:	4413      	add	r3, r2
 8007e92:	4619      	mov	r1, r3
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff fe3b 	bl	8007b10 <move_window>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d17a      	bne.n	8007f9a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb0:	4413      	add	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <put_fat+0xf0>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	091b      	lsrs	r3, r3, #4
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	e00e      	b.n	8007ee4 <put_fat+0x10e>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	b25b      	sxtb	r3, r3
 8007ecc:	f023 030f 	bic.w	r3, r3, #15
 8007ed0:	b25a      	sxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	b25b      	sxtb	r3, r3
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	b25b      	sxtb	r3, r3
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	70da      	strb	r2, [r3, #3]
			break;
 8007eee:	e059      	b.n	8007fa4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a1a      	ldr	r2, [r3, #32]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	4413      	add	r3, r2
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f7ff fe07 	bl	8007b10 <move_window>
 8007f02:	4603      	mov	r3, r0
 8007f04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f06:	7ffb      	ldrb	r3, [r7, #31]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d148      	bne.n	8007f9e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007f1a:	4413      	add	r3, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fb7f 	bl	8007626 <st_word>
			fs->wflag = 1;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	70da      	strb	r2, [r3, #3]
			break;
 8007f2e:	e039      	b.n	8007fa4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	09db      	lsrs	r3, r3, #7
 8007f38:	4413      	add	r3, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7ff fde7 	bl	8007b10 <move_window>
 8007f42:	4603      	mov	r3, r0
 8007f44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f46:	7ffb      	ldrb	r3, [r7, #31]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d12a      	bne.n	8007fa2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f60:	4413      	add	r3, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fb3c 	bl	80075e0 <ld_dword>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f6e:	4323      	orrs	r3, r4
 8007f70:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f80:	4413      	add	r3, r2
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fb69 	bl	800765c <st_dword>
			fs->wflag = 1;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	70da      	strb	r2, [r3, #3]
			break;
 8007f90:	e008      	b.n	8007fa4 <put_fat+0x1ce>
		}
	}
 8007f92:	bf00      	nop
 8007f94:	e006      	b.n	8007fa4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f96:	bf00      	nop
 8007f98:	e004      	b.n	8007fa4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f9a:	bf00      	nop
 8007f9c:	e002      	b.n	8007fa4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007f9e:	bf00      	nop
 8007fa0:	e000      	b.n	8007fa4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fa2:	bf00      	nop
	return res;
 8007fa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3724      	adds	r7, #36	; 0x24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd90      	pop	{r4, r7, pc}

08007fae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b088      	sub	sp, #32
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d904      	bls.n	8007fd4 <remove_chain+0x26>
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d301      	bcc.n	8007fd8 <remove_chain+0x2a>
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e04b      	b.n	8008070 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00c      	beq.n	8007ff8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	69b8      	ldr	r0, [r7, #24]
 8007fe6:	f7ff fef6 	bl	8007dd6 <put_fat>
 8007fea:	4603      	mov	r3, r0
 8007fec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007fee:	7ffb      	ldrb	r3, [r7, #31]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <remove_chain+0x4a>
 8007ff4:	7ffb      	ldrb	r3, [r7, #31]
 8007ff6:	e03b      	b.n	8008070 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ff8:	68b9      	ldr	r1, [r7, #8]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7ff fe43 	bl	8007c86 <get_fat>
 8008000:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d031      	beq.n	800806c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <remove_chain+0x64>
 800800e:	2302      	movs	r3, #2
 8008010:	e02e      	b.n	8008070 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d101      	bne.n	800801e <remove_chain+0x70>
 800801a:	2301      	movs	r3, #1
 800801c:	e028      	b.n	8008070 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800801e:	2200      	movs	r2, #0
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	69b8      	ldr	r0, [r7, #24]
 8008024:	f7ff fed7 	bl	8007dd6 <put_fat>
 8008028:	4603      	mov	r3, r0
 800802a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800802c:	7ffb      	ldrb	r3, [r7, #31]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <remove_chain+0x88>
 8008032:	7ffb      	ldrb	r3, [r7, #31]
 8008034:	e01c      	b.n	8008070 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	3b02      	subs	r3, #2
 8008040:	429a      	cmp	r2, r3
 8008042:	d20b      	bcs.n	800805c <remove_chain+0xae>
			fs->free_clst++;
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	791b      	ldrb	r3, [r3, #4]
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	429a      	cmp	r2, r3
 8008068:	d3c6      	bcc.n	8007ff8 <remove_chain+0x4a>
 800806a:	e000      	b.n	800806e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800806c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10d      	bne.n	80080aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <create_chain+0x2c>
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d31b      	bcc.n	80080dc <create_chain+0x64>
 80080a4:	2301      	movs	r3, #1
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	e018      	b.n	80080dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fdea 	bl	8007c86 <get_fat>
 80080b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d801      	bhi.n	80080be <create_chain+0x46>
 80080ba:	2301      	movs	r3, #1
 80080bc:	e070      	b.n	80081a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c4:	d101      	bne.n	80080ca <create_chain+0x52>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	e06a      	b.n	80081a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d201      	bcs.n	80080d8 <create_chain+0x60>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	e063      	b.n	80081a0 <create_chain+0x128>
		scl = clst;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	3301      	adds	r3, #1
 80080e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d307      	bcc.n	8008100 <create_chain+0x88>
				ncl = 2;
 80080f0:	2302      	movs	r3, #2
 80080f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d901      	bls.n	8008100 <create_chain+0x88>
 80080fc:	2300      	movs	r3, #0
 80080fe:	e04f      	b.n	80081a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008100:	69f9      	ldr	r1, [r7, #28]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff fdbf 	bl	8007c86 <get_fat>
 8008108:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00e      	beq.n	800812e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d003      	beq.n	800811e <create_chain+0xa6>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d101      	bne.n	8008122 <create_chain+0xaa>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	e03e      	b.n	80081a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	429a      	cmp	r2, r3
 8008128:	d1da      	bne.n	80080e0 <create_chain+0x68>
 800812a:	2300      	movs	r3, #0
 800812c:	e038      	b.n	80081a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800812e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008130:	f04f 32ff 	mov.w	r2, #4294967295
 8008134:	69f9      	ldr	r1, [r7, #28]
 8008136:	6938      	ldr	r0, [r7, #16]
 8008138:	f7ff fe4d 	bl	8007dd6 <put_fat>
 800813c:	4603      	mov	r3, r0
 800813e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <create_chain+0xe2>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6938      	ldr	r0, [r7, #16]
 8008152:	f7ff fe40 	bl	8007dd6 <put_fat>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d116      	bne.n	800818e <create_chain+0x116>
		fs->last_clst = ncl;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	3b02      	subs	r3, #2
 8008170:	429a      	cmp	r2, r3
 8008172:	d804      	bhi.n	800817e <create_chain+0x106>
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	791b      	ldrb	r3, [r3, #4]
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	711a      	strb	r2, [r3, #4]
 800818c:	e007      	b.n	800819e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d102      	bne.n	800819a <create_chain+0x122>
 8008194:	f04f 33ff 	mov.w	r3, #4294967295
 8008198:	e000      	b.n	800819c <create_chain+0x124>
 800819a:	2301      	movs	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800819e:	69fb      	ldr	r3, [r7, #28]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	3304      	adds	r3, #4
 80081be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	0a5b      	lsrs	r3, r3, #9
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	8952      	ldrh	r2, [r2, #10]
 80081c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	613a      	str	r2, [r7, #16]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <clmt_clust+0x3a>
 80081de:	2300      	movs	r3, #0
 80081e0:	e010      	b.n	8008204 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d307      	bcc.n	80081fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	3304      	adds	r3, #4
 80081f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081f8:	e7e9      	b.n	80081ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80081fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4413      	add	r3, r2
}
 8008204:	4618      	mov	r0, r3
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008226:	d204      	bcs.n	8008232 <dir_sdi+0x22>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008232:	2302      	movs	r3, #2
 8008234:	e063      	b.n	80082fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <dir_sdi+0x46>
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d902      	bls.n	8008256 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10c      	bne.n	8008276 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	8912      	ldrh	r2, [r2, #8]
 8008264:	4293      	cmp	r3, r2
 8008266:	d301      	bcc.n	800826c <dir_sdi+0x5c>
 8008268:	2302      	movs	r3, #2
 800826a:	e048      	b.n	80082fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	61da      	str	r2, [r3, #28]
 8008274:	e029      	b.n	80082ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	895b      	ldrh	r3, [r3, #10]
 800827a:	025b      	lsls	r3, r3, #9
 800827c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800827e:	e019      	b.n	80082b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6979      	ldr	r1, [r7, #20]
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fcfe 	bl	8007c86 <get_fat>
 800828a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d101      	bne.n	8008298 <dir_sdi+0x88>
 8008294:	2301      	movs	r3, #1
 8008296:	e032      	b.n	80082fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d904      	bls.n	80082a8 <dir_sdi+0x98>
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d301      	bcc.n	80082ac <dir_sdi+0x9c>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e028      	b.n	80082fe <dir_sdi+0xee>
			ofs -= csz;
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d2e1      	bcs.n	8008280 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80082bc:	6979      	ldr	r1, [r7, #20]
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f7ff fcc2 	bl	8007c48 <clust2sect>
 80082c4:	4602      	mov	r2, r0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <dir_sdi+0xcc>
 80082d8:	2302      	movs	r3, #2
 80082da:	e010      	b.n	80082fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	0a5b      	lsrs	r3, r3, #9
 80082e4:	441a      	add	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f6:	441a      	add	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b086      	sub	sp, #24
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	3320      	adds	r3, #32
 800831c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <dir_next+0x28>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800832c:	d301      	bcc.n	8008332 <dir_next+0x2c>
 800832e:	2304      	movs	r3, #4
 8008330:	e0aa      	b.n	8008488 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 8098 	bne.w	800846e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	8912      	ldrh	r2, [r2, #8]
 8008358:	4293      	cmp	r3, r2
 800835a:	f0c0 8088 	bcc.w	800846e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	61da      	str	r2, [r3, #28]
 8008364:	2304      	movs	r3, #4
 8008366:	e08f      	b.n	8008488 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	0a5b      	lsrs	r3, r3, #9
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	8952      	ldrh	r2, [r2, #10]
 8008370:	3a01      	subs	r2, #1
 8008372:	4013      	ands	r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d17a      	bne.n	800846e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7ff fc80 	bl	8007c86 <get_fat>
 8008386:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d801      	bhi.n	8008392 <dir_next+0x8c>
 800838e:	2302      	movs	r3, #2
 8008390:	e07a      	b.n	8008488 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d101      	bne.n	800839e <dir_next+0x98>
 800839a:	2301      	movs	r3, #1
 800839c:	e074      	b.n	8008488 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d358      	bcc.n	800845a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d104      	bne.n	80083b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	61da      	str	r2, [r3, #28]
 80083b4:	2304      	movs	r3, #4
 80083b6:	e067      	b.n	8008488 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f7ff fe59 	bl	8008078 <create_chain>
 80083c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <dir_next+0xcc>
 80083ce:	2307      	movs	r3, #7
 80083d0:	e05a      	b.n	8008488 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <dir_next+0xd6>
 80083d8:	2302      	movs	r3, #2
 80083da:	e055      	b.n	8008488 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d101      	bne.n	80083e8 <dir_next+0xe2>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e04f      	b.n	8008488 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff fb4d 	bl	8007a88 <sync_window>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <dir_next+0xf2>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e047      	b.n	8008488 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3330      	adds	r3, #48	; 0x30
 80083fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff f977 	bl	80076f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	6979      	ldr	r1, [r7, #20]
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fc1a 	bl	8007c48 <clust2sect>
 8008414:	4602      	mov	r2, r0
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	62da      	str	r2, [r3, #44]	; 0x2c
 800841a:	e012      	b.n	8008442 <dir_next+0x13c>
						fs->wflag = 1;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fb30 	bl	8007a88 <sync_window>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <dir_next+0x12c>
 800842e:	2301      	movs	r3, #1
 8008430:	e02a      	b.n	8008488 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	3301      	adds	r3, #1
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	1c5a      	adds	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	62da      	str	r2, [r3, #44]	; 0x2c
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	895b      	ldrh	r3, [r3, #10]
 8008446:	461a      	mov	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	4293      	cmp	r3, r2
 800844c:	d3e6      	bcc.n	800841c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1ad2      	subs	r2, r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008460:	6979      	ldr	r1, [r7, #20]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff fbf0 	bl	8007c48 <clust2sect>
 8008468:	4602      	mov	r2, r0
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008480:	441a      	add	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80084a0:	2100      	movs	r1, #0
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff feb4 	bl	8008210 <dir_sdi>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d12b      	bne.n	800850a <dir_alloc+0x7a>
		n = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	4619      	mov	r1, r3
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff fb27 	bl	8007b10 <move_window>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11d      	bne.n	8008508 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2be5      	cmp	r3, #229	; 0xe5
 80084d4:	d004      	beq.n	80084e0 <dir_alloc+0x50>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d107      	bne.n	80084f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3301      	adds	r3, #1
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d102      	bne.n	80084f4 <dir_alloc+0x64>
 80084ee:	e00c      	b.n	800850a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80084f0:	2300      	movs	r3, #0
 80084f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80084f4:	2101      	movs	r1, #1
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff ff05 	bl	8008306 <dir_next>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0d7      	beq.n	80084b6 <dir_alloc+0x26>
 8008506:	e000      	b.n	800850a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008508:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	2b04      	cmp	r3, #4
 800850e:	d101      	bne.n	8008514 <dir_alloc+0x84>
 8008510:	2307      	movs	r3, #7
 8008512:	75fb      	strb	r3, [r7, #23]
	return res;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	331a      	adds	r3, #26
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff f83f 	bl	80075b0 <ld_word>
 8008532:	4603      	mov	r3, r0
 8008534:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b03      	cmp	r3, #3
 800853c:	d109      	bne.n	8008552 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	3314      	adds	r3, #20
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff f834 	bl	80075b0 <ld_word>
 8008548:	4603      	mov	r3, r0
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008552:	68fb      	ldr	r3, [r7, #12]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	331a      	adds	r3, #26
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	b292      	uxth	r2, r2
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff f857 	bl	8007626 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b03      	cmp	r3, #3
 800857e:	d109      	bne.n	8008594 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f103 0214 	add.w	r2, r3, #20
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	0c1b      	lsrs	r3, r3, #16
 800858a:	b29b      	uxth	r3, r3
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f7ff f849 	bl	8007626 <st_word>
	}
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80085aa:	2100      	movs	r1, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fe2f 	bl	8008210 <dir_sdi>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <dir_find+0x24>
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
 80085be:	e03e      	b.n	800863e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6938      	ldr	r0, [r7, #16]
 80085c8:	f7ff faa2 	bl	8007b10 <move_window>
 80085cc:	4603      	mov	r3, r0
 80085ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d12f      	bne.n	8008636 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d102      	bne.n	80085ea <dir_find+0x4e>
 80085e4:	2304      	movs	r3, #4
 80085e6:	75fb      	strb	r3, [r7, #23]
 80085e8:	e028      	b.n	800863c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	330b      	adds	r3, #11
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	330b      	adds	r3, #11
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <dir_find+0x86>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a18      	ldr	r0, [r3, #32]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3324      	adds	r3, #36	; 0x24
 8008614:	220b      	movs	r2, #11
 8008616:	4619      	mov	r1, r3
 8008618:	f7ff f888 	bl	800772c <mem_cmp>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008622:	2100      	movs	r1, #0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fe6e 	bl	8008306 <dir_next>
 800862a:	4603      	mov	r3, r0
 800862c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0c5      	beq.n	80085c0 <dir_find+0x24>
 8008634:	e002      	b.n	800863c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800863a:	bf00      	nop

	return res;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008654:	2101      	movs	r1, #1
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff ff1a 	bl	8008490 <dir_alloc>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d11c      	bne.n	80086a0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	4619      	mov	r1, r3
 800866c:	68b8      	ldr	r0, [r7, #8]
 800866e:	f7ff fa4f 	bl	8007b10 <move_window>
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d111      	bne.n	80086a0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	2220      	movs	r2, #32
 8008682:	2100      	movs	r1, #0
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff f836 	bl	80076f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a18      	ldr	r0, [r3, #32]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3324      	adds	r3, #36	; 0x24
 8008692:	220b      	movs	r2, #11
 8008694:	4619      	mov	r1, r3
 8008696:	f7ff f80d 	bl	80076b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2201      	movs	r2, #1
 800869e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3324      	adds	r3, #36	; 0x24
 80086c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80086c2:	220b      	movs	r2, #11
 80086c4:	2120      	movs	r1, #32
 80086c6:	68b8      	ldr	r0, [r7, #8]
 80086c8:	f7ff f815 	bl	80076f6 <mem_set>
	si = i = 0; ni = 8;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	2308      	movs	r3, #8
 80086d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	61fa      	str	r2, [r7, #28]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4413      	add	r3, r2
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80086e6:	7efb      	ldrb	r3, [r7, #27]
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d94e      	bls.n	800878a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80086ec:	7efb      	ldrb	r3, [r7, #27]
 80086ee:	2b2f      	cmp	r3, #47	; 0x2f
 80086f0:	d006      	beq.n	8008700 <create_name+0x54>
 80086f2:	7efb      	ldrb	r3, [r7, #27]
 80086f4:	2b5c      	cmp	r3, #92	; 0x5c
 80086f6:	d110      	bne.n	800871a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80086f8:	e002      	b.n	8008700 <create_name+0x54>
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	3301      	adds	r3, #1
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b2f      	cmp	r3, #47	; 0x2f
 800870a:	d0f6      	beq.n	80086fa <create_name+0x4e>
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b5c      	cmp	r3, #92	; 0x5c
 8008716:	d0f0      	beq.n	80086fa <create_name+0x4e>
			break;
 8008718:	e038      	b.n	800878c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800871a:	7efb      	ldrb	r3, [r7, #27]
 800871c:	2b2e      	cmp	r3, #46	; 0x2e
 800871e:	d003      	beq.n	8008728 <create_name+0x7c>
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	429a      	cmp	r2, r3
 8008726:	d30c      	bcc.n	8008742 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b0b      	cmp	r3, #11
 800872c:	d002      	beq.n	8008734 <create_name+0x88>
 800872e:	7efb      	ldrb	r3, [r7, #27]
 8008730:	2b2e      	cmp	r3, #46	; 0x2e
 8008732:	d001      	beq.n	8008738 <create_name+0x8c>
 8008734:	2306      	movs	r3, #6
 8008736:	e044      	b.n	80087c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008738:	2308      	movs	r3, #8
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	230b      	movs	r3, #11
 800873e:	617b      	str	r3, [r7, #20]
			continue;
 8008740:	e022      	b.n	8008788 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008742:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008746:	2b00      	cmp	r3, #0
 8008748:	da04      	bge.n	8008754 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800874a:	7efb      	ldrb	r3, [r7, #27]
 800874c:	3b80      	subs	r3, #128	; 0x80
 800874e:	4a1f      	ldr	r2, [pc, #124]	; (80087cc <create_name+0x120>)
 8008750:	5cd3      	ldrb	r3, [r2, r3]
 8008752:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008754:	7efb      	ldrb	r3, [r7, #27]
 8008756:	4619      	mov	r1, r3
 8008758:	481d      	ldr	r0, [pc, #116]	; (80087d0 <create_name+0x124>)
 800875a:	f7ff f80e 	bl	800777a <chk_chr>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <create_name+0xbc>
 8008764:	2306      	movs	r3, #6
 8008766:	e02c      	b.n	80087c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008768:	7efb      	ldrb	r3, [r7, #27]
 800876a:	2b60      	cmp	r3, #96	; 0x60
 800876c:	d905      	bls.n	800877a <create_name+0xce>
 800876e:	7efb      	ldrb	r3, [r7, #27]
 8008770:	2b7a      	cmp	r3, #122	; 0x7a
 8008772:	d802      	bhi.n	800877a <create_name+0xce>
 8008774:	7efb      	ldrb	r3, [r7, #27]
 8008776:	3b20      	subs	r3, #32
 8008778:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	613a      	str	r2, [r7, #16]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	4413      	add	r3, r2
 8008784:	7efa      	ldrb	r2, [r7, #27]
 8008786:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008788:	e7a6      	b.n	80086d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800878a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	441a      	add	r2, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <create_name+0xf4>
 800879c:	2306      	movs	r3, #6
 800879e:	e010      	b.n	80087c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2be5      	cmp	r3, #229	; 0xe5
 80087a6:	d102      	bne.n	80087ae <create_name+0x102>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2205      	movs	r2, #5
 80087ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80087ae:	7efb      	ldrb	r3, [r7, #27]
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	d801      	bhi.n	80087b8 <create_name+0x10c>
 80087b4:	2204      	movs	r2, #4
 80087b6:	e000      	b.n	80087ba <create_name+0x10e>
 80087b8:	2200      	movs	r2, #0
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	330b      	adds	r3, #11
 80087be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80087c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	0801141c 	.word	0x0801141c
 80087d0:	0800e3e8 	.word	0x0800e3e8

080087d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80087e8:	e002      	b.n	80087f0 <follow_path+0x1c>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	3301      	adds	r3, #1
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b2f      	cmp	r3, #47	; 0x2f
 80087f6:	d0f8      	beq.n	80087ea <follow_path+0x16>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b5c      	cmp	r3, #92	; 0x5c
 80087fe:	d0f4      	beq.n	80087ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	2200      	movs	r2, #0
 8008804:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b1f      	cmp	r3, #31
 800880c:	d80a      	bhi.n	8008824 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2280      	movs	r2, #128	; 0x80
 8008812:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fcf9 	bl	8008210 <dir_sdi>
 800881e:	4603      	mov	r3, r0
 8008820:	75fb      	strb	r3, [r7, #23]
 8008822:	e043      	b.n	80088ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008824:	463b      	mov	r3, r7
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff3f 	bl	80086ac <create_name>
 800882e:	4603      	mov	r3, r0
 8008830:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d134      	bne.n	80088a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff feaf 	bl	800859c <dir_find>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008848:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	2b04      	cmp	r3, #4
 8008854:	d127      	bne.n	80088a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d122      	bne.n	80088a6 <follow_path+0xd2>
 8008860:	2305      	movs	r3, #5
 8008862:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008864:	e01f      	b.n	80088a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d11c      	bne.n	80088aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	799b      	ldrb	r3, [r3, #6]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800887c:	2305      	movs	r3, #5
 800887e:	75fb      	strb	r3, [r7, #23]
 8008880:	e014      	b.n	80088ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008890:	4413      	add	r3, r2
 8008892:	4619      	mov	r1, r3
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fe42 	bl	800851e <ld_clust>
 800889a:	4602      	mov	r2, r0
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088a0:	e7c0      	b.n	8008824 <follow_path+0x50>
			if (res != FR_OK) break;
 80088a2:	bf00      	nop
 80088a4:	e002      	b.n	80088ac <follow_path+0xd8>
				break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088aa:	bf00      	nop
			}
		}
	}

	return res;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b087      	sub	sp, #28
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80088be:	f04f 33ff 	mov.w	r3, #4294967295
 80088c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d031      	beq.n	8008930 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	e002      	b.n	80088da <get_ldnumber+0x24>
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	3301      	adds	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d903      	bls.n	80088ea <get_ldnumber+0x34>
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b3a      	cmp	r3, #58	; 0x3a
 80088e8:	d1f4      	bne.n	80088d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b3a      	cmp	r3, #58	; 0x3a
 80088f0:	d11c      	bne.n	800892c <get_ldnumber+0x76>
			tp = *path;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	60fa      	str	r2, [r7, #12]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	3b30      	subs	r3, #48	; 0x30
 8008902:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2b09      	cmp	r3, #9
 8008908:	d80e      	bhi.n	8008928 <get_ldnumber+0x72>
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	429a      	cmp	r2, r3
 8008910:	d10a      	bne.n	8008928 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d107      	bne.n	8008928 <get_ldnumber+0x72>
					vol = (int)i;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	3301      	adds	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	e002      	b.n	8008932 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800892c:	2300      	movs	r3, #0
 800892e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008930:	693b      	ldr	r3, [r7, #16]
}
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
	...

08008940 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	70da      	strb	r2, [r3, #3]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f04f 32ff 	mov.w	r2, #4294967295
 8008956:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff f8d8 	bl	8007b10 <move_window>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <check_fs+0x2a>
 8008966:	2304      	movs	r3, #4
 8008968:	e038      	b.n	80089dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3330      	adds	r3, #48	; 0x30
 800896e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fe1c 	bl	80075b0 <ld_word>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008980:	429a      	cmp	r2, r3
 8008982:	d001      	beq.n	8008988 <check_fs+0x48>
 8008984:	2303      	movs	r3, #3
 8008986:	e029      	b.n	80089dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800898e:	2be9      	cmp	r3, #233	; 0xe9
 8008990:	d009      	beq.n	80089a6 <check_fs+0x66>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008998:	2beb      	cmp	r3, #235	; 0xeb
 800899a:	d11e      	bne.n	80089da <check_fs+0x9a>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80089a2:	2b90      	cmp	r3, #144	; 0x90
 80089a4:	d119      	bne.n	80089da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3330      	adds	r3, #48	; 0x30
 80089aa:	3336      	adds	r3, #54	; 0x36
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fe17 	bl	80075e0 <ld_dword>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089b8:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <check_fs+0xa4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d101      	bne.n	80089c2 <check_fs+0x82>
 80089be:	2300      	movs	r3, #0
 80089c0:	e00c      	b.n	80089dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3330      	adds	r3, #48	; 0x30
 80089c6:	3352      	adds	r3, #82	; 0x52
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fe09 	bl	80075e0 <ld_dword>
 80089ce:	4603      	mov	r3, r0
 80089d0:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <check_fs+0xa8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d101      	bne.n	80089da <check_fs+0x9a>
 80089d6:	2300      	movs	r3, #0
 80089d8:	e000      	b.n	80089dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089da:	2302      	movs	r3, #2
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	00544146 	.word	0x00544146
 80089e8:	33544146 	.word	0x33544146

080089ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b096      	sub	sp, #88	; 0x58
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2200      	movs	r2, #0
 80089fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f7ff ff58 	bl	80088b6 <get_ldnumber>
 8008a06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	da01      	bge.n	8008a12 <find_volume+0x26>
 8008a0e:	230b      	movs	r3, #11
 8008a10:	e22e      	b.n	8008e70 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a12:	4aa8      	ldr	r2, [pc, #672]	; (8008cb4 <find_volume+0x2c8>)
 8008a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <find_volume+0x3a>
 8008a22:	230c      	movs	r3, #12
 8008a24:	e224      	b.n	8008e70 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	f023 0301 	bic.w	r3, r3, #1
 8008a32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01a      	beq.n	8008a72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe fd17 	bl	8007474 <disk_status>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10c      	bne.n	8008a72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d007      	beq.n	8008a6e <find_volume+0x82>
 8008a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a62:	f003 0304 	and.w	r3, r3, #4
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008a6a:	230a      	movs	r3, #10
 8008a6c:	e200      	b.n	8008e70 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e1fe      	b.n	8008e70 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	785b      	ldrb	r3, [r3, #1]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe fd0f 	bl	80074a8 <disk_initialize>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e1e7      	b.n	8008e70 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d007      	beq.n	8008ab6 <find_volume+0xca>
 8008aa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008ab2:	230a      	movs	r3, #10
 8008ab4:	e1dc      	b.n	8008e70 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008abe:	f7ff ff3f 	bl	8008940 <check_fs>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d14b      	bne.n	8008b68 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ad4:	e01f      	b.n	8008b16 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008ae4:	4413      	add	r3, r2
 8008ae6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	3304      	adds	r3, #4
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d006      	beq.n	8008b00 <find_volume+0x114>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	3308      	adds	r3, #8
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fd72 	bl	80075e0 <ld_dword>
 8008afc:	4602      	mov	r2, r0
 8008afe:	e000      	b.n	8008b02 <find_volume+0x116>
 8008b00:	2200      	movs	r2, #0
 8008b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008b0a:	440b      	add	r3, r1
 8008b0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b12:	3301      	adds	r3, #1
 8008b14:	643b      	str	r3, [r7, #64]	; 0x40
 8008b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d9dc      	bls.n	8008ad6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <find_volume+0x140>
 8008b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008b34:	4413      	add	r3, r2
 8008b36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <find_volume+0x162>
 8008b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b46:	f7ff fefb 	bl	8008940 <check_fs>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	e000      	b.n	8008b50 <find_volume+0x164>
 8008b4e:	2303      	movs	r3, #3
 8008b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d905      	bls.n	8008b68 <find_volume+0x17c>
 8008b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5e:	3301      	adds	r3, #1
 8008b60:	643b      	str	r3, [r7, #64]	; 0x40
 8008b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d9e1      	bls.n	8008b2c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d101      	bne.n	8008b74 <find_volume+0x188>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e17d      	b.n	8008e70 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d901      	bls.n	8008b80 <find_volume+0x194>
 8008b7c:	230d      	movs	r3, #13
 8008b7e:	e177      	b.n	8008e70 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	3330      	adds	r3, #48	; 0x30
 8008b84:	330b      	adds	r3, #11
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fd12 	bl	80075b0 <ld_word>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b92:	d001      	beq.n	8008b98 <find_volume+0x1ac>
 8008b94:	230d      	movs	r3, #13
 8008b96:	e16b      	b.n	8008e70 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	3330      	adds	r3, #48	; 0x30
 8008b9c:	3316      	adds	r3, #22
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fd06 	bl	80075b0 <ld_word>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d106      	bne.n	8008bbc <find_volume+0x1d0>
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	3330      	adds	r3, #48	; 0x30
 8008bb2:	3324      	adds	r3, #36	; 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fd13 	bl	80075e0 <ld_dword>
 8008bba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bc0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	789b      	ldrb	r3, [r3, #2]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d005      	beq.n	8008be0 <find_volume+0x1f4>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	789b      	ldrb	r3, [r3, #2]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d001      	beq.n	8008be0 <find_volume+0x1f4>
 8008bdc:	230d      	movs	r3, #13
 8008bde:	e147      	b.n	8008e70 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	789b      	ldrb	r3, [r3, #2]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be8:	fb02 f303 	mul.w	r3, r2, r3
 8008bec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	895b      	ldrh	r3, [r3, #10]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <find_volume+0x228>
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	895b      	ldrh	r3, [r3, #10]
 8008c06:	461a      	mov	r2, r3
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	895b      	ldrh	r3, [r3, #10]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <find_volume+0x22c>
 8008c14:	230d      	movs	r3, #13
 8008c16:	e12b      	b.n	8008e70 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	3330      	adds	r3, #48	; 0x30
 8008c1c:	3311      	adds	r3, #17
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe fcc6 	bl	80075b0 <ld_word>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	891b      	ldrh	r3, [r3, #8]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <find_volume+0x252>
 8008c3a:	230d      	movs	r3, #13
 8008c3c:	e118      	b.n	8008e70 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	3330      	adds	r3, #48	; 0x30
 8008c42:	3313      	adds	r3, #19
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe fcb3 	bl	80075b0 <ld_word>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <find_volume+0x276>
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	3330      	adds	r3, #48	; 0x30
 8008c58:	3320      	adds	r3, #32
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fcc0 	bl	80075e0 <ld_dword>
 8008c60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	3330      	adds	r3, #48	; 0x30
 8008c66:	330e      	adds	r3, #14
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fca1 	bl	80075b0 <ld_word>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <find_volume+0x290>
 8008c78:	230d      	movs	r3, #13
 8008c7a:	e0f9      	b.n	8008e70 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c80:	4413      	add	r3, r2
 8008c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c84:	8912      	ldrh	r2, [r2, #8]
 8008c86:	0912      	lsrs	r2, r2, #4
 8008c88:	b292      	uxth	r2, r2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d201      	bcs.n	8008c9a <find_volume+0x2ae>
 8008c96:	230d      	movs	r3, #13
 8008c98:	e0ea      	b.n	8008e70 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca2:	8952      	ldrh	r2, [r2, #10]
 8008ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <find_volume+0x2cc>
 8008cb0:	230d      	movs	r3, #13
 8008cb2:	e0dd      	b.n	8008e70 <find_volume+0x484>
 8008cb4:	2000027c 	.word	0x2000027c
		fmt = FS_FAT32;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d802      	bhi.n	8008cce <find_volume+0x2e2>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d802      	bhi.n	8008cde <find_volume+0x2f2>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	1c9a      	adds	r2, r3, #2
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cea:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf0:	441a      	add	r2, r3
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008cf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	441a      	add	r2, r3
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008d00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d11e      	bne.n	8008d46 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	3330      	adds	r3, #48	; 0x30
 8008d0c:	332a      	adds	r3, #42	; 0x2a
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fc4e 	bl	80075b0 <ld_word>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <find_volume+0x332>
 8008d1a:	230d      	movs	r3, #13
 8008d1c:	e0a8      	b.n	8008e70 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	891b      	ldrh	r3, [r3, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <find_volume+0x33e>
 8008d26:	230d      	movs	r3, #13
 8008d28:	e0a2      	b.n	8008e70 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	3330      	adds	r3, #48	; 0x30
 8008d2e:	332c      	adds	r3, #44	; 0x2c
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fc55 	bl	80075e0 <ld_dword>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	647b      	str	r3, [r7, #68]	; 0x44
 8008d44:	e01f      	b.n	8008d86 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	891b      	ldrh	r3, [r3, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <find_volume+0x366>
 8008d4e:	230d      	movs	r3, #13
 8008d50:	e08e      	b.n	8008e70 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d58:	441a      	add	r2, r3
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d103      	bne.n	8008d6e <find_volume+0x382>
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	e00a      	b.n	8008d84 <find_volume+0x398>
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	4613      	mov	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	4413      	add	r3, r2
 8008d78:	085a      	lsrs	r2, r3, #1
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d84:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d90:	0a5b      	lsrs	r3, r3, #9
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d201      	bcs.n	8008d9a <find_volume+0x3ae>
 8008d96:	230d      	movs	r3, #13
 8008d98:	e06a      	b.n	8008e70 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008da0:	611a      	str	r2, [r3, #16]
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	2280      	movs	r2, #128	; 0x80
 8008dae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d149      	bne.n	8008e4c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	3330      	adds	r3, #48	; 0x30
 8008dbc:	3330      	adds	r3, #48	; 0x30
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fbf6 	bl	80075b0 <ld_word>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d140      	bne.n	8008e4c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dcc:	3301      	adds	r3, #1
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dd2:	f7fe fe9d 	bl	8007b10 <move_window>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d137      	bne.n	8008e4c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	2200      	movs	r2, #0
 8008de0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	3330      	adds	r3, #48	; 0x30
 8008de6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fbe0 	bl	80075b0 <ld_word>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d127      	bne.n	8008e4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	3330      	adds	r3, #48	; 0x30
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fe fbed 	bl	80075e0 <ld_dword>
 8008e06:	4603      	mov	r3, r0
 8008e08:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <find_volume+0x48c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d11e      	bne.n	8008e4c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	3330      	adds	r3, #48	; 0x30
 8008e12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fbe2 	bl	80075e0 <ld_dword>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	4a17      	ldr	r2, [pc, #92]	; (8008e7c <find_volume+0x490>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d113      	bne.n	8008e4c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	3330      	adds	r3, #48	; 0x30
 8008e28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fbd7 	bl	80075e0 <ld_dword>
 8008e32:	4602      	mov	r2, r0
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	3330      	adds	r3, #48	; 0x30
 8008e3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fbcd 	bl	80075e0 <ld_dword>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e54:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <find_volume+0x494>)
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <find_volume+0x494>)
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <find_volume+0x494>)
 8008e62:	881a      	ldrh	r2, [r3, #0]
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e6a:	f7fe fde9 	bl	8007a40 <clear_lock>
#endif
	return FR_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3758      	adds	r7, #88	; 0x58
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	41615252 	.word	0x41615252
 8008e7c:	61417272 	.word	0x61417272
 8008e80:	20000280 	.word	0x20000280

08008e84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008e8e:	2309      	movs	r3, #9
 8008e90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01c      	beq.n	8008ed2 <validate+0x4e>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d018      	beq.n	8008ed2 <validate+0x4e>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d013      	beq.n	8008ed2 <validate+0x4e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	889a      	ldrh	r2, [r3, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	88db      	ldrh	r3, [r3, #6]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d10c      	bne.n	8008ed2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	785b      	ldrb	r3, [r3, #1]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fad8 	bl	8007474 <disk_status>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <validate+0x4e>
			res = FR_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <validate+0x5a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	e000      	b.n	8008ee0 <validate+0x5c>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	6013      	str	r3, [r2, #0]
	return res;
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f02:	f107 0310 	add.w	r3, r7, #16
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff fcd5 	bl	80088b6 <get_ldnumber>
 8008f0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da01      	bge.n	8008f18 <f_mount+0x28>
 8008f14:	230b      	movs	r3, #11
 8008f16:	e02b      	b.n	8008f70 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f18:	4a17      	ldr	r2, [pc, #92]	; (8008f78 <f_mount+0x88>)
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f28:	69b8      	ldr	r0, [r7, #24]
 8008f2a:	f7fe fd89 	bl	8007a40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2200      	movs	r2, #0
 8008f32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	490d      	ldr	r1, [pc, #52]	; (8008f78 <f_mount+0x88>)
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <f_mount+0x66>
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d001      	beq.n	8008f5a <f_mount+0x6a>
 8008f56:	2300      	movs	r3, #0
 8008f58:	e00a      	b.n	8008f70 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f5a:	f107 010c 	add.w	r1, r7, #12
 8008f5e:	f107 0308 	add.w	r3, r7, #8
 8008f62:	2200      	movs	r2, #0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7ff fd41 	bl	80089ec <find_volume>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	2000027c 	.word	0x2000027c

08008f7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b098      	sub	sp, #96	; 0x60
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <f_open+0x18>
 8008f90:	2309      	movs	r3, #9
 8008f92:	e1ad      	b.n	80092f0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f9a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008f9c:	79fa      	ldrb	r2, [r7, #7]
 8008f9e:	f107 0110 	add.w	r1, r7, #16
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff fd20 	bl	80089ec <find_volume>
 8008fac:	4603      	mov	r3, r0
 8008fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f040 8191 	bne.w	80092de <f_open+0x362>
		dj.obj.fs = fs;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	f107 0314 	add.w	r3, r7, #20
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fc03 	bl	80087d4 <follow_path>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d11a      	bne.n	8009012 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008fdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fe0:	b25b      	sxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	da03      	bge.n	8008fee <f_open+0x72>
				res = FR_INVALID_NAME;
 8008fe6:	2306      	movs	r3, #6
 8008fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fec:	e011      	b.n	8009012 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	f023 0301 	bic.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bf14      	ite	ne
 8008ff8:	2301      	movne	r3, #1
 8008ffa:	2300      	moveq	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	f107 0314 	add.w	r3, r7, #20
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fbd2 	bl	80077b0 <chk_lock>
 800900c:	4603      	mov	r3, r0
 800900e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	f003 031c 	and.w	r3, r3, #28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d07f      	beq.n	800911c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800901c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009020:	2b00      	cmp	r3, #0
 8009022:	d017      	beq.n	8009054 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009028:	2b04      	cmp	r3, #4
 800902a:	d10e      	bne.n	800904a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800902c:	f7fe fc1c 	bl	8007868 <enq_lock>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d006      	beq.n	8009044 <f_open+0xc8>
 8009036:	f107 0314 	add.w	r3, r7, #20
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fb03 	bl	8008646 <dir_register>
 8009040:	4603      	mov	r3, r0
 8009042:	e000      	b.n	8009046 <f_open+0xca>
 8009044:	2312      	movs	r3, #18
 8009046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	f043 0308 	orr.w	r3, r3, #8
 8009050:	71fb      	strb	r3, [r7, #7]
 8009052:	e010      	b.n	8009076 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009054:	7ebb      	ldrb	r3, [r7, #26]
 8009056:	f003 0311 	and.w	r3, r3, #17
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <f_open+0xea>
					res = FR_DENIED;
 800905e:	2307      	movs	r3, #7
 8009060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009064:	e007      	b.n	8009076 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <f_open+0xfa>
 8009070:	2308      	movs	r3, #8
 8009072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907a:	2b00      	cmp	r3, #0
 800907c:	d168      	bne.n	8009150 <f_open+0x1d4>
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d063      	beq.n	8009150 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009088:	f7fd fcba 	bl	8006a00 <get_fattime>
 800908c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009090:	330e      	adds	r3, #14
 8009092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fae1 	bl	800765c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	3316      	adds	r3, #22
 800909e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fadb 	bl	800765c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	330b      	adds	r3, #11
 80090aa:	2220      	movs	r2, #32
 80090ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff fa32 	bl	800851e <ld_clust>
 80090ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80090c0:	2200      	movs	r2, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fa4a 	bl	800855c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80090c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ca:	331c      	adds	r3, #28
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fac4 	bl	800765c <st_dword>
					fs->wflag = 1;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	2201      	movs	r2, #1
 80090d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80090da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d037      	beq.n	8009150 <f_open+0x1d4>
						dw = fs->winsect;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80090e6:	f107 0314 	add.w	r3, r7, #20
 80090ea:	2200      	movs	r2, #0
 80090ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe ff5d 	bl	8007fae <remove_chain>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80090fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d126      	bne.n	8009150 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fd02 	bl	8007b10 <move_window>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009116:	3a01      	subs	r2, #1
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	e019      	b.n	8009150 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800911c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d115      	bne.n	8009150 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009124:	7ebb      	ldrb	r3, [r7, #26]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <f_open+0x1ba>
					res = FR_NO_FILE;
 800912e:	2304      	movs	r3, #4
 8009130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009134:	e00c      	b.n	8009150 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <f_open+0x1d4>
 8009140:	7ebb      	ldrb	r3, [r7, #26]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <f_open+0x1d4>
						res = FR_DENIED;
 800914a:	2307      	movs	r3, #7
 800914c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009154:	2b00      	cmp	r3, #0
 8009156:	d128      	bne.n	80091aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009168:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	bf14      	ite	ne
 8009182:	2301      	movne	r3, #1
 8009184:	2300      	moveq	r3, #0
 8009186:	b2db      	uxtb	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	f107 0314 	add.w	r3, r7, #20
 800918e:	4611      	mov	r1, r2
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fb8b 	bl	80078ac <inc_lock>
 8009196:	4602      	mov	r2, r0
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <f_open+0x22e>
 80091a4:	2302      	movs	r3, #2
 80091a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80091aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f040 8095 	bne.w	80092de <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff f9af 	bl	800851e <ld_clust>
 80091c0:	4602      	mov	r2, r0
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	331c      	adds	r3, #28
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe fa08 	bl	80075e0 <ld_dword>
 80091d0:	4602      	mov	r2, r0
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	88da      	ldrh	r2, [r3, #6]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	79fa      	ldrb	r2, [r7, #7]
 80091ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3330      	adds	r3, #48	; 0x30
 8009206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800920a:	2100      	movs	r1, #0
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fa72 	bl	80076f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d060      	beq.n	80092de <f_open+0x362>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d05c      	beq.n	80092de <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	895b      	ldrh	r3, [r3, #10]
 8009230:	025b      	lsls	r3, r3, #9
 8009232:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	657b      	str	r3, [r7, #84]	; 0x54
 8009240:	e016      	b.n	8009270 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fd1d 	bl	8007c86 <get_fat>
 800924c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800924e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009250:	2b01      	cmp	r3, #1
 8009252:	d802      	bhi.n	800925a <f_open+0x2de>
 8009254:	2302      	movs	r3, #2
 8009256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800925a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d102      	bne.n	8009268 <f_open+0x2ec>
 8009262:	2301      	movs	r3, #1
 8009264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009268:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800926a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	657b      	str	r3, [r7, #84]	; 0x54
 8009270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009274:	2b00      	cmp	r3, #0
 8009276:	d103      	bne.n	8009280 <f_open+0x304>
 8009278:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800927a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927c:	429a      	cmp	r2, r3
 800927e:	d8e0      	bhi.n	8009242 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009284:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800928a:	2b00      	cmp	r3, #0
 800928c:	d127      	bne.n	80092de <f_open+0x362>
 800928e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009294:	2b00      	cmp	r3, #0
 8009296:	d022      	beq.n	80092de <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe fcd3 	bl	8007c48 <clust2sect>
 80092a2:	6478      	str	r0, [r7, #68]	; 0x44
 80092a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <f_open+0x336>
						res = FR_INT_ERR;
 80092aa:	2302      	movs	r3, #2
 80092ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092b0:	e015      	b.n	80092de <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80092b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b4:	0a5a      	lsrs	r2, r3, #9
 80092b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b8:	441a      	add	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	7858      	ldrb	r0, [r3, #1]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a1a      	ldr	r2, [r3, #32]
 80092cc:	2301      	movs	r3, #1
 80092ce:	f7fe f911 	bl	80074f4 <disk_read>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <f_open+0x362>
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80092de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <f_open+0x370>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80092ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3760      	adds	r7, #96	; 0x60
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08c      	sub	sp, #48	; 0x30
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f107 0210 	add.w	r2, r7, #16
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7ff fdb3 	bl	8008e84 <validate>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009328:	2b00      	cmp	r3, #0
 800932a:	d107      	bne.n	800933c <f_write+0x44>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	7d5b      	ldrb	r3, [r3, #21]
 8009330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <f_write+0x4a>
 800933c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009340:	e14b      	b.n	80095da <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	7d1b      	ldrb	r3, [r3, #20]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <f_write+0x5a>
 800934e:	2307      	movs	r3, #7
 8009350:	e143      	b.n	80095da <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699a      	ldr	r2, [r3, #24]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	429a      	cmp	r2, r3
 8009360:	f080 812d 	bcs.w	80095be <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	43db      	mvns	r3, r3
 800936a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800936c:	e127      	b.n	80095be <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	2b00      	cmp	r3, #0
 8009378:	f040 80e3 	bne.w	8009542 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	0a5b      	lsrs	r3, r3, #9
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	8952      	ldrh	r2, [r2, #10]
 8009386:	3a01      	subs	r2, #1
 8009388:	4013      	ands	r3, r2
 800938a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d143      	bne.n	800941a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10c      	bne.n	80093b4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d11a      	bne.n	80093dc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fe64 	bl	8008078 <create_chain>
 80093b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80093b2:	e013      	b.n	80093dc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d007      	beq.n	80093cc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	4619      	mov	r1, r3
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7fe fef0 	bl	80081a8 <clmt_clust>
 80093c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80093ca:	e007      	b.n	80093dc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f7fe fe4f 	bl	8008078 <create_chain>
 80093da:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80f2 	beq.w	80095c8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d104      	bne.n	80093f4 <f_write+0xfc>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2202      	movs	r2, #2
 80093ee:	755a      	strb	r2, [r3, #21]
 80093f0:	2302      	movs	r3, #2
 80093f2:	e0f2      	b.n	80095da <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d104      	bne.n	8009406 <f_write+0x10e>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	755a      	strb	r2, [r3, #21]
 8009402:	2301      	movs	r3, #1
 8009404:	e0e9      	b.n	80095da <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <f_write+0x122>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009418:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	7d1b      	ldrb	r3, [r3, #20]
 800941e:	b25b      	sxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	da18      	bge.n	8009456 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	7858      	ldrb	r0, [r3, #1]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6a1a      	ldr	r2, [r3, #32]
 8009432:	2301      	movs	r3, #1
 8009434:	f7fe f87e 	bl	8007534 <disk_write>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <f_write+0x150>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	755a      	strb	r2, [r3, #21]
 8009444:	2301      	movs	r3, #1
 8009446:	e0c8      	b.n	80095da <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	7d1b      	ldrb	r3, [r3, #20]
 800944c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009450:	b2da      	uxtb	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f7fe fbf2 	bl	8007c48 <clust2sect>
 8009464:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d104      	bne.n	8009476 <f_write+0x17e>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2202      	movs	r2, #2
 8009470:	755a      	strb	r2, [r3, #21]
 8009472:	2302      	movs	r3, #2
 8009474:	e0b1      	b.n	80095da <f_write+0x2e2>
			sect += csect;
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	4413      	add	r3, r2
 800947c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	0a5b      	lsrs	r3, r3, #9
 8009482:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d03c      	beq.n	8009504 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	4413      	add	r3, r2
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	8952      	ldrh	r2, [r2, #10]
 8009494:	4293      	cmp	r3, r2
 8009496:	d905      	bls.n	80094a4 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	895b      	ldrh	r3, [r3, #10]
 800949c:	461a      	mov	r2, r3
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	7858      	ldrb	r0, [r3, #1]
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	69f9      	ldr	r1, [r7, #28]
 80094ae:	f7fe f841 	bl	8007534 <disk_write>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <f_write+0x1ca>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	755a      	strb	r2, [r3, #21]
 80094be:	2301      	movs	r3, #1
 80094c0:	e08b      	b.n	80095da <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1a      	ldr	r2, [r3, #32]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	6a3a      	ldr	r2, [r7, #32]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d915      	bls.n	80094fc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	025b      	lsls	r3, r3, #9
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094e8:	4619      	mov	r1, r3
 80094ea:	f7fe f8e3 	bl	80076b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	7d1b      	ldrb	r3, [r3, #20]
 80094f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	025b      	lsls	r3, r3, #9
 8009500:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009502:	e03f      	b.n	8009584 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	429a      	cmp	r2, r3
 800950c:	d016      	beq.n	800953c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009516:	429a      	cmp	r2, r3
 8009518:	d210      	bcs.n	800953c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	7858      	ldrb	r0, [r3, #1]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009524:	2301      	movs	r3, #1
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	f7fd ffe4 	bl	80074f4 <disk_read>
 800952c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800952e:	2b00      	cmp	r3, #0
 8009530:	d004      	beq.n	800953c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	755a      	strb	r2, [r3, #21]
 8009538:	2301      	movs	r3, #1
 800953a:	e04e      	b.n	80095da <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d901      	bls.n	800955c <f_write+0x264>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956a:	4413      	add	r3, r2
 800956c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800956e:	69f9      	ldr	r1, [r7, #28]
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe f89f 	bl	80076b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	7d1b      	ldrb	r3, [r3, #20]
 800957a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800957e:	b2da      	uxtb	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	4413      	add	r3, r2
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	441a      	add	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	619a      	str	r2, [r3, #24]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	bf38      	it	cc
 80095a4:	461a      	movcc	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	60da      	str	r2, [r3, #12]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	441a      	add	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f47f aed4 	bne.w	800936e <f_write+0x76>
 80095c6:	e000      	b.n	80095ca <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	7d1b      	ldrb	r3, [r3, #20]
 80095ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3730      	adds	r7, #48	; 0x30
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f107 0208 	add.w	r2, r7, #8
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fc46 	bl	8008e84 <validate>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d168      	bne.n	80096d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d062      	beq.n	80096d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	7d1b      	ldrb	r3, [r3, #20]
 8009612:	b25b      	sxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	da15      	bge.n	8009644 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	7858      	ldrb	r0, [r3, #1]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1a      	ldr	r2, [r3, #32]
 8009626:	2301      	movs	r3, #1
 8009628:	f7fd ff84 	bl	8007534 <disk_write>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <f_sync+0x54>
 8009632:	2301      	movs	r3, #1
 8009634:	e04f      	b.n	80096d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7d1b      	ldrb	r3, [r3, #20]
 800963a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963e:	b2da      	uxtb	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009644:	f7fd f9dc 	bl	8006a00 <get_fattime>
 8009648:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	4619      	mov	r1, r3
 8009652:	4610      	mov	r0, r2
 8009654:	f7fe fa5c 	bl	8007b10 <move_window>
 8009658:	4603      	mov	r3, r0
 800965a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d138      	bne.n	80096d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	330b      	adds	r3, #11
 800966c:	781a      	ldrb	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	330b      	adds	r3, #11
 8009672:	f042 0220 	orr.w	r2, r2, #32
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	461a      	mov	r2, r3
 8009684:	68f9      	ldr	r1, [r7, #12]
 8009686:	f7fe ff69 	bl	800855c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f103 021c 	add.w	r2, r3, #28
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fd ffe0 	bl	800765c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3316      	adds	r3, #22
 80096a0:	6939      	ldr	r1, [r7, #16]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd ffda 	bl	800765c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3312      	adds	r3, #18
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fd ffb9 	bl	8007626 <st_word>
					fs->wflag = 1;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2201      	movs	r2, #1
 80096b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fa55 	bl	8007b6c <sync_fs>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	7d1b      	ldrb	r3, [r3, #20]
 80096ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff ff7b 	bl	80095e2 <f_sync>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d118      	bne.n	8009728 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f107 0208 	add.w	r2, r7, #8
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fbc0 	bl	8008e84 <validate>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10c      	bne.n	8009728 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe f958 	bl	80079c8 <dec_lock>
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	2b0a      	cmp	r3, #10
 8009742:	d103      	bne.n	800974c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009744:	210d      	movs	r1, #13
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fff3 	bl	8009732 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	db25      	blt.n	80097a4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	60fa      	str	r2, [r7, #12]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	4413      	add	r3, r2
 8009762:	78fa      	ldrb	r2, [r7, #3]
 8009764:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b3c      	cmp	r3, #60	; 0x3c
 800976a:	dd12      	ble.n	8009792 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f103 010c 	add.w	r1, r3, #12
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	f7ff fdbc 	bl	80092f8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	429a      	cmp	r2, r3
 8009786:	d101      	bne.n	800978c <putc_bfd+0x5a>
 8009788:	2300      	movs	r3, #0
 800978a:	e001      	b.n	8009790 <putc_bfd+0x5e>
 800978c:	f04f 33ff 	mov.w	r3, #4294967295
 8009790:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	609a      	str	r2, [r3, #8]
 80097a2:	e000      	b.n	80097a6 <putc_bfd+0x74>
	if (i < 0) return;
 80097a4:	bf00      	nop
}
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	db16      	blt.n	80097ea <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f103 010c 	add.w	r1, r3, #12
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	461a      	mov	r2, r3
 80097cc:	f107 030c 	add.w	r3, r7, #12
 80097d0:	f7ff fd92 	bl	80092f8 <f_write>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d107      	bne.n	80097ea <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d102      	bne.n	80097ea <putc_flush+0x3e>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	e001      	b.n	80097ee <putc_flush+0x42>
	return EOF;
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	605a      	str	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	609a      	str	r2, [r3, #8]
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b580      	push	{r7, lr}
 8009824:	b0a7      	sub	sp, #156	; 0x9c
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800982a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ffe0 	bl	80097f6 <putc_init>

	va_start(arp, fmt);
 8009836:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800983a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800983c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800984c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 81f4 	beq.w	8009c3e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8009856:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800985a:	2b25      	cmp	r3, #37	; 0x25
 800985c:	d008      	beq.n	8009870 <f_printf+0x50>
			putc_bfd(&pb, c);
 800985e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f7ff ff62 	bl	8009732 <putc_bfd>
			continue;
 800986e:	e1e5      	b.n	8009c3c <f_printf+0x41c>
		}
		w = f = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009876:	2300      	movs	r3, #0
 8009878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800987c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800988c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009890:	2b30      	cmp	r3, #48	; 0x30
 8009892:	d10b      	bne.n	80098ac <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800989a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80098aa:	e024      	b.n	80098f6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80098ac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098b0:	2b2d      	cmp	r3, #45	; 0x2d
 80098b2:	d120      	bne.n	80098f6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80098b4:	2302      	movs	r3, #2
 80098b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80098ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80098ca:	e014      	b.n	80098f6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80098cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	461a      	mov	r2, r3
 80098da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098de:	4413      	add	r3, r2
 80098e0:	3b30      	subs	r3, #48	; 0x30
 80098e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80098e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80098f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80098fa:	2b2f      	cmp	r3, #47	; 0x2f
 80098fc:	d903      	bls.n	8009906 <f_printf+0xe6>
 80098fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009902:	2b39      	cmp	r3, #57	; 0x39
 8009904:	d9e2      	bls.n	80098cc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009906:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800990a:	2b6c      	cmp	r3, #108	; 0x6c
 800990c:	d003      	beq.n	8009916 <f_printf+0xf6>
 800990e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009912:	2b4c      	cmp	r3, #76	; 0x4c
 8009914:	d10d      	bne.n	8009932 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009916:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800991a:	f043 0304 	orr.w	r3, r3, #4
 800991e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8009932:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8183 	beq.w	8009c42 <f_printf+0x422>
		d = c;
 800993c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009940:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009944:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009948:	2b60      	cmp	r3, #96	; 0x60
 800994a:	d908      	bls.n	800995e <f_printf+0x13e>
 800994c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009950:	2b7a      	cmp	r3, #122	; 0x7a
 8009952:	d804      	bhi.n	800995e <f_printf+0x13e>
 8009954:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009958:	3b20      	subs	r3, #32
 800995a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800995e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009962:	3b42      	subs	r3, #66	; 0x42
 8009964:	2b16      	cmp	r3, #22
 8009966:	f200 8098 	bhi.w	8009a9a <f_printf+0x27a>
 800996a:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <f_printf+0x150>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	08009a7b 	.word	0x08009a7b
 8009974:	08009a63 	.word	0x08009a63
 8009978:	08009a8b 	.word	0x08009a8b
 800997c:	08009a9b 	.word	0x08009a9b
 8009980:	08009a9b 	.word	0x08009a9b
 8009984:	08009a9b 	.word	0x08009a9b
 8009988:	08009a9b 	.word	0x08009a9b
 800998c:	08009a9b 	.word	0x08009a9b
 8009990:	08009a9b 	.word	0x08009a9b
 8009994:	08009a9b 	.word	0x08009a9b
 8009998:	08009a9b 	.word	0x08009a9b
 800999c:	08009a9b 	.word	0x08009a9b
 80099a0:	08009a9b 	.word	0x08009a9b
 80099a4:	08009a83 	.word	0x08009a83
 80099a8:	08009a9b 	.word	0x08009a9b
 80099ac:	08009a9b 	.word	0x08009a9b
 80099b0:	08009a9b 	.word	0x08009a9b
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	08009a9b 	.word	0x08009a9b
 80099bc:	08009a8b 	.word	0x08009a8b
 80099c0:	08009a9b 	.word	0x08009a9b
 80099c4:	08009a9b 	.word	0x08009a9b
 80099c8:	08009a93 	.word	0x08009a93
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80099cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ce:	1d1a      	adds	r2, r3, #4
 80099d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80099d6:	2300      	movs	r3, #0
 80099d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099dc:	e004      	b.n	80099e8 <f_printf+0x1c8>
 80099de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099e2:	3301      	adds	r3, #1
 80099e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099ee:	4413      	add	r3, r2
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1f3      	bne.n	80099de <f_printf+0x1be>
			if (!(f & 2)) {
 80099f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d11a      	bne.n	8009a38 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8009a02:	e005      	b.n	8009a10 <f_printf+0x1f0>
 8009a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a08:	2120      	movs	r1, #32
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fe91 	bl	8009732 <putc_bfd>
 8009a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d8f0      	bhi.n	8009a04 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8009a22:	e009      	b.n	8009a38 <f_printf+0x218>
 8009a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff fe7d 	bl	8009732 <putc_bfd>
 8009a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f1      	bne.n	8009a24 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009a40:	e005      	b.n	8009a4e <f_printf+0x22e>
 8009a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a46:	2120      	movs	r1, #32
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff fe72 	bl	8009732 <putc_bfd>
 8009a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d8f0      	bhi.n	8009a42 <f_printf+0x222>
			continue;
 8009a60:	e0ec      	b.n	8009c3c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8009a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a64:	1d1a      	adds	r2, r3, #4
 8009a66:	67ba      	str	r2, [r7, #120]	; 0x78
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a70:	4611      	mov	r1, r2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff fe5d 	bl	8009732 <putc_bfd>
 8009a78:	e0e0      	b.n	8009c3c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a80:	e014      	b.n	8009aac <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009a82:	2308      	movs	r3, #8
 8009a84:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a88:	e010      	b.n	8009aac <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009a8a:	230a      	movs	r3, #10
 8009a8c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a90:	e00c      	b.n	8009aac <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009a92:	2310      	movs	r3, #16
 8009a94:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009a98:	e008      	b.n	8009aac <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009a9a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff fe44 	bl	8009732 <putc_bfd>
 8009aaa:	e0c7      	b.n	8009c3c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009aac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <f_printf+0x2a2>
 8009ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aba:	1d1a      	adds	r2, r3, #4
 8009abc:	67ba      	str	r2, [r7, #120]	; 0x78
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	e00c      	b.n	8009adc <f_printf+0x2bc>
 8009ac2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009ac6:	2b44      	cmp	r3, #68	; 0x44
 8009ac8:	d104      	bne.n	8009ad4 <f_printf+0x2b4>
 8009aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009acc:	1d1a      	adds	r2, r3, #4
 8009ace:	67ba      	str	r2, [r7, #120]	; 0x78
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	e003      	b.n	8009adc <f_printf+0x2bc>
 8009ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ad6:	1d1a      	adds	r2, r3, #4
 8009ad8:	67ba      	str	r2, [r7, #120]	; 0x78
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009ae0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009ae4:	2b44      	cmp	r3, #68	; 0x44
 8009ae6:	d10e      	bne.n	8009b06 <f_printf+0x2e6>
 8009ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	da0a      	bge.n	8009b06 <f_printf+0x2e6>
			v = 0 - v;
 8009af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009af4:	425b      	negs	r3, r3
 8009af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009afa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009afe:	f043 0308 	orr.w	r3, r3, #8
 8009b02:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009b0c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b14:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b18:	fb02 f201 	mul.w	r2, r2, r1
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009b22:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009b26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009b32:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009b36:	2b09      	cmp	r3, #9
 8009b38:	d90b      	bls.n	8009b52 <f_printf+0x332>
 8009b3a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009b3e:	2b78      	cmp	r3, #120	; 0x78
 8009b40:	d101      	bne.n	8009b46 <f_printf+0x326>
 8009b42:	2227      	movs	r2, #39	; 0x27
 8009b44:	e000      	b.n	8009b48 <f_printf+0x328>
 8009b46:	2207      	movs	r2, #7
 8009b48:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8009b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009b5c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009b60:	3230      	adds	r2, #48	; 0x30
 8009b62:	b2d2      	uxtb	r2, r2
 8009b64:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8009b68:	440b      	add	r3, r1
 8009b6a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8009b6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <f_printf+0x35e>
 8009b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b7a:	2b1f      	cmp	r3, #31
 8009b7c:	d9c6      	bls.n	8009b0c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8009b7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <f_printf+0x380>
 8009b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009b94:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009b98:	4413      	add	r3, r2
 8009b9a:	222d      	movs	r2, #45	; 0x2d
 8009b9c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8009ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ba8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <f_printf+0x398>
 8009bb4:	2330      	movs	r3, #48	; 0x30
 8009bb6:	e000      	b.n	8009bba <f_printf+0x39a>
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009bbe:	e007      	b.n	8009bd0 <f_printf+0x3b0>
 8009bc0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff fdb1 	bl	8009732 <putc_bfd>
 8009bd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d108      	bne.n	8009bee <f_printf+0x3ce>
 8009bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009be6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d8e8      	bhi.n	8009bc0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8009bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bf8:	f107 020c 	add.w	r2, r7, #12
 8009bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c00:	4413      	add	r3, r2
 8009c02:	781a      	ldrb	r2, [r3, #0]
 8009c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff fd91 	bl	8009732 <putc_bfd>
		} while (i);
 8009c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1ea      	bne.n	8009bee <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8009c18:	e007      	b.n	8009c2a <f_printf+0x40a>
 8009c1a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff fd84 	bl	8009732 <putc_bfd>
 8009c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c34:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d8ee      	bhi.n	8009c1a <f_printf+0x3fa>
		c = *fmt++;
 8009c3c:	e5fe      	b.n	800983c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009c3e:	bf00      	nop
 8009c40:	e000      	b.n	8009c44 <f_printf+0x424>
		if (!c) break;
 8009c42:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff fdaf 	bl	80097ac <putc_flush>
 8009c4e:	4603      	mov	r3, r0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	379c      	adds	r7, #156	; 0x9c
 8009c54:	46bd      	mov	sp, r7
 8009c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c5a:	b003      	add	sp, #12
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop

08009c60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c76:	4b1f      	ldr	r3, [pc, #124]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009c78:	7a5b      	ldrb	r3, [r3, #9]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d131      	bne.n	8009ce4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c80:	4b1c      	ldr	r3, [pc, #112]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009c82:	7a5b      	ldrb	r3, [r3, #9]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	461a      	mov	r2, r3
 8009c88:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c8e:	4b19      	ldr	r3, [pc, #100]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009c90:	7a5b      	ldrb	r3, [r3, #9]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	4a17      	ldr	r2, [pc, #92]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c9e:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009ca0:	7a5b      	ldrb	r3, [r3, #9]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009ca8:	4413      	add	r3, r2
 8009caa:	79fa      	ldrb	r2, [r7, #7]
 8009cac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cae:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009cb0:	7a5b      	ldrb	r3, [r3, #9]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	b2d1      	uxtb	r1, r2
 8009cb8:	4a0e      	ldr	r2, [pc, #56]	; (8009cf4 <FATFS_LinkDriverEx+0x94>)
 8009cba:	7251      	strb	r1, [r2, #9]
 8009cbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cbe:	7dbb      	ldrb	r3, [r7, #22]
 8009cc0:	3330      	adds	r3, #48	; 0x30
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	223a      	movs	r2, #58	; 0x3a
 8009cce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	3302      	adds	r3, #2
 8009cd4:	222f      	movs	r2, #47	; 0x2f
 8009cd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	3303      	adds	r3, #3
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	200002a4 	.word	0x200002a4

08009cf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d02:	2200      	movs	r2, #0
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff ffaa 	bl	8009c60 <FATFS_LinkDriverEx>
 8009d0c:	4603      	mov	r3, r0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <atof>:
 8009d16:	2100      	movs	r1, #0
 8009d18:	f001 bb00 	b.w	800b31c <strtod>

08009d1c <atoi>:
 8009d1c:	220a      	movs	r2, #10
 8009d1e:	2100      	movs	r1, #0
 8009d20:	f001 bb8c 	b.w	800b43c <strtol>

08009d24 <__errno>:
 8009d24:	4b01      	ldr	r3, [pc, #4]	; (8009d2c <__errno+0x8>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20000054 	.word	0x20000054

08009d30 <__libc_init_array>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	4d0d      	ldr	r5, [pc, #52]	; (8009d68 <__libc_init_array+0x38>)
 8009d34:	4c0d      	ldr	r4, [pc, #52]	; (8009d6c <__libc_init_array+0x3c>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	2600      	movs	r6, #0
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	d109      	bne.n	8009d54 <__libc_init_array+0x24>
 8009d40:	4d0b      	ldr	r5, [pc, #44]	; (8009d70 <__libc_init_array+0x40>)
 8009d42:	4c0c      	ldr	r4, [pc, #48]	; (8009d74 <__libc_init_array+0x44>)
 8009d44:	f004 fa54 	bl	800e1f0 <_init>
 8009d48:	1b64      	subs	r4, r4, r5
 8009d4a:	10a4      	asrs	r4, r4, #2
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	d105      	bne.n	8009d5e <__libc_init_array+0x2e>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d58:	4798      	blx	r3
 8009d5a:	3601      	adds	r6, #1
 8009d5c:	e7ee      	b.n	8009d3c <__libc_init_array+0xc>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	4798      	blx	r3
 8009d64:	3601      	adds	r6, #1
 8009d66:	e7f2      	b.n	8009d4e <__libc_init_array+0x1e>
 8009d68:	08011954 	.word	0x08011954
 8009d6c:	08011954 	.word	0x08011954
 8009d70:	08011954 	.word	0x08011954
 8009d74:	08011958 	.word	0x08011958

08009d78 <memset>:
 8009d78:	4402      	add	r2, r0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d100      	bne.n	8009d82 <memset+0xa>
 8009d80:	4770      	bx	lr
 8009d82:	f803 1b01 	strb.w	r1, [r3], #1
 8009d86:	e7f9      	b.n	8009d7c <memset+0x4>

08009d88 <__cvt>:
 8009d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8c:	ec55 4b10 	vmov	r4, r5, d0
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	460e      	mov	r6, r1
 8009d94:	4619      	mov	r1, r3
 8009d96:	462b      	mov	r3, r5
 8009d98:	bfbb      	ittet	lt
 8009d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d9e:	461d      	movlt	r5, r3
 8009da0:	2300      	movge	r3, #0
 8009da2:	232d      	movlt	r3, #45	; 0x2d
 8009da4:	700b      	strb	r3, [r1, #0]
 8009da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009da8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009dac:	4691      	mov	r9, r2
 8009dae:	f023 0820 	bic.w	r8, r3, #32
 8009db2:	bfbc      	itt	lt
 8009db4:	4622      	movlt	r2, r4
 8009db6:	4614      	movlt	r4, r2
 8009db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dbc:	d005      	beq.n	8009dca <__cvt+0x42>
 8009dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dc2:	d100      	bne.n	8009dc6 <__cvt+0x3e>
 8009dc4:	3601      	adds	r6, #1
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	e000      	b.n	8009dcc <__cvt+0x44>
 8009dca:	2103      	movs	r1, #3
 8009dcc:	ab03      	add	r3, sp, #12
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	ab02      	add	r3, sp, #8
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	ec45 4b10 	vmov	d0, r4, r5
 8009dd8:	4653      	mov	r3, sl
 8009dda:	4632      	mov	r2, r6
 8009ddc:	f001 fbc4 	bl	800b568 <_dtoa_r>
 8009de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009de4:	4607      	mov	r7, r0
 8009de6:	d102      	bne.n	8009dee <__cvt+0x66>
 8009de8:	f019 0f01 	tst.w	r9, #1
 8009dec:	d022      	beq.n	8009e34 <__cvt+0xac>
 8009dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009df2:	eb07 0906 	add.w	r9, r7, r6
 8009df6:	d110      	bne.n	8009e1a <__cvt+0x92>
 8009df8:	783b      	ldrb	r3, [r7, #0]
 8009dfa:	2b30      	cmp	r3, #48	; 0x30
 8009dfc:	d10a      	bne.n	8009e14 <__cvt+0x8c>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2300      	movs	r3, #0
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7f6 fe77 	bl	8000af8 <__aeabi_dcmpeq>
 8009e0a:	b918      	cbnz	r0, 8009e14 <__cvt+0x8c>
 8009e0c:	f1c6 0601 	rsb	r6, r6, #1
 8009e10:	f8ca 6000 	str.w	r6, [sl]
 8009e14:	f8da 3000 	ldr.w	r3, [sl]
 8009e18:	4499      	add	r9, r3
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4620      	mov	r0, r4
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7f6 fe69 	bl	8000af8 <__aeabi_dcmpeq>
 8009e26:	b108      	cbz	r0, 8009e2c <__cvt+0xa4>
 8009e28:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e2c:	2230      	movs	r2, #48	; 0x30
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	454b      	cmp	r3, r9
 8009e32:	d307      	bcc.n	8009e44 <__cvt+0xbc>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e38:	1bdb      	subs	r3, r3, r7
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	b004      	add	sp, #16
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e44:	1c59      	adds	r1, r3, #1
 8009e46:	9103      	str	r1, [sp, #12]
 8009e48:	701a      	strb	r2, [r3, #0]
 8009e4a:	e7f0      	b.n	8009e2e <__cvt+0xa6>

08009e4c <__exponent>:
 8009e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2900      	cmp	r1, #0
 8009e52:	bfb8      	it	lt
 8009e54:	4249      	neglt	r1, r1
 8009e56:	f803 2b02 	strb.w	r2, [r3], #2
 8009e5a:	bfb4      	ite	lt
 8009e5c:	222d      	movlt	r2, #45	; 0x2d
 8009e5e:	222b      	movge	r2, #43	; 0x2b
 8009e60:	2909      	cmp	r1, #9
 8009e62:	7042      	strb	r2, [r0, #1]
 8009e64:	dd2a      	ble.n	8009ebc <__exponent+0x70>
 8009e66:	f10d 0407 	add.w	r4, sp, #7
 8009e6a:	46a4      	mov	ip, r4
 8009e6c:	270a      	movs	r7, #10
 8009e6e:	46a6      	mov	lr, r4
 8009e70:	460a      	mov	r2, r1
 8009e72:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e76:	fb07 1516 	mls	r5, r7, r6, r1
 8009e7a:	3530      	adds	r5, #48	; 0x30
 8009e7c:	2a63      	cmp	r2, #99	; 0x63
 8009e7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e86:	4631      	mov	r1, r6
 8009e88:	dcf1      	bgt.n	8009e6e <__exponent+0x22>
 8009e8a:	3130      	adds	r1, #48	; 0x30
 8009e8c:	f1ae 0502 	sub.w	r5, lr, #2
 8009e90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e94:	1c44      	adds	r4, r0, #1
 8009e96:	4629      	mov	r1, r5
 8009e98:	4561      	cmp	r1, ip
 8009e9a:	d30a      	bcc.n	8009eb2 <__exponent+0x66>
 8009e9c:	f10d 0209 	add.w	r2, sp, #9
 8009ea0:	eba2 020e 	sub.w	r2, r2, lr
 8009ea4:	4565      	cmp	r5, ip
 8009ea6:	bf88      	it	hi
 8009ea8:	2200      	movhi	r2, #0
 8009eaa:	4413      	add	r3, r2
 8009eac:	1a18      	subs	r0, r3, r0
 8009eae:	b003      	add	sp, #12
 8009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009eba:	e7ed      	b.n	8009e98 <__exponent+0x4c>
 8009ebc:	2330      	movs	r3, #48	; 0x30
 8009ebe:	3130      	adds	r1, #48	; 0x30
 8009ec0:	7083      	strb	r3, [r0, #2]
 8009ec2:	70c1      	strb	r1, [r0, #3]
 8009ec4:	1d03      	adds	r3, r0, #4
 8009ec6:	e7f1      	b.n	8009eac <__exponent+0x60>

08009ec8 <_printf_float>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	ed2d 8b02 	vpush	{d8}
 8009ed0:	b08d      	sub	sp, #52	; 0x34
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ed8:	4616      	mov	r6, r2
 8009eda:	461f      	mov	r7, r3
 8009edc:	4605      	mov	r5, r0
 8009ede:	f002 fc9f 	bl	800c820 <_localeconv_r>
 8009ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	f7f6 f984 	bl	80001f4 <strlen>
 8009eec:	2300      	movs	r3, #0
 8009eee:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	9305      	str	r3, [sp, #20]
 8009ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009efc:	3307      	adds	r3, #7
 8009efe:	f023 0307 	bic.w	r3, r3, #7
 8009f02:	f103 0208 	add.w	r2, r3, #8
 8009f06:	f8c8 2000 	str.w	r2, [r8]
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f1a:	9307      	str	r3, [sp, #28]
 8009f1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f20:	ee08 0a10 	vmov	s16, r0
 8009f24:	4b9f      	ldr	r3, [pc, #636]	; (800a1a4 <_printf_float+0x2dc>)
 8009f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2e:	f7f6 fe15 	bl	8000b5c <__aeabi_dcmpun>
 8009f32:	bb88      	cbnz	r0, 8009f98 <_printf_float+0xd0>
 8009f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f38:	4b9a      	ldr	r3, [pc, #616]	; (800a1a4 <_printf_float+0x2dc>)
 8009f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3e:	f7f6 fdef 	bl	8000b20 <__aeabi_dcmple>
 8009f42:	bb48      	cbnz	r0, 8009f98 <_printf_float+0xd0>
 8009f44:	2200      	movs	r2, #0
 8009f46:	2300      	movs	r3, #0
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	f7f6 fdde 	bl	8000b0c <__aeabi_dcmplt>
 8009f50:	b110      	cbz	r0, 8009f58 <_printf_float+0x90>
 8009f52:	232d      	movs	r3, #45	; 0x2d
 8009f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f58:	4b93      	ldr	r3, [pc, #588]	; (800a1a8 <_printf_float+0x2e0>)
 8009f5a:	4894      	ldr	r0, [pc, #592]	; (800a1ac <_printf_float+0x2e4>)
 8009f5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f60:	bf94      	ite	ls
 8009f62:	4698      	movls	r8, r3
 8009f64:	4680      	movhi	r8, r0
 8009f66:	2303      	movs	r3, #3
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	f023 0204 	bic.w	r2, r3, #4
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	f04f 0900 	mov.w	r9, #0
 8009f76:	9700      	str	r7, [sp, #0]
 8009f78:	4633      	mov	r3, r6
 8009f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4628      	mov	r0, r5
 8009f80:	f000 f9d8 	bl	800a334 <_printf_common>
 8009f84:	3001      	adds	r0, #1
 8009f86:	f040 8090 	bne.w	800a0aa <_printf_float+0x1e2>
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	b00d      	add	sp, #52	; 0x34
 8009f90:	ecbd 8b02 	vpop	{d8}
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	4642      	mov	r2, r8
 8009f9a:	464b      	mov	r3, r9
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 fddc 	bl	8000b5c <__aeabi_dcmpun>
 8009fa4:	b140      	cbz	r0, 8009fb8 <_printf_float+0xf0>
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bfbc      	itt	lt
 8009fac:	232d      	movlt	r3, #45	; 0x2d
 8009fae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fb2:	487f      	ldr	r0, [pc, #508]	; (800a1b0 <_printf_float+0x2e8>)
 8009fb4:	4b7f      	ldr	r3, [pc, #508]	; (800a1b4 <_printf_float+0x2ec>)
 8009fb6:	e7d1      	b.n	8009f5c <_printf_float+0x94>
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009fbe:	9206      	str	r2, [sp, #24]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	d13f      	bne.n	800a044 <_printf_float+0x17c>
 8009fc4:	2306      	movs	r3, #6
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	9b05      	ldr	r3, [sp, #20]
 8009fca:	6861      	ldr	r1, [r4, #4]
 8009fcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	ab0a      	add	r3, sp, #40	; 0x28
 8009fd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009fda:	ab09      	add	r3, sp, #36	; 0x24
 8009fdc:	ec49 8b10 	vmov	d0, r8, r9
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	6022      	str	r2, [r4, #0]
 8009fe4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7ff fecd 	bl	8009d88 <__cvt>
 8009fee:	9b06      	ldr	r3, [sp, #24]
 8009ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ff2:	2b47      	cmp	r3, #71	; 0x47
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	d108      	bne.n	800a00a <_printf_float+0x142>
 8009ff8:	1cc8      	adds	r0, r1, #3
 8009ffa:	db02      	blt.n	800a002 <_printf_float+0x13a>
 8009ffc:	6863      	ldr	r3, [r4, #4]
 8009ffe:	4299      	cmp	r1, r3
 800a000:	dd41      	ble.n	800a086 <_printf_float+0x1be>
 800a002:	f1ab 0b02 	sub.w	fp, fp, #2
 800a006:	fa5f fb8b 	uxtb.w	fp, fp
 800a00a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a00e:	d820      	bhi.n	800a052 <_printf_float+0x18a>
 800a010:	3901      	subs	r1, #1
 800a012:	465a      	mov	r2, fp
 800a014:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a018:	9109      	str	r1, [sp, #36]	; 0x24
 800a01a:	f7ff ff17 	bl	8009e4c <__exponent>
 800a01e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a020:	1813      	adds	r3, r2, r0
 800a022:	2a01      	cmp	r2, #1
 800a024:	4681      	mov	r9, r0
 800a026:	6123      	str	r3, [r4, #16]
 800a028:	dc02      	bgt.n	800a030 <_printf_float+0x168>
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	07d2      	lsls	r2, r2, #31
 800a02e:	d501      	bpl.n	800a034 <_printf_float+0x16c>
 800a030:	3301      	adds	r3, #1
 800a032:	6123      	str	r3, [r4, #16]
 800a034:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d09c      	beq.n	8009f76 <_printf_float+0xae>
 800a03c:	232d      	movs	r3, #45	; 0x2d
 800a03e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a042:	e798      	b.n	8009f76 <_printf_float+0xae>
 800a044:	9a06      	ldr	r2, [sp, #24]
 800a046:	2a47      	cmp	r2, #71	; 0x47
 800a048:	d1be      	bne.n	8009fc8 <_printf_float+0x100>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1bc      	bne.n	8009fc8 <_printf_float+0x100>
 800a04e:	2301      	movs	r3, #1
 800a050:	e7b9      	b.n	8009fc6 <_printf_float+0xfe>
 800a052:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a056:	d118      	bne.n	800a08a <_printf_float+0x1c2>
 800a058:	2900      	cmp	r1, #0
 800a05a:	6863      	ldr	r3, [r4, #4]
 800a05c:	dd0b      	ble.n	800a076 <_printf_float+0x1ae>
 800a05e:	6121      	str	r1, [r4, #16]
 800a060:	b913      	cbnz	r3, 800a068 <_printf_float+0x1a0>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	07d0      	lsls	r0, r2, #31
 800a066:	d502      	bpl.n	800a06e <_printf_float+0x1a6>
 800a068:	3301      	adds	r3, #1
 800a06a:	440b      	add	r3, r1
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a070:	f04f 0900 	mov.w	r9, #0
 800a074:	e7de      	b.n	800a034 <_printf_float+0x16c>
 800a076:	b913      	cbnz	r3, 800a07e <_printf_float+0x1b6>
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	07d2      	lsls	r2, r2, #31
 800a07c:	d501      	bpl.n	800a082 <_printf_float+0x1ba>
 800a07e:	3302      	adds	r3, #2
 800a080:	e7f4      	b.n	800a06c <_printf_float+0x1a4>
 800a082:	2301      	movs	r3, #1
 800a084:	e7f2      	b.n	800a06c <_printf_float+0x1a4>
 800a086:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08c:	4299      	cmp	r1, r3
 800a08e:	db05      	blt.n	800a09c <_printf_float+0x1d4>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	6121      	str	r1, [r4, #16]
 800a094:	07d8      	lsls	r0, r3, #31
 800a096:	d5ea      	bpl.n	800a06e <_printf_float+0x1a6>
 800a098:	1c4b      	adds	r3, r1, #1
 800a09a:	e7e7      	b.n	800a06c <_printf_float+0x1a4>
 800a09c:	2900      	cmp	r1, #0
 800a09e:	bfd4      	ite	le
 800a0a0:	f1c1 0202 	rsble	r2, r1, #2
 800a0a4:	2201      	movgt	r2, #1
 800a0a6:	4413      	add	r3, r2
 800a0a8:	e7e0      	b.n	800a06c <_printf_float+0x1a4>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	055a      	lsls	r2, r3, #21
 800a0ae:	d407      	bmi.n	800a0c0 <_printf_float+0x1f8>
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b8      	blx	r7
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d12c      	bne.n	800a118 <_printf_float+0x250>
 800a0be:	e764      	b.n	8009f8a <_printf_float+0xc2>
 800a0c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0c4:	f240 80e0 	bls.w	800a288 <_printf_float+0x3c0>
 800a0c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f7f6 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d034      	beq.n	800a142 <_printf_float+0x27a>
 800a0d8:	4a37      	ldr	r2, [pc, #220]	; (800a1b8 <_printf_float+0x2f0>)
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4628      	mov	r0, r5
 800a0e0:	47b8      	blx	r7
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	f43f af51 	beq.w	8009f8a <_printf_float+0xc2>
 800a0e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	db02      	blt.n	800a0f6 <_printf_float+0x22e>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	07d8      	lsls	r0, r3, #31
 800a0f4:	d510      	bpl.n	800a118 <_printf_float+0x250>
 800a0f6:	ee18 3a10 	vmov	r3, s16
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	f43f af41 	beq.w	8009f8a <_printf_float+0xc2>
 800a108:	f04f 0800 	mov.w	r8, #0
 800a10c:	f104 091a 	add.w	r9, r4, #26
 800a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a112:	3b01      	subs	r3, #1
 800a114:	4543      	cmp	r3, r8
 800a116:	dc09      	bgt.n	800a12c <_printf_float+0x264>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	079b      	lsls	r3, r3, #30
 800a11c:	f100 8105 	bmi.w	800a32a <_printf_float+0x462>
 800a120:	68e0      	ldr	r0, [r4, #12]
 800a122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a124:	4298      	cmp	r0, r3
 800a126:	bfb8      	it	lt
 800a128:	4618      	movlt	r0, r3
 800a12a:	e730      	b.n	8009f8e <_printf_float+0xc6>
 800a12c:	2301      	movs	r3, #1
 800a12e:	464a      	mov	r2, r9
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	f43f af27 	beq.w	8009f8a <_printf_float+0xc2>
 800a13c:	f108 0801 	add.w	r8, r8, #1
 800a140:	e7e6      	b.n	800a110 <_printf_float+0x248>
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc39      	bgt.n	800a1bc <_printf_float+0x2f4>
 800a148:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <_printf_float+0x2f0>)
 800a14a:	2301      	movs	r3, #1
 800a14c:	4631      	mov	r1, r6
 800a14e:	4628      	mov	r0, r5
 800a150:	47b8      	blx	r7
 800a152:	3001      	adds	r0, #1
 800a154:	f43f af19 	beq.w	8009f8a <_printf_float+0xc2>
 800a158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a15c:	4313      	orrs	r3, r2
 800a15e:	d102      	bne.n	800a166 <_printf_float+0x29e>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	07d9      	lsls	r1, r3, #31
 800a164:	d5d8      	bpl.n	800a118 <_printf_float+0x250>
 800a166:	ee18 3a10 	vmov	r3, s16
 800a16a:	4652      	mov	r2, sl
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	f43f af09 	beq.w	8009f8a <_printf_float+0xc2>
 800a178:	f04f 0900 	mov.w	r9, #0
 800a17c:	f104 0a1a 	add.w	sl, r4, #26
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	425b      	negs	r3, r3
 800a184:	454b      	cmp	r3, r9
 800a186:	dc01      	bgt.n	800a18c <_printf_float+0x2c4>
 800a188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18a:	e792      	b.n	800a0b2 <_printf_float+0x1ea>
 800a18c:	2301      	movs	r3, #1
 800a18e:	4652      	mov	r2, sl
 800a190:	4631      	mov	r1, r6
 800a192:	4628      	mov	r0, r5
 800a194:	47b8      	blx	r7
 800a196:	3001      	adds	r0, #1
 800a198:	f43f aef7 	beq.w	8009f8a <_printf_float+0xc2>
 800a19c:	f109 0901 	add.w	r9, r9, #1
 800a1a0:	e7ee      	b.n	800a180 <_printf_float+0x2b8>
 800a1a2:	bf00      	nop
 800a1a4:	7fefffff 	.word	0x7fefffff
 800a1a8:	080114a0 	.word	0x080114a0
 800a1ac:	080114a4 	.word	0x080114a4
 800a1b0:	080114ac 	.word	0x080114ac
 800a1b4:	080114a8 	.word	0x080114a8
 800a1b8:	080114b0 	.word	0x080114b0
 800a1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	bfa8      	it	ge
 800a1c4:	461a      	movge	r2, r3
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	4691      	mov	r9, r2
 800a1ca:	dc37      	bgt.n	800a23c <_printf_float+0x374>
 800a1cc:	f04f 0b00 	mov.w	fp, #0
 800a1d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1d4:	f104 021a 	add.w	r2, r4, #26
 800a1d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1da:	9305      	str	r3, [sp, #20]
 800a1dc:	eba3 0309 	sub.w	r3, r3, r9
 800a1e0:	455b      	cmp	r3, fp
 800a1e2:	dc33      	bgt.n	800a24c <_printf_float+0x384>
 800a1e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	db3b      	blt.n	800a264 <_printf_float+0x39c>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	07da      	lsls	r2, r3, #31
 800a1f0:	d438      	bmi.n	800a264 <_printf_float+0x39c>
 800a1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1f4:	9b05      	ldr	r3, [sp, #20]
 800a1f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	eba2 0901 	sub.w	r9, r2, r1
 800a1fe:	4599      	cmp	r9, r3
 800a200:	bfa8      	it	ge
 800a202:	4699      	movge	r9, r3
 800a204:	f1b9 0f00 	cmp.w	r9, #0
 800a208:	dc35      	bgt.n	800a276 <_printf_float+0x3ae>
 800a20a:	f04f 0800 	mov.w	r8, #0
 800a20e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a212:	f104 0a1a 	add.w	sl, r4, #26
 800a216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	eba3 0309 	sub.w	r3, r3, r9
 800a220:	4543      	cmp	r3, r8
 800a222:	f77f af79 	ble.w	800a118 <_printf_float+0x250>
 800a226:	2301      	movs	r3, #1
 800a228:	4652      	mov	r2, sl
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	f43f aeaa 	beq.w	8009f8a <_printf_float+0xc2>
 800a236:	f108 0801 	add.w	r8, r8, #1
 800a23a:	e7ec      	b.n	800a216 <_printf_float+0x34e>
 800a23c:	4613      	mov	r3, r2
 800a23e:	4631      	mov	r1, r6
 800a240:	4642      	mov	r2, r8
 800a242:	4628      	mov	r0, r5
 800a244:	47b8      	blx	r7
 800a246:	3001      	adds	r0, #1
 800a248:	d1c0      	bne.n	800a1cc <_printf_float+0x304>
 800a24a:	e69e      	b.n	8009f8a <_printf_float+0xc2>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	9205      	str	r2, [sp, #20]
 800a254:	47b8      	blx	r7
 800a256:	3001      	adds	r0, #1
 800a258:	f43f ae97 	beq.w	8009f8a <_printf_float+0xc2>
 800a25c:	9a05      	ldr	r2, [sp, #20]
 800a25e:	f10b 0b01 	add.w	fp, fp, #1
 800a262:	e7b9      	b.n	800a1d8 <_printf_float+0x310>
 800a264:	ee18 3a10 	vmov	r3, s16
 800a268:	4652      	mov	r2, sl
 800a26a:	4631      	mov	r1, r6
 800a26c:	4628      	mov	r0, r5
 800a26e:	47b8      	blx	r7
 800a270:	3001      	adds	r0, #1
 800a272:	d1be      	bne.n	800a1f2 <_printf_float+0x32a>
 800a274:	e689      	b.n	8009f8a <_printf_float+0xc2>
 800a276:	9a05      	ldr	r2, [sp, #20]
 800a278:	464b      	mov	r3, r9
 800a27a:	4442      	add	r2, r8
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	d1c1      	bne.n	800a20a <_printf_float+0x342>
 800a286:	e680      	b.n	8009f8a <_printf_float+0xc2>
 800a288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a28a:	2a01      	cmp	r2, #1
 800a28c:	dc01      	bgt.n	800a292 <_printf_float+0x3ca>
 800a28e:	07db      	lsls	r3, r3, #31
 800a290:	d538      	bpl.n	800a304 <_printf_float+0x43c>
 800a292:	2301      	movs	r3, #1
 800a294:	4642      	mov	r2, r8
 800a296:	4631      	mov	r1, r6
 800a298:	4628      	mov	r0, r5
 800a29a:	47b8      	blx	r7
 800a29c:	3001      	adds	r0, #1
 800a29e:	f43f ae74 	beq.w	8009f8a <_printf_float+0xc2>
 800a2a2:	ee18 3a10 	vmov	r3, s16
 800a2a6:	4652      	mov	r2, sl
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f ae6b 	beq.w	8009f8a <_printf_float+0xc2>
 800a2b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f7f6 fc1c 	bl	8000af8 <__aeabi_dcmpeq>
 800a2c0:	b9d8      	cbnz	r0, 800a2fa <_printf_float+0x432>
 800a2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c4:	f108 0201 	add.w	r2, r8, #1
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b8      	blx	r7
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d10e      	bne.n	800a2f2 <_printf_float+0x42a>
 800a2d4:	e659      	b.n	8009f8a <_printf_float+0xc2>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	4652      	mov	r2, sl
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b8      	blx	r7
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f43f ae52 	beq.w	8009f8a <_printf_float+0xc2>
 800a2e6:	f108 0801 	add.w	r8, r8, #1
 800a2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4543      	cmp	r3, r8
 800a2f0:	dcf1      	bgt.n	800a2d6 <_printf_float+0x40e>
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2f8:	e6dc      	b.n	800a0b4 <_printf_float+0x1ec>
 800a2fa:	f04f 0800 	mov.w	r8, #0
 800a2fe:	f104 0a1a 	add.w	sl, r4, #26
 800a302:	e7f2      	b.n	800a2ea <_printf_float+0x422>
 800a304:	2301      	movs	r3, #1
 800a306:	4642      	mov	r2, r8
 800a308:	e7df      	b.n	800a2ca <_printf_float+0x402>
 800a30a:	2301      	movs	r3, #1
 800a30c:	464a      	mov	r2, r9
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	47b8      	blx	r7
 800a314:	3001      	adds	r0, #1
 800a316:	f43f ae38 	beq.w	8009f8a <_printf_float+0xc2>
 800a31a:	f108 0801 	add.w	r8, r8, #1
 800a31e:	68e3      	ldr	r3, [r4, #12]
 800a320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a322:	1a5b      	subs	r3, r3, r1
 800a324:	4543      	cmp	r3, r8
 800a326:	dcf0      	bgt.n	800a30a <_printf_float+0x442>
 800a328:	e6fa      	b.n	800a120 <_printf_float+0x258>
 800a32a:	f04f 0800 	mov.w	r8, #0
 800a32e:	f104 0919 	add.w	r9, r4, #25
 800a332:	e7f4      	b.n	800a31e <_printf_float+0x456>

0800a334 <_printf_common>:
 800a334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a338:	4616      	mov	r6, r2
 800a33a:	4699      	mov	r9, r3
 800a33c:	688a      	ldr	r2, [r1, #8]
 800a33e:	690b      	ldr	r3, [r1, #16]
 800a340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a344:	4293      	cmp	r3, r2
 800a346:	bfb8      	it	lt
 800a348:	4613      	movlt	r3, r2
 800a34a:	6033      	str	r3, [r6, #0]
 800a34c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a350:	4607      	mov	r7, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b10a      	cbz	r2, 800a35a <_printf_common+0x26>
 800a356:	3301      	adds	r3, #1
 800a358:	6033      	str	r3, [r6, #0]
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	0699      	lsls	r1, r3, #26
 800a35e:	bf42      	ittt	mi
 800a360:	6833      	ldrmi	r3, [r6, #0]
 800a362:	3302      	addmi	r3, #2
 800a364:	6033      	strmi	r3, [r6, #0]
 800a366:	6825      	ldr	r5, [r4, #0]
 800a368:	f015 0506 	ands.w	r5, r5, #6
 800a36c:	d106      	bne.n	800a37c <_printf_common+0x48>
 800a36e:	f104 0a19 	add.w	sl, r4, #25
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	6832      	ldr	r2, [r6, #0]
 800a376:	1a9b      	subs	r3, r3, r2
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dc26      	bgt.n	800a3ca <_printf_common+0x96>
 800a37c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a380:	1e13      	subs	r3, r2, #0
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	bf18      	it	ne
 800a386:	2301      	movne	r3, #1
 800a388:	0692      	lsls	r2, r2, #26
 800a38a:	d42b      	bmi.n	800a3e4 <_printf_common+0xb0>
 800a38c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a390:	4649      	mov	r1, r9
 800a392:	4638      	mov	r0, r7
 800a394:	47c0      	blx	r8
 800a396:	3001      	adds	r0, #1
 800a398:	d01e      	beq.n	800a3d8 <_printf_common+0xa4>
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	68e5      	ldr	r5, [r4, #12]
 800a39e:	6832      	ldr	r2, [r6, #0]
 800a3a0:	f003 0306 	and.w	r3, r3, #6
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	bf08      	it	eq
 800a3a8:	1aad      	subeq	r5, r5, r2
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	6922      	ldr	r2, [r4, #16]
 800a3ae:	bf0c      	ite	eq
 800a3b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3b4:	2500      	movne	r5, #0
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	bfc4      	itt	gt
 800a3ba:	1a9b      	subgt	r3, r3, r2
 800a3bc:	18ed      	addgt	r5, r5, r3
 800a3be:	2600      	movs	r6, #0
 800a3c0:	341a      	adds	r4, #26
 800a3c2:	42b5      	cmp	r5, r6
 800a3c4:	d11a      	bne.n	800a3fc <_printf_common+0xc8>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	e008      	b.n	800a3dc <_printf_common+0xa8>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4652      	mov	r2, sl
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	47c0      	blx	r8
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d103      	bne.n	800a3e0 <_printf_common+0xac>
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	e7c6      	b.n	800a372 <_printf_common+0x3e>
 800a3e4:	18e1      	adds	r1, r4, r3
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	2030      	movs	r0, #48	; 0x30
 800a3ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3ee:	4422      	add	r2, r4
 800a3f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3f8:	3302      	adds	r3, #2
 800a3fa:	e7c7      	b.n	800a38c <_printf_common+0x58>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4622      	mov	r2, r4
 800a400:	4649      	mov	r1, r9
 800a402:	4638      	mov	r0, r7
 800a404:	47c0      	blx	r8
 800a406:	3001      	adds	r0, #1
 800a408:	d0e6      	beq.n	800a3d8 <_printf_common+0xa4>
 800a40a:	3601      	adds	r6, #1
 800a40c:	e7d9      	b.n	800a3c2 <_printf_common+0x8e>
	...

0800a410 <_printf_i>:
 800a410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	460c      	mov	r4, r1
 800a416:	4691      	mov	r9, r2
 800a418:	7e27      	ldrb	r7, [r4, #24]
 800a41a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a41c:	2f78      	cmp	r7, #120	; 0x78
 800a41e:	4680      	mov	r8, r0
 800a420:	469a      	mov	sl, r3
 800a422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a426:	d807      	bhi.n	800a438 <_printf_i+0x28>
 800a428:	2f62      	cmp	r7, #98	; 0x62
 800a42a:	d80a      	bhi.n	800a442 <_printf_i+0x32>
 800a42c:	2f00      	cmp	r7, #0
 800a42e:	f000 80d8 	beq.w	800a5e2 <_printf_i+0x1d2>
 800a432:	2f58      	cmp	r7, #88	; 0x58
 800a434:	f000 80a3 	beq.w	800a57e <_printf_i+0x16e>
 800a438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a43c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a440:	e03a      	b.n	800a4b8 <_printf_i+0xa8>
 800a442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a446:	2b15      	cmp	r3, #21
 800a448:	d8f6      	bhi.n	800a438 <_printf_i+0x28>
 800a44a:	a001      	add	r0, pc, #4	; (adr r0, 800a450 <_printf_i+0x40>)
 800a44c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	0800a4bd 	.word	0x0800a4bd
 800a458:	0800a439 	.word	0x0800a439
 800a45c:	0800a439 	.word	0x0800a439
 800a460:	0800a439 	.word	0x0800a439
 800a464:	0800a439 	.word	0x0800a439
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a439 	.word	0x0800a439
 800a470:	0800a439 	.word	0x0800a439
 800a474:	0800a439 	.word	0x0800a439
 800a478:	0800a439 	.word	0x0800a439
 800a47c:	0800a5c9 	.word	0x0800a5c9
 800a480:	0800a4ed 	.word	0x0800a4ed
 800a484:	0800a5ab 	.word	0x0800a5ab
 800a488:	0800a439 	.word	0x0800a439
 800a48c:	0800a439 	.word	0x0800a439
 800a490:	0800a5eb 	.word	0x0800a5eb
 800a494:	0800a439 	.word	0x0800a439
 800a498:	0800a4ed 	.word	0x0800a4ed
 800a49c:	0800a439 	.word	0x0800a439
 800a4a0:	0800a439 	.word	0x0800a439
 800a4a4:	0800a5b3 	.word	0x0800a5b3
 800a4a8:	680b      	ldr	r3, [r1, #0]
 800a4aa:	1d1a      	adds	r2, r3, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	600a      	str	r2, [r1, #0]
 800a4b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e0a3      	b.n	800a604 <_printf_i+0x1f4>
 800a4bc:	6825      	ldr	r5, [r4, #0]
 800a4be:	6808      	ldr	r0, [r1, #0]
 800a4c0:	062e      	lsls	r6, r5, #24
 800a4c2:	f100 0304 	add.w	r3, r0, #4
 800a4c6:	d50a      	bpl.n	800a4de <_printf_i+0xce>
 800a4c8:	6805      	ldr	r5, [r0, #0]
 800a4ca:	600b      	str	r3, [r1, #0]
 800a4cc:	2d00      	cmp	r5, #0
 800a4ce:	da03      	bge.n	800a4d8 <_printf_i+0xc8>
 800a4d0:	232d      	movs	r3, #45	; 0x2d
 800a4d2:	426d      	negs	r5, r5
 800a4d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4d8:	485e      	ldr	r0, [pc, #376]	; (800a654 <_printf_i+0x244>)
 800a4da:	230a      	movs	r3, #10
 800a4dc:	e019      	b.n	800a512 <_printf_i+0x102>
 800a4de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4e2:	6805      	ldr	r5, [r0, #0]
 800a4e4:	600b      	str	r3, [r1, #0]
 800a4e6:	bf18      	it	ne
 800a4e8:	b22d      	sxthne	r5, r5
 800a4ea:	e7ef      	b.n	800a4cc <_printf_i+0xbc>
 800a4ec:	680b      	ldr	r3, [r1, #0]
 800a4ee:	6825      	ldr	r5, [r4, #0]
 800a4f0:	1d18      	adds	r0, r3, #4
 800a4f2:	6008      	str	r0, [r1, #0]
 800a4f4:	0628      	lsls	r0, r5, #24
 800a4f6:	d501      	bpl.n	800a4fc <_printf_i+0xec>
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	e002      	b.n	800a502 <_printf_i+0xf2>
 800a4fc:	0669      	lsls	r1, r5, #25
 800a4fe:	d5fb      	bpl.n	800a4f8 <_printf_i+0xe8>
 800a500:	881d      	ldrh	r5, [r3, #0]
 800a502:	4854      	ldr	r0, [pc, #336]	; (800a654 <_printf_i+0x244>)
 800a504:	2f6f      	cmp	r7, #111	; 0x6f
 800a506:	bf0c      	ite	eq
 800a508:	2308      	moveq	r3, #8
 800a50a:	230a      	movne	r3, #10
 800a50c:	2100      	movs	r1, #0
 800a50e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a512:	6866      	ldr	r6, [r4, #4]
 800a514:	60a6      	str	r6, [r4, #8]
 800a516:	2e00      	cmp	r6, #0
 800a518:	bfa2      	ittt	ge
 800a51a:	6821      	ldrge	r1, [r4, #0]
 800a51c:	f021 0104 	bicge.w	r1, r1, #4
 800a520:	6021      	strge	r1, [r4, #0]
 800a522:	b90d      	cbnz	r5, 800a528 <_printf_i+0x118>
 800a524:	2e00      	cmp	r6, #0
 800a526:	d04d      	beq.n	800a5c4 <_printf_i+0x1b4>
 800a528:	4616      	mov	r6, r2
 800a52a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a52e:	fb03 5711 	mls	r7, r3, r1, r5
 800a532:	5dc7      	ldrb	r7, [r0, r7]
 800a534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a538:	462f      	mov	r7, r5
 800a53a:	42bb      	cmp	r3, r7
 800a53c:	460d      	mov	r5, r1
 800a53e:	d9f4      	bls.n	800a52a <_printf_i+0x11a>
 800a540:	2b08      	cmp	r3, #8
 800a542:	d10b      	bne.n	800a55c <_printf_i+0x14c>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	07df      	lsls	r7, r3, #31
 800a548:	d508      	bpl.n	800a55c <_printf_i+0x14c>
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	6861      	ldr	r1, [r4, #4]
 800a54e:	4299      	cmp	r1, r3
 800a550:	bfde      	ittt	le
 800a552:	2330      	movle	r3, #48	; 0x30
 800a554:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a55c:	1b92      	subs	r2, r2, r6
 800a55e:	6122      	str	r2, [r4, #16]
 800a560:	f8cd a000 	str.w	sl, [sp]
 800a564:	464b      	mov	r3, r9
 800a566:	aa03      	add	r2, sp, #12
 800a568:	4621      	mov	r1, r4
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7ff fee2 	bl	800a334 <_printf_common>
 800a570:	3001      	adds	r0, #1
 800a572:	d14c      	bne.n	800a60e <_printf_i+0x1fe>
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	b004      	add	sp, #16
 800a57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57e:	4835      	ldr	r0, [pc, #212]	; (800a654 <_printf_i+0x244>)
 800a580:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	680e      	ldr	r6, [r1, #0]
 800a588:	061f      	lsls	r7, r3, #24
 800a58a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a58e:	600e      	str	r6, [r1, #0]
 800a590:	d514      	bpl.n	800a5bc <_printf_i+0x1ac>
 800a592:	07d9      	lsls	r1, r3, #31
 800a594:	bf44      	itt	mi
 800a596:	f043 0320 	orrmi.w	r3, r3, #32
 800a59a:	6023      	strmi	r3, [r4, #0]
 800a59c:	b91d      	cbnz	r5, 800a5a6 <_printf_i+0x196>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	f023 0320 	bic.w	r3, r3, #32
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	2310      	movs	r3, #16
 800a5a8:	e7b0      	b.n	800a50c <_printf_i+0xfc>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	f043 0320 	orr.w	r3, r3, #32
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	2378      	movs	r3, #120	; 0x78
 800a5b4:	4828      	ldr	r0, [pc, #160]	; (800a658 <_printf_i+0x248>)
 800a5b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5ba:	e7e3      	b.n	800a584 <_printf_i+0x174>
 800a5bc:	065e      	lsls	r6, r3, #25
 800a5be:	bf48      	it	mi
 800a5c0:	b2ad      	uxthmi	r5, r5
 800a5c2:	e7e6      	b.n	800a592 <_printf_i+0x182>
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	e7bb      	b.n	800a540 <_printf_i+0x130>
 800a5c8:	680b      	ldr	r3, [r1, #0]
 800a5ca:	6826      	ldr	r6, [r4, #0]
 800a5cc:	6960      	ldr	r0, [r4, #20]
 800a5ce:	1d1d      	adds	r5, r3, #4
 800a5d0:	600d      	str	r5, [r1, #0]
 800a5d2:	0635      	lsls	r5, r6, #24
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	d501      	bpl.n	800a5dc <_printf_i+0x1cc>
 800a5d8:	6018      	str	r0, [r3, #0]
 800a5da:	e002      	b.n	800a5e2 <_printf_i+0x1d2>
 800a5dc:	0671      	lsls	r1, r6, #25
 800a5de:	d5fb      	bpl.n	800a5d8 <_printf_i+0x1c8>
 800a5e0:	8018      	strh	r0, [r3, #0]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6123      	str	r3, [r4, #16]
 800a5e6:	4616      	mov	r6, r2
 800a5e8:	e7ba      	b.n	800a560 <_printf_i+0x150>
 800a5ea:	680b      	ldr	r3, [r1, #0]
 800a5ec:	1d1a      	adds	r2, r3, #4
 800a5ee:	600a      	str	r2, [r1, #0]
 800a5f0:	681e      	ldr	r6, [r3, #0]
 800a5f2:	6862      	ldr	r2, [r4, #4]
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7f5 fe0a 	bl	8000210 <memchr>
 800a5fc:	b108      	cbz	r0, 800a602 <_printf_i+0x1f2>
 800a5fe:	1b80      	subs	r0, r0, r6
 800a600:	6060      	str	r0, [r4, #4]
 800a602:	6863      	ldr	r3, [r4, #4]
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	2300      	movs	r3, #0
 800a608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60c:	e7a8      	b.n	800a560 <_printf_i+0x150>
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	4632      	mov	r2, r6
 800a612:	4649      	mov	r1, r9
 800a614:	4640      	mov	r0, r8
 800a616:	47d0      	blx	sl
 800a618:	3001      	adds	r0, #1
 800a61a:	d0ab      	beq.n	800a574 <_printf_i+0x164>
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	079b      	lsls	r3, r3, #30
 800a620:	d413      	bmi.n	800a64a <_printf_i+0x23a>
 800a622:	68e0      	ldr	r0, [r4, #12]
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	4298      	cmp	r0, r3
 800a628:	bfb8      	it	lt
 800a62a:	4618      	movlt	r0, r3
 800a62c:	e7a4      	b.n	800a578 <_printf_i+0x168>
 800a62e:	2301      	movs	r3, #1
 800a630:	4632      	mov	r2, r6
 800a632:	4649      	mov	r1, r9
 800a634:	4640      	mov	r0, r8
 800a636:	47d0      	blx	sl
 800a638:	3001      	adds	r0, #1
 800a63a:	d09b      	beq.n	800a574 <_printf_i+0x164>
 800a63c:	3501      	adds	r5, #1
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	9903      	ldr	r1, [sp, #12]
 800a642:	1a5b      	subs	r3, r3, r1
 800a644:	42ab      	cmp	r3, r5
 800a646:	dcf2      	bgt.n	800a62e <_printf_i+0x21e>
 800a648:	e7eb      	b.n	800a622 <_printf_i+0x212>
 800a64a:	2500      	movs	r5, #0
 800a64c:	f104 0619 	add.w	r6, r4, #25
 800a650:	e7f5      	b.n	800a63e <_printf_i+0x22e>
 800a652:	bf00      	nop
 800a654:	080114b2 	.word	0x080114b2
 800a658:	080114c3 	.word	0x080114c3

0800a65c <siprintf>:
 800a65c:	b40e      	push	{r1, r2, r3}
 800a65e:	b500      	push	{lr}
 800a660:	b09c      	sub	sp, #112	; 0x70
 800a662:	ab1d      	add	r3, sp, #116	; 0x74
 800a664:	9002      	str	r0, [sp, #8]
 800a666:	9006      	str	r0, [sp, #24]
 800a668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a66c:	4809      	ldr	r0, [pc, #36]	; (800a694 <siprintf+0x38>)
 800a66e:	9107      	str	r1, [sp, #28]
 800a670:	9104      	str	r1, [sp, #16]
 800a672:	4909      	ldr	r1, [pc, #36]	; (800a698 <siprintf+0x3c>)
 800a674:	f853 2b04 	ldr.w	r2, [r3], #4
 800a678:	9105      	str	r1, [sp, #20]
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	a902      	add	r1, sp, #8
 800a680:	f002 feca 	bl	800d418 <_svfiprintf_r>
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	2200      	movs	r2, #0
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	b01c      	add	sp, #112	; 0x70
 800a68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a690:	b003      	add	sp, #12
 800a692:	4770      	bx	lr
 800a694:	20000054 	.word	0x20000054
 800a698:	ffff0208 	.word	0xffff0208

0800a69c <strpbrk>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	7803      	ldrb	r3, [r0, #0]
 800a6a0:	b1a3      	cbz	r3, 800a6cc <strpbrk+0x30>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a6ac:	b14d      	cbz	r5, 800a6c2 <strpbrk+0x26>
 800a6ae:	460a      	mov	r2, r1
 800a6b0:	e001      	b.n	800a6b6 <strpbrk+0x1a>
 800a6b2:	42ae      	cmp	r6, r5
 800a6b4:	d009      	beq.n	800a6ca <strpbrk+0x2e>
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	f812 6b01 	ldrb.w	r6, [r2], #1
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	d1f8      	bne.n	800a6b2 <strpbrk+0x16>
 800a6c0:	e7f1      	b.n	800a6a6 <strpbrk+0xa>
 800a6c2:	7823      	ldrb	r3, [r4, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bf08      	it	eq
 800a6c8:	2000      	moveq	r0, #0
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	e7fc      	b.n	800a6ca <strpbrk+0x2e>

0800a6d0 <sulp>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	ec45 4b10 	vmov	d0, r4, r5
 800a6da:	4616      	mov	r6, r2
 800a6dc:	f002 fc38 	bl	800cf50 <__ulp>
 800a6e0:	ec51 0b10 	vmov	r0, r1, d0
 800a6e4:	b17e      	cbz	r6, 800a706 <sulp+0x36>
 800a6e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a6ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	dd09      	ble.n	800a706 <sulp+0x36>
 800a6f2:	051b      	lsls	r3, r3, #20
 800a6f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a6f8:	2400      	movs	r4, #0
 800a6fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a6fe:	4622      	mov	r2, r4
 800a700:	462b      	mov	r3, r5
 800a702:	f7f5 ff91 	bl	8000628 <__aeabi_dmul>
 800a706:	bd70      	pop	{r4, r5, r6, pc}

0800a708 <_strtod_l>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	b0a3      	sub	sp, #140	; 0x8c
 800a70e:	461f      	mov	r7, r3
 800a710:	2300      	movs	r3, #0
 800a712:	931e      	str	r3, [sp, #120]	; 0x78
 800a714:	4ba4      	ldr	r3, [pc, #656]	; (800a9a8 <_strtod_l+0x2a0>)
 800a716:	9219      	str	r2, [sp, #100]	; 0x64
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	9307      	str	r3, [sp, #28]
 800a71c:	4604      	mov	r4, r0
 800a71e:	4618      	mov	r0, r3
 800a720:	4688      	mov	r8, r1
 800a722:	f7f5 fd67 	bl	80001f4 <strlen>
 800a726:	f04f 0a00 	mov.w	sl, #0
 800a72a:	4605      	mov	r5, r0
 800a72c:	f04f 0b00 	mov.w	fp, #0
 800a730:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a736:	781a      	ldrb	r2, [r3, #0]
 800a738:	2a2b      	cmp	r2, #43	; 0x2b
 800a73a:	d04c      	beq.n	800a7d6 <_strtod_l+0xce>
 800a73c:	d839      	bhi.n	800a7b2 <_strtod_l+0xaa>
 800a73e:	2a0d      	cmp	r2, #13
 800a740:	d832      	bhi.n	800a7a8 <_strtod_l+0xa0>
 800a742:	2a08      	cmp	r2, #8
 800a744:	d832      	bhi.n	800a7ac <_strtod_l+0xa4>
 800a746:	2a00      	cmp	r2, #0
 800a748:	d03c      	beq.n	800a7c4 <_strtod_l+0xbc>
 800a74a:	2300      	movs	r3, #0
 800a74c:	930e      	str	r3, [sp, #56]	; 0x38
 800a74e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a750:	7833      	ldrb	r3, [r6, #0]
 800a752:	2b30      	cmp	r3, #48	; 0x30
 800a754:	f040 80b4 	bne.w	800a8c0 <_strtod_l+0x1b8>
 800a758:	7873      	ldrb	r3, [r6, #1]
 800a75a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a75e:	2b58      	cmp	r3, #88	; 0x58
 800a760:	d16c      	bne.n	800a83c <_strtod_l+0x134>
 800a762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	ab1e      	add	r3, sp, #120	; 0x78
 800a768:	9702      	str	r7, [sp, #8]
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4a8f      	ldr	r2, [pc, #572]	; (800a9ac <_strtod_l+0x2a4>)
 800a76e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a770:	a91d      	add	r1, sp, #116	; 0x74
 800a772:	4620      	mov	r0, r4
 800a774:	f001 fd4c 	bl	800c210 <__gethex>
 800a778:	f010 0707 	ands.w	r7, r0, #7
 800a77c:	4605      	mov	r5, r0
 800a77e:	d005      	beq.n	800a78c <_strtod_l+0x84>
 800a780:	2f06      	cmp	r7, #6
 800a782:	d12a      	bne.n	800a7da <_strtod_l+0xd2>
 800a784:	3601      	adds	r6, #1
 800a786:	2300      	movs	r3, #0
 800a788:	961d      	str	r6, [sp, #116]	; 0x74
 800a78a:	930e      	str	r3, [sp, #56]	; 0x38
 800a78c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f040 8596 	bne.w	800b2c0 <_strtod_l+0xbb8>
 800a794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a796:	b1db      	cbz	r3, 800a7d0 <_strtod_l+0xc8>
 800a798:	4652      	mov	r2, sl
 800a79a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a79e:	ec43 2b10 	vmov	d0, r2, r3
 800a7a2:	b023      	add	sp, #140	; 0x8c
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	2a20      	cmp	r2, #32
 800a7aa:	d1ce      	bne.n	800a74a <_strtod_l+0x42>
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	931d      	str	r3, [sp, #116]	; 0x74
 800a7b0:	e7c0      	b.n	800a734 <_strtod_l+0x2c>
 800a7b2:	2a2d      	cmp	r2, #45	; 0x2d
 800a7b4:	d1c9      	bne.n	800a74a <_strtod_l+0x42>
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	920e      	str	r2, [sp, #56]	; 0x38
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	921d      	str	r2, [sp, #116]	; 0x74
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1c4      	bne.n	800a74e <_strtod_l+0x46>
 800a7c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f040 8576 	bne.w	800b2bc <_strtod_l+0xbb4>
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	e7e3      	b.n	800a79e <_strtod_l+0x96>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	e7ee      	b.n	800a7b8 <_strtod_l+0xb0>
 800a7da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a7dc:	b13a      	cbz	r2, 800a7ee <_strtod_l+0xe6>
 800a7de:	2135      	movs	r1, #53	; 0x35
 800a7e0:	a820      	add	r0, sp, #128	; 0x80
 800a7e2:	f002 fcc0 	bl	800d166 <__copybits>
 800a7e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f002 f885 	bl	800c8f8 <_Bfree>
 800a7ee:	3f01      	subs	r7, #1
 800a7f0:	2f05      	cmp	r7, #5
 800a7f2:	d807      	bhi.n	800a804 <_strtod_l+0xfc>
 800a7f4:	e8df f007 	tbb	[pc, r7]
 800a7f8:	1d180b0e 	.word	0x1d180b0e
 800a7fc:	030e      	.short	0x030e
 800a7fe:	f04f 0b00 	mov.w	fp, #0
 800a802:	46da      	mov	sl, fp
 800a804:	0728      	lsls	r0, r5, #28
 800a806:	d5c1      	bpl.n	800a78c <_strtod_l+0x84>
 800a808:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a80c:	e7be      	b.n	800a78c <_strtod_l+0x84>
 800a80e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a812:	e7f7      	b.n	800a804 <_strtod_l+0xfc>
 800a814:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a818:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a81a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a81e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a826:	e7ed      	b.n	800a804 <_strtod_l+0xfc>
 800a828:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a9b0 <_strtod_l+0x2a8>
 800a82c:	f04f 0a00 	mov.w	sl, #0
 800a830:	e7e8      	b.n	800a804 <_strtod_l+0xfc>
 800a832:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a836:	f04f 3aff 	mov.w	sl, #4294967295
 800a83a:	e7e3      	b.n	800a804 <_strtod_l+0xfc>
 800a83c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	921d      	str	r2, [sp, #116]	; 0x74
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	2b30      	cmp	r3, #48	; 0x30
 800a846:	d0f9      	beq.n	800a83c <_strtod_l+0x134>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d09f      	beq.n	800a78c <_strtod_l+0x84>
 800a84c:	2301      	movs	r3, #1
 800a84e:	f04f 0900 	mov.w	r9, #0
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a856:	930a      	str	r3, [sp, #40]	; 0x28
 800a858:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a85c:	464f      	mov	r7, r9
 800a85e:	220a      	movs	r2, #10
 800a860:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a862:	7806      	ldrb	r6, [r0, #0]
 800a864:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a868:	b2d9      	uxtb	r1, r3
 800a86a:	2909      	cmp	r1, #9
 800a86c:	d92a      	bls.n	800a8c4 <_strtod_l+0x1bc>
 800a86e:	9907      	ldr	r1, [sp, #28]
 800a870:	462a      	mov	r2, r5
 800a872:	f002 fee9 	bl	800d648 <strncmp>
 800a876:	b398      	cbz	r0, 800a8e0 <_strtod_l+0x1d8>
 800a878:	2000      	movs	r0, #0
 800a87a:	4633      	mov	r3, r6
 800a87c:	463d      	mov	r5, r7
 800a87e:	9007      	str	r0, [sp, #28]
 800a880:	4602      	mov	r2, r0
 800a882:	2b65      	cmp	r3, #101	; 0x65
 800a884:	d001      	beq.n	800a88a <_strtod_l+0x182>
 800a886:	2b45      	cmp	r3, #69	; 0x45
 800a888:	d118      	bne.n	800a8bc <_strtod_l+0x1b4>
 800a88a:	b91d      	cbnz	r5, 800a894 <_strtod_l+0x18c>
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	4303      	orrs	r3, r0
 800a890:	d098      	beq.n	800a7c4 <_strtod_l+0xbc>
 800a892:	2500      	movs	r5, #0
 800a894:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a898:	f108 0301 	add.w	r3, r8, #1
 800a89c:	931d      	str	r3, [sp, #116]	; 0x74
 800a89e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a8a2:	2b2b      	cmp	r3, #43	; 0x2b
 800a8a4:	d075      	beq.n	800a992 <_strtod_l+0x28a>
 800a8a6:	2b2d      	cmp	r3, #45	; 0x2d
 800a8a8:	d07b      	beq.n	800a9a2 <_strtod_l+0x29a>
 800a8aa:	f04f 0c00 	mov.w	ip, #0
 800a8ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a8b2:	2909      	cmp	r1, #9
 800a8b4:	f240 8082 	bls.w	800a9bc <_strtod_l+0x2b4>
 800a8b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a8bc:	2600      	movs	r6, #0
 800a8be:	e09d      	b.n	800a9fc <_strtod_l+0x2f4>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e7c4      	b.n	800a84e <_strtod_l+0x146>
 800a8c4:	2f08      	cmp	r7, #8
 800a8c6:	bfd8      	it	le
 800a8c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a8ca:	f100 0001 	add.w	r0, r0, #1
 800a8ce:	bfda      	itte	le
 800a8d0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a8d4:	9309      	strle	r3, [sp, #36]	; 0x24
 800a8d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a8da:	3701      	adds	r7, #1
 800a8dc:	901d      	str	r0, [sp, #116]	; 0x74
 800a8de:	e7bf      	b.n	800a860 <_strtod_l+0x158>
 800a8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8e2:	195a      	adds	r2, r3, r5
 800a8e4:	921d      	str	r2, [sp, #116]	; 0x74
 800a8e6:	5d5b      	ldrb	r3, [r3, r5]
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	d037      	beq.n	800a95c <_strtod_l+0x254>
 800a8ec:	9007      	str	r0, [sp, #28]
 800a8ee:	463d      	mov	r5, r7
 800a8f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a8f4:	2a09      	cmp	r2, #9
 800a8f6:	d912      	bls.n	800a91e <_strtod_l+0x216>
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	e7c2      	b.n	800a882 <_strtod_l+0x17a>
 800a8fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	921d      	str	r2, [sp, #116]	; 0x74
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	3001      	adds	r0, #1
 800a906:	2b30      	cmp	r3, #48	; 0x30
 800a908:	d0f8      	beq.n	800a8fc <_strtod_l+0x1f4>
 800a90a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a90e:	2a08      	cmp	r2, #8
 800a910:	f200 84db 	bhi.w	800b2ca <_strtod_l+0xbc2>
 800a914:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a916:	9007      	str	r0, [sp, #28]
 800a918:	2000      	movs	r0, #0
 800a91a:	920a      	str	r2, [sp, #40]	; 0x28
 800a91c:	4605      	mov	r5, r0
 800a91e:	3b30      	subs	r3, #48	; 0x30
 800a920:	f100 0201 	add.w	r2, r0, #1
 800a924:	d014      	beq.n	800a950 <_strtod_l+0x248>
 800a926:	9907      	ldr	r1, [sp, #28]
 800a928:	4411      	add	r1, r2
 800a92a:	9107      	str	r1, [sp, #28]
 800a92c:	462a      	mov	r2, r5
 800a92e:	eb00 0e05 	add.w	lr, r0, r5
 800a932:	210a      	movs	r1, #10
 800a934:	4572      	cmp	r2, lr
 800a936:	d113      	bne.n	800a960 <_strtod_l+0x258>
 800a938:	182a      	adds	r2, r5, r0
 800a93a:	2a08      	cmp	r2, #8
 800a93c:	f105 0501 	add.w	r5, r5, #1
 800a940:	4405      	add	r5, r0
 800a942:	dc1c      	bgt.n	800a97e <_strtod_l+0x276>
 800a944:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a946:	220a      	movs	r2, #10
 800a948:	fb02 3301 	mla	r3, r2, r1, r3
 800a94c:	9309      	str	r3, [sp, #36]	; 0x24
 800a94e:	2200      	movs	r2, #0
 800a950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a952:	1c59      	adds	r1, r3, #1
 800a954:	911d      	str	r1, [sp, #116]	; 0x74
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	4610      	mov	r0, r2
 800a95a:	e7c9      	b.n	800a8f0 <_strtod_l+0x1e8>
 800a95c:	4638      	mov	r0, r7
 800a95e:	e7d2      	b.n	800a906 <_strtod_l+0x1fe>
 800a960:	2a08      	cmp	r2, #8
 800a962:	dc04      	bgt.n	800a96e <_strtod_l+0x266>
 800a964:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a966:	434e      	muls	r6, r1
 800a968:	9609      	str	r6, [sp, #36]	; 0x24
 800a96a:	3201      	adds	r2, #1
 800a96c:	e7e2      	b.n	800a934 <_strtod_l+0x22c>
 800a96e:	f102 0c01 	add.w	ip, r2, #1
 800a972:	f1bc 0f10 	cmp.w	ip, #16
 800a976:	bfd8      	it	le
 800a978:	fb01 f909 	mulle.w	r9, r1, r9
 800a97c:	e7f5      	b.n	800a96a <_strtod_l+0x262>
 800a97e:	2d10      	cmp	r5, #16
 800a980:	bfdc      	itt	le
 800a982:	220a      	movle	r2, #10
 800a984:	fb02 3909 	mlale	r9, r2, r9, r3
 800a988:	e7e1      	b.n	800a94e <_strtod_l+0x246>
 800a98a:	2300      	movs	r3, #0
 800a98c:	9307      	str	r3, [sp, #28]
 800a98e:	2201      	movs	r2, #1
 800a990:	e77c      	b.n	800a88c <_strtod_l+0x184>
 800a992:	f04f 0c00 	mov.w	ip, #0
 800a996:	f108 0302 	add.w	r3, r8, #2
 800a99a:	931d      	str	r3, [sp, #116]	; 0x74
 800a99c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a9a0:	e785      	b.n	800a8ae <_strtod_l+0x1a6>
 800a9a2:	f04f 0c01 	mov.w	ip, #1
 800a9a6:	e7f6      	b.n	800a996 <_strtod_l+0x28e>
 800a9a8:	08011728 	.word	0x08011728
 800a9ac:	080114d4 	.word	0x080114d4
 800a9b0:	7ff00000 	.word	0x7ff00000
 800a9b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9b6:	1c59      	adds	r1, r3, #1
 800a9b8:	911d      	str	r1, [sp, #116]	; 0x74
 800a9ba:	785b      	ldrb	r3, [r3, #1]
 800a9bc:	2b30      	cmp	r3, #48	; 0x30
 800a9be:	d0f9      	beq.n	800a9b4 <_strtod_l+0x2ac>
 800a9c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a9c4:	2908      	cmp	r1, #8
 800a9c6:	f63f af79 	bhi.w	800a8bc <_strtod_l+0x1b4>
 800a9ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a9ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9d0:	9308      	str	r3, [sp, #32]
 800a9d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9d4:	1c59      	adds	r1, r3, #1
 800a9d6:	911d      	str	r1, [sp, #116]	; 0x74
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a9de:	2e09      	cmp	r6, #9
 800a9e0:	d937      	bls.n	800aa52 <_strtod_l+0x34a>
 800a9e2:	9e08      	ldr	r6, [sp, #32]
 800a9e4:	1b89      	subs	r1, r1, r6
 800a9e6:	2908      	cmp	r1, #8
 800a9e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a9ec:	dc02      	bgt.n	800a9f4 <_strtod_l+0x2ec>
 800a9ee:	4576      	cmp	r6, lr
 800a9f0:	bfa8      	it	ge
 800a9f2:	4676      	movge	r6, lr
 800a9f4:	f1bc 0f00 	cmp.w	ip, #0
 800a9f8:	d000      	beq.n	800a9fc <_strtod_l+0x2f4>
 800a9fa:	4276      	negs	r6, r6
 800a9fc:	2d00      	cmp	r5, #0
 800a9fe:	d14f      	bne.n	800aaa0 <_strtod_l+0x398>
 800aa00:	9904      	ldr	r1, [sp, #16]
 800aa02:	4301      	orrs	r1, r0
 800aa04:	f47f aec2 	bne.w	800a78c <_strtod_l+0x84>
 800aa08:	2a00      	cmp	r2, #0
 800aa0a:	f47f aedb 	bne.w	800a7c4 <_strtod_l+0xbc>
 800aa0e:	2b69      	cmp	r3, #105	; 0x69
 800aa10:	d027      	beq.n	800aa62 <_strtod_l+0x35a>
 800aa12:	dc24      	bgt.n	800aa5e <_strtod_l+0x356>
 800aa14:	2b49      	cmp	r3, #73	; 0x49
 800aa16:	d024      	beq.n	800aa62 <_strtod_l+0x35a>
 800aa18:	2b4e      	cmp	r3, #78	; 0x4e
 800aa1a:	f47f aed3 	bne.w	800a7c4 <_strtod_l+0xbc>
 800aa1e:	499e      	ldr	r1, [pc, #632]	; (800ac98 <_strtod_l+0x590>)
 800aa20:	a81d      	add	r0, sp, #116	; 0x74
 800aa22:	f001 fe4d 	bl	800c6c0 <__match>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f43f aecc 	beq.w	800a7c4 <_strtod_l+0xbc>
 800aa2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b28      	cmp	r3, #40	; 0x28
 800aa32:	d12d      	bne.n	800aa90 <_strtod_l+0x388>
 800aa34:	4999      	ldr	r1, [pc, #612]	; (800ac9c <_strtod_l+0x594>)
 800aa36:	aa20      	add	r2, sp, #128	; 0x80
 800aa38:	a81d      	add	r0, sp, #116	; 0x74
 800aa3a:	f001 fe55 	bl	800c6e8 <__hexnan>
 800aa3e:	2805      	cmp	r0, #5
 800aa40:	d126      	bne.n	800aa90 <_strtod_l+0x388>
 800aa42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800aa48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aa4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aa50:	e69c      	b.n	800a78c <_strtod_l+0x84>
 800aa52:	210a      	movs	r1, #10
 800aa54:	fb01 3e0e 	mla	lr, r1, lr, r3
 800aa58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aa5c:	e7b9      	b.n	800a9d2 <_strtod_l+0x2ca>
 800aa5e:	2b6e      	cmp	r3, #110	; 0x6e
 800aa60:	e7db      	b.n	800aa1a <_strtod_l+0x312>
 800aa62:	498f      	ldr	r1, [pc, #572]	; (800aca0 <_strtod_l+0x598>)
 800aa64:	a81d      	add	r0, sp, #116	; 0x74
 800aa66:	f001 fe2b 	bl	800c6c0 <__match>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f43f aeaa 	beq.w	800a7c4 <_strtod_l+0xbc>
 800aa70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa72:	498c      	ldr	r1, [pc, #560]	; (800aca4 <_strtod_l+0x59c>)
 800aa74:	3b01      	subs	r3, #1
 800aa76:	a81d      	add	r0, sp, #116	; 0x74
 800aa78:	931d      	str	r3, [sp, #116]	; 0x74
 800aa7a:	f001 fe21 	bl	800c6c0 <__match>
 800aa7e:	b910      	cbnz	r0, 800aa86 <_strtod_l+0x37e>
 800aa80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa82:	3301      	adds	r3, #1
 800aa84:	931d      	str	r3, [sp, #116]	; 0x74
 800aa86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800acb4 <_strtod_l+0x5ac>
 800aa8a:	f04f 0a00 	mov.w	sl, #0
 800aa8e:	e67d      	b.n	800a78c <_strtod_l+0x84>
 800aa90:	4885      	ldr	r0, [pc, #532]	; (800aca8 <_strtod_l+0x5a0>)
 800aa92:	f002 fdc1 	bl	800d618 <nan>
 800aa96:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aa9e:	e675      	b.n	800a78c <_strtod_l+0x84>
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa4:	1af3      	subs	r3, r6, r3
 800aaa6:	2f00      	cmp	r7, #0
 800aaa8:	bf08      	it	eq
 800aaaa:	462f      	moveq	r7, r5
 800aaac:	2d10      	cmp	r5, #16
 800aaae:	9308      	str	r3, [sp, #32]
 800aab0:	46a8      	mov	r8, r5
 800aab2:	bfa8      	it	ge
 800aab4:	f04f 0810 	movge.w	r8, #16
 800aab8:	f7f5 fd3c 	bl	8000534 <__aeabi_ui2d>
 800aabc:	2d09      	cmp	r5, #9
 800aabe:	4682      	mov	sl, r0
 800aac0:	468b      	mov	fp, r1
 800aac2:	dd13      	ble.n	800aaec <_strtod_l+0x3e4>
 800aac4:	4b79      	ldr	r3, [pc, #484]	; (800acac <_strtod_l+0x5a4>)
 800aac6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aaca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aace:	f7f5 fdab 	bl	8000628 <__aeabi_dmul>
 800aad2:	4682      	mov	sl, r0
 800aad4:	4648      	mov	r0, r9
 800aad6:	468b      	mov	fp, r1
 800aad8:	f7f5 fd2c 	bl	8000534 <__aeabi_ui2d>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4650      	mov	r0, sl
 800aae2:	4659      	mov	r1, fp
 800aae4:	f7f5 fbea 	bl	80002bc <__adddf3>
 800aae8:	4682      	mov	sl, r0
 800aaea:	468b      	mov	fp, r1
 800aaec:	2d0f      	cmp	r5, #15
 800aaee:	dc38      	bgt.n	800ab62 <_strtod_l+0x45a>
 800aaf0:	9b08      	ldr	r3, [sp, #32]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f43f ae4a 	beq.w	800a78c <_strtod_l+0x84>
 800aaf8:	dd24      	ble.n	800ab44 <_strtod_l+0x43c>
 800aafa:	2b16      	cmp	r3, #22
 800aafc:	dc0b      	bgt.n	800ab16 <_strtod_l+0x40e>
 800aafe:	4d6b      	ldr	r5, [pc, #428]	; (800acac <_strtod_l+0x5a4>)
 800ab00:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ab04:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ab08:	4652      	mov	r2, sl
 800ab0a:	465b      	mov	r3, fp
 800ab0c:	f7f5 fd8c 	bl	8000628 <__aeabi_dmul>
 800ab10:	4682      	mov	sl, r0
 800ab12:	468b      	mov	fp, r1
 800ab14:	e63a      	b.n	800a78c <_strtod_l+0x84>
 800ab16:	9a08      	ldr	r2, [sp, #32]
 800ab18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	db20      	blt.n	800ab62 <_strtod_l+0x45a>
 800ab20:	4c62      	ldr	r4, [pc, #392]	; (800acac <_strtod_l+0x5a4>)
 800ab22:	f1c5 050f 	rsb	r5, r5, #15
 800ab26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab32:	f7f5 fd79 	bl	8000628 <__aeabi_dmul>
 800ab36:	9b08      	ldr	r3, [sp, #32]
 800ab38:	1b5d      	subs	r5, r3, r5
 800ab3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab42:	e7e3      	b.n	800ab0c <_strtod_l+0x404>
 800ab44:	9b08      	ldr	r3, [sp, #32]
 800ab46:	3316      	adds	r3, #22
 800ab48:	db0b      	blt.n	800ab62 <_strtod_l+0x45a>
 800ab4a:	9b07      	ldr	r3, [sp, #28]
 800ab4c:	4a57      	ldr	r2, [pc, #348]	; (800acac <_strtod_l+0x5a4>)
 800ab4e:	1b9e      	subs	r6, r3, r6
 800ab50:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ab54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab58:	4650      	mov	r0, sl
 800ab5a:	4659      	mov	r1, fp
 800ab5c:	f7f5 fe8e 	bl	800087c <__aeabi_ddiv>
 800ab60:	e7d6      	b.n	800ab10 <_strtod_l+0x408>
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	eba5 0808 	sub.w	r8, r5, r8
 800ab68:	4498      	add	r8, r3
 800ab6a:	f1b8 0f00 	cmp.w	r8, #0
 800ab6e:	dd71      	ble.n	800ac54 <_strtod_l+0x54c>
 800ab70:	f018 030f 	ands.w	r3, r8, #15
 800ab74:	d00a      	beq.n	800ab8c <_strtod_l+0x484>
 800ab76:	494d      	ldr	r1, [pc, #308]	; (800acac <_strtod_l+0x5a4>)
 800ab78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	465b      	mov	r3, fp
 800ab80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab84:	f7f5 fd50 	bl	8000628 <__aeabi_dmul>
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	f038 080f 	bics.w	r8, r8, #15
 800ab90:	d04d      	beq.n	800ac2e <_strtod_l+0x526>
 800ab92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ab96:	dd22      	ble.n	800abde <_strtod_l+0x4d6>
 800ab98:	2500      	movs	r5, #0
 800ab9a:	462e      	mov	r6, r5
 800ab9c:	9509      	str	r5, [sp, #36]	; 0x24
 800ab9e:	9507      	str	r5, [sp, #28]
 800aba0:	2322      	movs	r3, #34	; 0x22
 800aba2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800acb4 <_strtod_l+0x5ac>
 800aba6:	6023      	str	r3, [r4, #0]
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f43f adec 	beq.w	800a78c <_strtod_l+0x84>
 800abb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800abb6:	4620      	mov	r0, r4
 800abb8:	f001 fe9e 	bl	800c8f8 <_Bfree>
 800abbc:	9907      	ldr	r1, [sp, #28]
 800abbe:	4620      	mov	r0, r4
 800abc0:	f001 fe9a 	bl	800c8f8 <_Bfree>
 800abc4:	4631      	mov	r1, r6
 800abc6:	4620      	mov	r0, r4
 800abc8:	f001 fe96 	bl	800c8f8 <_Bfree>
 800abcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abce:	4620      	mov	r0, r4
 800abd0:	f001 fe92 	bl	800c8f8 <_Bfree>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4620      	mov	r0, r4
 800abd8:	f001 fe8e 	bl	800c8f8 <_Bfree>
 800abdc:	e5d6      	b.n	800a78c <_strtod_l+0x84>
 800abde:	2300      	movs	r3, #0
 800abe0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800abe4:	4650      	mov	r0, sl
 800abe6:	4659      	mov	r1, fp
 800abe8:	4699      	mov	r9, r3
 800abea:	f1b8 0f01 	cmp.w	r8, #1
 800abee:	dc21      	bgt.n	800ac34 <_strtod_l+0x52c>
 800abf0:	b10b      	cbz	r3, 800abf6 <_strtod_l+0x4ee>
 800abf2:	4682      	mov	sl, r0
 800abf4:	468b      	mov	fp, r1
 800abf6:	4b2e      	ldr	r3, [pc, #184]	; (800acb0 <_strtod_l+0x5a8>)
 800abf8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800abfc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ac00:	4652      	mov	r2, sl
 800ac02:	465b      	mov	r3, fp
 800ac04:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ac08:	f7f5 fd0e 	bl	8000628 <__aeabi_dmul>
 800ac0c:	4b29      	ldr	r3, [pc, #164]	; (800acb4 <_strtod_l+0x5ac>)
 800ac0e:	460a      	mov	r2, r1
 800ac10:	400b      	ands	r3, r1
 800ac12:	4929      	ldr	r1, [pc, #164]	; (800acb8 <_strtod_l+0x5b0>)
 800ac14:	428b      	cmp	r3, r1
 800ac16:	4682      	mov	sl, r0
 800ac18:	d8be      	bhi.n	800ab98 <_strtod_l+0x490>
 800ac1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac1e:	428b      	cmp	r3, r1
 800ac20:	bf86      	itte	hi
 800ac22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800acbc <_strtod_l+0x5b4>
 800ac26:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	e081      	b.n	800ad38 <_strtod_l+0x630>
 800ac34:	f018 0f01 	tst.w	r8, #1
 800ac38:	d007      	beq.n	800ac4a <_strtod_l+0x542>
 800ac3a:	4b1d      	ldr	r3, [pc, #116]	; (800acb0 <_strtod_l+0x5a8>)
 800ac3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fcf0 	bl	8000628 <__aeabi_dmul>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f109 0901 	add.w	r9, r9, #1
 800ac4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac52:	e7ca      	b.n	800abea <_strtod_l+0x4e2>
 800ac54:	d0eb      	beq.n	800ac2e <_strtod_l+0x526>
 800ac56:	f1c8 0800 	rsb	r8, r8, #0
 800ac5a:	f018 020f 	ands.w	r2, r8, #15
 800ac5e:	d00a      	beq.n	800ac76 <_strtod_l+0x56e>
 800ac60:	4b12      	ldr	r3, [pc, #72]	; (800acac <_strtod_l+0x5a4>)
 800ac62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac66:	4650      	mov	r0, sl
 800ac68:	4659      	mov	r1, fp
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f7f5 fe05 	bl	800087c <__aeabi_ddiv>
 800ac72:	4682      	mov	sl, r0
 800ac74:	468b      	mov	fp, r1
 800ac76:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ac7a:	d0d8      	beq.n	800ac2e <_strtod_l+0x526>
 800ac7c:	f1b8 0f1f 	cmp.w	r8, #31
 800ac80:	dd1e      	ble.n	800acc0 <_strtod_l+0x5b8>
 800ac82:	2500      	movs	r5, #0
 800ac84:	462e      	mov	r6, r5
 800ac86:	9509      	str	r5, [sp, #36]	; 0x24
 800ac88:	9507      	str	r5, [sp, #28]
 800ac8a:	2322      	movs	r3, #34	; 0x22
 800ac8c:	f04f 0a00 	mov.w	sl, #0
 800ac90:	f04f 0b00 	mov.w	fp, #0
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	e789      	b.n	800abac <_strtod_l+0x4a4>
 800ac98:	080114ad 	.word	0x080114ad
 800ac9c:	080114e8 	.word	0x080114e8
 800aca0:	080114a5 	.word	0x080114a5
 800aca4:	0801162c 	.word	0x0801162c
 800aca8:	080118e8 	.word	0x080118e8
 800acac:	080117c8 	.word	0x080117c8
 800acb0:	080117a0 	.word	0x080117a0
 800acb4:	7ff00000 	.word	0x7ff00000
 800acb8:	7ca00000 	.word	0x7ca00000
 800acbc:	7fefffff 	.word	0x7fefffff
 800acc0:	f018 0310 	ands.w	r3, r8, #16
 800acc4:	bf18      	it	ne
 800acc6:	236a      	movne	r3, #106	; 0x6a
 800acc8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b080 <_strtod_l+0x978>
 800accc:	9304      	str	r3, [sp, #16]
 800acce:	4650      	mov	r0, sl
 800acd0:	4659      	mov	r1, fp
 800acd2:	2300      	movs	r3, #0
 800acd4:	f018 0f01 	tst.w	r8, #1
 800acd8:	d004      	beq.n	800ace4 <_strtod_l+0x5dc>
 800acda:	e9d9 2300 	ldrd	r2, r3, [r9]
 800acde:	f7f5 fca3 	bl	8000628 <__aeabi_dmul>
 800ace2:	2301      	movs	r3, #1
 800ace4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ace8:	f109 0908 	add.w	r9, r9, #8
 800acec:	d1f2      	bne.n	800acd4 <_strtod_l+0x5cc>
 800acee:	b10b      	cbz	r3, 800acf4 <_strtod_l+0x5ec>
 800acf0:	4682      	mov	sl, r0
 800acf2:	468b      	mov	fp, r1
 800acf4:	9b04      	ldr	r3, [sp, #16]
 800acf6:	b1bb      	cbz	r3, 800ad28 <_strtod_l+0x620>
 800acf8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800acfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	4659      	mov	r1, fp
 800ad04:	dd10      	ble.n	800ad28 <_strtod_l+0x620>
 800ad06:	2b1f      	cmp	r3, #31
 800ad08:	f340 8128 	ble.w	800af5c <_strtod_l+0x854>
 800ad0c:	2b34      	cmp	r3, #52	; 0x34
 800ad0e:	bfde      	ittt	le
 800ad10:	3b20      	suble	r3, #32
 800ad12:	f04f 32ff 	movle.w	r2, #4294967295
 800ad16:	fa02 f303 	lslle.w	r3, r2, r3
 800ad1a:	f04f 0a00 	mov.w	sl, #0
 800ad1e:	bfcc      	ite	gt
 800ad20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ad24:	ea03 0b01 	andle.w	fp, r3, r1
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	4659      	mov	r1, fp
 800ad30:	f7f5 fee2 	bl	8000af8 <__aeabi_dcmpeq>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1a4      	bne.n	800ac82 <_strtod_l+0x57a>
 800ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad3e:	462b      	mov	r3, r5
 800ad40:	463a      	mov	r2, r7
 800ad42:	4620      	mov	r0, r4
 800ad44:	f001 fe44 	bl	800c9d0 <__s2b>
 800ad48:	9009      	str	r0, [sp, #36]	; 0x24
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f43f af24 	beq.w	800ab98 <_strtod_l+0x490>
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	1b9e      	subs	r6, r3, r6
 800ad54:	9b08      	ldr	r3, [sp, #32]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bfb4      	ite	lt
 800ad5a:	4633      	movlt	r3, r6
 800ad5c:	2300      	movge	r3, #0
 800ad5e:	9310      	str	r3, [sp, #64]	; 0x40
 800ad60:	9b08      	ldr	r3, [sp, #32]
 800ad62:	2500      	movs	r5, #0
 800ad64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad68:	9318      	str	r3, [sp, #96]	; 0x60
 800ad6a:	462e      	mov	r6, r5
 800ad6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6e:	4620      	mov	r0, r4
 800ad70:	6859      	ldr	r1, [r3, #4]
 800ad72:	f001 fd81 	bl	800c878 <_Balloc>
 800ad76:	9007      	str	r0, [sp, #28]
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	f43f af11 	beq.w	800aba0 <_strtod_l+0x498>
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	691a      	ldr	r2, [r3, #16]
 800ad82:	3202      	adds	r2, #2
 800ad84:	f103 010c 	add.w	r1, r3, #12
 800ad88:	0092      	lsls	r2, r2, #2
 800ad8a:	300c      	adds	r0, #12
 800ad8c:	f001 fd66 	bl	800c85c <memcpy>
 800ad90:	ec4b ab10 	vmov	d0, sl, fp
 800ad94:	aa20      	add	r2, sp, #128	; 0x80
 800ad96:	a91f      	add	r1, sp, #124	; 0x7c
 800ad98:	4620      	mov	r0, r4
 800ad9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ad9e:	f002 f953 	bl	800d048 <__d2b>
 800ada2:	901e      	str	r0, [sp, #120]	; 0x78
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f43f aefb 	beq.w	800aba0 <_strtod_l+0x498>
 800adaa:	2101      	movs	r1, #1
 800adac:	4620      	mov	r0, r4
 800adae:	f001 fea9 	bl	800cb04 <__i2b>
 800adb2:	4606      	mov	r6, r0
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f43f aef3 	beq.w	800aba0 <_strtod_l+0x498>
 800adba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800adbc:	9904      	ldr	r1, [sp, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfab      	itete	ge
 800adc2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800adc4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800adc6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800adc8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800adcc:	bfac      	ite	ge
 800adce:	eb03 0902 	addge.w	r9, r3, r2
 800add2:	1ad7      	sublt	r7, r2, r3
 800add4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800add6:	eba3 0801 	sub.w	r8, r3, r1
 800adda:	4490      	add	r8, r2
 800addc:	4ba3      	ldr	r3, [pc, #652]	; (800b06c <_strtod_l+0x964>)
 800adde:	f108 38ff 	add.w	r8, r8, #4294967295
 800ade2:	4598      	cmp	r8, r3
 800ade4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ade8:	f280 80cc 	bge.w	800af84 <_strtod_l+0x87c>
 800adec:	eba3 0308 	sub.w	r3, r3, r8
 800adf0:	2b1f      	cmp	r3, #31
 800adf2:	eba2 0203 	sub.w	r2, r2, r3
 800adf6:	f04f 0101 	mov.w	r1, #1
 800adfa:	f300 80b6 	bgt.w	800af6a <_strtod_l+0x862>
 800adfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ae02:	9311      	str	r3, [sp, #68]	; 0x44
 800ae04:	2300      	movs	r3, #0
 800ae06:	930c      	str	r3, [sp, #48]	; 0x30
 800ae08:	eb09 0802 	add.w	r8, r9, r2
 800ae0c:	9b04      	ldr	r3, [sp, #16]
 800ae0e:	45c1      	cmp	r9, r8
 800ae10:	4417      	add	r7, r2
 800ae12:	441f      	add	r7, r3
 800ae14:	464b      	mov	r3, r9
 800ae16:	bfa8      	it	ge
 800ae18:	4643      	movge	r3, r8
 800ae1a:	42bb      	cmp	r3, r7
 800ae1c:	bfa8      	it	ge
 800ae1e:	463b      	movge	r3, r7
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bfc2      	ittt	gt
 800ae24:	eba8 0803 	subgt.w	r8, r8, r3
 800ae28:	1aff      	subgt	r7, r7, r3
 800ae2a:	eba9 0903 	subgt.w	r9, r9, r3
 800ae2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	dd17      	ble.n	800ae64 <_strtod_l+0x75c>
 800ae34:	4631      	mov	r1, r6
 800ae36:	461a      	mov	r2, r3
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f001 ff1f 	bl	800cc7c <__pow5mult>
 800ae3e:	4606      	mov	r6, r0
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f43f aead 	beq.w	800aba0 <_strtod_l+0x498>
 800ae46:	4601      	mov	r1, r0
 800ae48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f001 fe70 	bl	800cb30 <__multiply>
 800ae50:	900f      	str	r0, [sp, #60]	; 0x3c
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f43f aea4 	beq.w	800aba0 <_strtod_l+0x498>
 800ae58:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f001 fd4c 	bl	800c8f8 <_Bfree>
 800ae60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae62:	931e      	str	r3, [sp, #120]	; 0x78
 800ae64:	f1b8 0f00 	cmp.w	r8, #0
 800ae68:	f300 8091 	bgt.w	800af8e <_strtod_l+0x886>
 800ae6c:	9b08      	ldr	r3, [sp, #32]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dd08      	ble.n	800ae84 <_strtod_l+0x77c>
 800ae72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae74:	9907      	ldr	r1, [sp, #28]
 800ae76:	4620      	mov	r0, r4
 800ae78:	f001 ff00 	bl	800cc7c <__pow5mult>
 800ae7c:	9007      	str	r0, [sp, #28]
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	f43f ae8e 	beq.w	800aba0 <_strtod_l+0x498>
 800ae84:	2f00      	cmp	r7, #0
 800ae86:	dd08      	ble.n	800ae9a <_strtod_l+0x792>
 800ae88:	9907      	ldr	r1, [sp, #28]
 800ae8a:	463a      	mov	r2, r7
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f001 ff4f 	bl	800cd30 <__lshift>
 800ae92:	9007      	str	r0, [sp, #28]
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f43f ae83 	beq.w	800aba0 <_strtod_l+0x498>
 800ae9a:	f1b9 0f00 	cmp.w	r9, #0
 800ae9e:	dd08      	ble.n	800aeb2 <_strtod_l+0x7aa>
 800aea0:	4631      	mov	r1, r6
 800aea2:	464a      	mov	r2, r9
 800aea4:	4620      	mov	r0, r4
 800aea6:	f001 ff43 	bl	800cd30 <__lshift>
 800aeaa:	4606      	mov	r6, r0
 800aeac:	2800      	cmp	r0, #0
 800aeae:	f43f ae77 	beq.w	800aba0 <_strtod_l+0x498>
 800aeb2:	9a07      	ldr	r2, [sp, #28]
 800aeb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f001 ffc2 	bl	800ce40 <__mdiff>
 800aebc:	4605      	mov	r5, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f ae6e 	beq.w	800aba0 <_strtod_l+0x498>
 800aec4:	68c3      	ldr	r3, [r0, #12]
 800aec6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aec8:	2300      	movs	r3, #0
 800aeca:	60c3      	str	r3, [r0, #12]
 800aecc:	4631      	mov	r1, r6
 800aece:	f001 ff9b 	bl	800ce08 <__mcmp>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	da65      	bge.n	800afa2 <_strtod_l+0x89a>
 800aed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aed8:	ea53 030a 	orrs.w	r3, r3, sl
 800aedc:	f040 8087 	bne.w	800afee <_strtod_l+0x8e6>
 800aee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f040 8082 	bne.w	800afee <_strtod_l+0x8e6>
 800aeea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aeee:	0d1b      	lsrs	r3, r3, #20
 800aef0:	051b      	lsls	r3, r3, #20
 800aef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aef6:	d97a      	bls.n	800afee <_strtod_l+0x8e6>
 800aef8:	696b      	ldr	r3, [r5, #20]
 800aefa:	b913      	cbnz	r3, 800af02 <_strtod_l+0x7fa>
 800aefc:	692b      	ldr	r3, [r5, #16]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	dd75      	ble.n	800afee <_strtod_l+0x8e6>
 800af02:	4629      	mov	r1, r5
 800af04:	2201      	movs	r2, #1
 800af06:	4620      	mov	r0, r4
 800af08:	f001 ff12 	bl	800cd30 <__lshift>
 800af0c:	4631      	mov	r1, r6
 800af0e:	4605      	mov	r5, r0
 800af10:	f001 ff7a 	bl	800ce08 <__mcmp>
 800af14:	2800      	cmp	r0, #0
 800af16:	dd6a      	ble.n	800afee <_strtod_l+0x8e6>
 800af18:	9904      	ldr	r1, [sp, #16]
 800af1a:	4a55      	ldr	r2, [pc, #340]	; (800b070 <_strtod_l+0x968>)
 800af1c:	465b      	mov	r3, fp
 800af1e:	2900      	cmp	r1, #0
 800af20:	f000 8085 	beq.w	800b02e <_strtod_l+0x926>
 800af24:	ea02 010b 	and.w	r1, r2, fp
 800af28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af2c:	dc7f      	bgt.n	800b02e <_strtod_l+0x926>
 800af2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af32:	f77f aeaa 	ble.w	800ac8a <_strtod_l+0x582>
 800af36:	4a4f      	ldr	r2, [pc, #316]	; (800b074 <_strtod_l+0x96c>)
 800af38:	2300      	movs	r3, #0
 800af3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800af3e:	4650      	mov	r0, sl
 800af40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 fb6f 	bl	8000628 <__aeabi_dmul>
 800af4a:	460b      	mov	r3, r1
 800af4c:	4303      	orrs	r3, r0
 800af4e:	bf08      	it	eq
 800af50:	2322      	moveq	r3, #34	; 0x22
 800af52:	4682      	mov	sl, r0
 800af54:	468b      	mov	fp, r1
 800af56:	bf08      	it	eq
 800af58:	6023      	streq	r3, [r4, #0]
 800af5a:	e62b      	b.n	800abb4 <_strtod_l+0x4ac>
 800af5c:	f04f 32ff 	mov.w	r2, #4294967295
 800af60:	fa02 f303 	lsl.w	r3, r2, r3
 800af64:	ea03 0a0a 	and.w	sl, r3, sl
 800af68:	e6de      	b.n	800ad28 <_strtod_l+0x620>
 800af6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800af6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800af72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800af76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800af7a:	fa01 f308 	lsl.w	r3, r1, r8
 800af7e:	930c      	str	r3, [sp, #48]	; 0x30
 800af80:	9111      	str	r1, [sp, #68]	; 0x44
 800af82:	e741      	b.n	800ae08 <_strtod_l+0x700>
 800af84:	2300      	movs	r3, #0
 800af86:	930c      	str	r3, [sp, #48]	; 0x30
 800af88:	2301      	movs	r3, #1
 800af8a:	9311      	str	r3, [sp, #68]	; 0x44
 800af8c:	e73c      	b.n	800ae08 <_strtod_l+0x700>
 800af8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af90:	4642      	mov	r2, r8
 800af92:	4620      	mov	r0, r4
 800af94:	f001 fecc 	bl	800cd30 <__lshift>
 800af98:	901e      	str	r0, [sp, #120]	; 0x78
 800af9a:	2800      	cmp	r0, #0
 800af9c:	f47f af66 	bne.w	800ae6c <_strtod_l+0x764>
 800afa0:	e5fe      	b.n	800aba0 <_strtod_l+0x498>
 800afa2:	465f      	mov	r7, fp
 800afa4:	d16e      	bne.n	800b084 <_strtod_l+0x97c>
 800afa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afac:	b342      	cbz	r2, 800b000 <_strtod_l+0x8f8>
 800afae:	4a32      	ldr	r2, [pc, #200]	; (800b078 <_strtod_l+0x970>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d128      	bne.n	800b006 <_strtod_l+0x8fe>
 800afb4:	9b04      	ldr	r3, [sp, #16]
 800afb6:	4650      	mov	r0, sl
 800afb8:	b1eb      	cbz	r3, 800aff6 <_strtod_l+0x8ee>
 800afba:	4a2d      	ldr	r2, [pc, #180]	; (800b070 <_strtod_l+0x968>)
 800afbc:	403a      	ands	r2, r7
 800afbe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800afc2:	f04f 31ff 	mov.w	r1, #4294967295
 800afc6:	d819      	bhi.n	800affc <_strtod_l+0x8f4>
 800afc8:	0d12      	lsrs	r2, r2, #20
 800afca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afce:	fa01 f303 	lsl.w	r3, r1, r3
 800afd2:	4298      	cmp	r0, r3
 800afd4:	d117      	bne.n	800b006 <_strtod_l+0x8fe>
 800afd6:	4b29      	ldr	r3, [pc, #164]	; (800b07c <_strtod_l+0x974>)
 800afd8:	429f      	cmp	r7, r3
 800afda:	d102      	bne.n	800afe2 <_strtod_l+0x8da>
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f addf 	beq.w	800aba0 <_strtod_l+0x498>
 800afe2:	4b23      	ldr	r3, [pc, #140]	; (800b070 <_strtod_l+0x968>)
 800afe4:	403b      	ands	r3, r7
 800afe6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800afea:	f04f 0a00 	mov.w	sl, #0
 800afee:	9b04      	ldr	r3, [sp, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1a0      	bne.n	800af36 <_strtod_l+0x82e>
 800aff4:	e5de      	b.n	800abb4 <_strtod_l+0x4ac>
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295
 800affa:	e7ea      	b.n	800afd2 <_strtod_l+0x8ca>
 800affc:	460b      	mov	r3, r1
 800affe:	e7e8      	b.n	800afd2 <_strtod_l+0x8ca>
 800b000:	ea53 030a 	orrs.w	r3, r3, sl
 800b004:	d088      	beq.n	800af18 <_strtod_l+0x810>
 800b006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b008:	b1db      	cbz	r3, 800b042 <_strtod_l+0x93a>
 800b00a:	423b      	tst	r3, r7
 800b00c:	d0ef      	beq.n	800afee <_strtod_l+0x8e6>
 800b00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b010:	9a04      	ldr	r2, [sp, #16]
 800b012:	4650      	mov	r0, sl
 800b014:	4659      	mov	r1, fp
 800b016:	b1c3      	cbz	r3, 800b04a <_strtod_l+0x942>
 800b018:	f7ff fb5a 	bl	800a6d0 <sulp>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b024:	f7f5 f94a 	bl	80002bc <__adddf3>
 800b028:	4682      	mov	sl, r0
 800b02a:	468b      	mov	fp, r1
 800b02c:	e7df      	b.n	800afee <_strtod_l+0x8e6>
 800b02e:	4013      	ands	r3, r2
 800b030:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b034:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b038:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b03c:	f04f 3aff 	mov.w	sl, #4294967295
 800b040:	e7d5      	b.n	800afee <_strtod_l+0x8e6>
 800b042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b044:	ea13 0f0a 	tst.w	r3, sl
 800b048:	e7e0      	b.n	800b00c <_strtod_l+0x904>
 800b04a:	f7ff fb41 	bl	800a6d0 <sulp>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b056:	f7f5 f92f 	bl	80002b8 <__aeabi_dsub>
 800b05a:	2200      	movs	r2, #0
 800b05c:	2300      	movs	r3, #0
 800b05e:	4682      	mov	sl, r0
 800b060:	468b      	mov	fp, r1
 800b062:	f7f5 fd49 	bl	8000af8 <__aeabi_dcmpeq>
 800b066:	2800      	cmp	r0, #0
 800b068:	d0c1      	beq.n	800afee <_strtod_l+0x8e6>
 800b06a:	e60e      	b.n	800ac8a <_strtod_l+0x582>
 800b06c:	fffffc02 	.word	0xfffffc02
 800b070:	7ff00000 	.word	0x7ff00000
 800b074:	39500000 	.word	0x39500000
 800b078:	000fffff 	.word	0x000fffff
 800b07c:	7fefffff 	.word	0x7fefffff
 800b080:	08011500 	.word	0x08011500
 800b084:	4631      	mov	r1, r6
 800b086:	4628      	mov	r0, r5
 800b088:	f002 f83a 	bl	800d100 <__ratio>
 800b08c:	ec59 8b10 	vmov	r8, r9, d0
 800b090:	ee10 0a10 	vmov	r0, s0
 800b094:	2200      	movs	r2, #0
 800b096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7f5 fd40 	bl	8000b20 <__aeabi_dcmple>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d07c      	beq.n	800b19e <_strtod_l+0xa96>
 800b0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d04c      	beq.n	800b144 <_strtod_l+0xa3c>
 800b0aa:	4b95      	ldr	r3, [pc, #596]	; (800b300 <_strtod_l+0xbf8>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b0b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b300 <_strtod_l+0xbf8>
 800b0b6:	f04f 0800 	mov.w	r8, #0
 800b0ba:	4b92      	ldr	r3, [pc, #584]	; (800b304 <_strtod_l+0xbfc>)
 800b0bc:	403b      	ands	r3, r7
 800b0be:	9311      	str	r3, [sp, #68]	; 0x44
 800b0c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0c2:	4b91      	ldr	r3, [pc, #580]	; (800b308 <_strtod_l+0xc00>)
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	f040 80b2 	bne.w	800b22e <_strtod_l+0xb26>
 800b0ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b0d6:	ec4b ab10 	vmov	d0, sl, fp
 800b0da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b0de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b0e2:	f001 ff35 	bl	800cf50 <__ulp>
 800b0e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0ea:	ec53 2b10 	vmov	r2, r3, d0
 800b0ee:	f7f5 fa9b 	bl	8000628 <__aeabi_dmul>
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	f7f5 f8e1 	bl	80002bc <__adddf3>
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4981      	ldr	r1, [pc, #516]	; (800b304 <_strtod_l+0xbfc>)
 800b0fe:	4a83      	ldr	r2, [pc, #524]	; (800b30c <_strtod_l+0xc04>)
 800b100:	4019      	ands	r1, r3
 800b102:	4291      	cmp	r1, r2
 800b104:	4682      	mov	sl, r0
 800b106:	d95e      	bls.n	800b1c6 <_strtod_l+0xabe>
 800b108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b10e:	4293      	cmp	r3, r2
 800b110:	d103      	bne.n	800b11a <_strtod_l+0xa12>
 800b112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b114:	3301      	adds	r3, #1
 800b116:	f43f ad43 	beq.w	800aba0 <_strtod_l+0x498>
 800b11a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b318 <_strtod_l+0xc10>
 800b11e:	f04f 3aff 	mov.w	sl, #4294967295
 800b122:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b124:	4620      	mov	r0, r4
 800b126:	f001 fbe7 	bl	800c8f8 <_Bfree>
 800b12a:	9907      	ldr	r1, [sp, #28]
 800b12c:	4620      	mov	r0, r4
 800b12e:	f001 fbe3 	bl	800c8f8 <_Bfree>
 800b132:	4631      	mov	r1, r6
 800b134:	4620      	mov	r0, r4
 800b136:	f001 fbdf 	bl	800c8f8 <_Bfree>
 800b13a:	4629      	mov	r1, r5
 800b13c:	4620      	mov	r0, r4
 800b13e:	f001 fbdb 	bl	800c8f8 <_Bfree>
 800b142:	e613      	b.n	800ad6c <_strtod_l+0x664>
 800b144:	f1ba 0f00 	cmp.w	sl, #0
 800b148:	d11b      	bne.n	800b182 <_strtod_l+0xa7a>
 800b14a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b14e:	b9f3      	cbnz	r3, 800b18e <_strtod_l+0xa86>
 800b150:	4b6b      	ldr	r3, [pc, #428]	; (800b300 <_strtod_l+0xbf8>)
 800b152:	2200      	movs	r2, #0
 800b154:	4640      	mov	r0, r8
 800b156:	4649      	mov	r1, r9
 800b158:	f7f5 fcd8 	bl	8000b0c <__aeabi_dcmplt>
 800b15c:	b9d0      	cbnz	r0, 800b194 <_strtod_l+0xa8c>
 800b15e:	4640      	mov	r0, r8
 800b160:	4649      	mov	r1, r9
 800b162:	4b6b      	ldr	r3, [pc, #428]	; (800b310 <_strtod_l+0xc08>)
 800b164:	2200      	movs	r2, #0
 800b166:	f7f5 fa5f 	bl	8000628 <__aeabi_dmul>
 800b16a:	4680      	mov	r8, r0
 800b16c:	4689      	mov	r9, r1
 800b16e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b172:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b176:	931b      	str	r3, [sp, #108]	; 0x6c
 800b178:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b17c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b180:	e79b      	b.n	800b0ba <_strtod_l+0x9b2>
 800b182:	f1ba 0f01 	cmp.w	sl, #1
 800b186:	d102      	bne.n	800b18e <_strtod_l+0xa86>
 800b188:	2f00      	cmp	r7, #0
 800b18a:	f43f ad7e 	beq.w	800ac8a <_strtod_l+0x582>
 800b18e:	4b61      	ldr	r3, [pc, #388]	; (800b314 <_strtod_l+0xc0c>)
 800b190:	2200      	movs	r2, #0
 800b192:	e78c      	b.n	800b0ae <_strtod_l+0x9a6>
 800b194:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b310 <_strtod_l+0xc08>
 800b198:	f04f 0800 	mov.w	r8, #0
 800b19c:	e7e7      	b.n	800b16e <_strtod_l+0xa66>
 800b19e:	4b5c      	ldr	r3, [pc, #368]	; (800b310 <_strtod_l+0xc08>)
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f7f5 fa3f 	bl	8000628 <__aeabi_dmul>
 800b1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	b933      	cbnz	r3, 800b1c0 <_strtod_l+0xab8>
 800b1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b6:	9012      	str	r0, [sp, #72]	; 0x48
 800b1b8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b1be:	e7dd      	b.n	800b17c <_strtod_l+0xa74>
 800b1c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b1c4:	e7f9      	b.n	800b1ba <_strtod_l+0xab2>
 800b1c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1a8      	bne.n	800b122 <_strtod_l+0xa1a>
 800b1d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1d6:	0d1b      	lsrs	r3, r3, #20
 800b1d8:	051b      	lsls	r3, r3, #20
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d1a1      	bne.n	800b122 <_strtod_l+0xa1a>
 800b1de:	4640      	mov	r0, r8
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	f7f5 fd31 	bl	8000c48 <__aeabi_d2lz>
 800b1e6:	f7f5 f9f1 	bl	80005cc <__aeabi_l2d>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	f7f5 f861 	bl	80002b8 <__aeabi_dsub>
 800b1f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1fc:	ea43 030a 	orr.w	r3, r3, sl
 800b200:	4313      	orrs	r3, r2
 800b202:	4680      	mov	r8, r0
 800b204:	4689      	mov	r9, r1
 800b206:	d053      	beq.n	800b2b0 <_strtod_l+0xba8>
 800b208:	a335      	add	r3, pc, #212	; (adr r3, 800b2e0 <_strtod_l+0xbd8>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 fc7d 	bl	8000b0c <__aeabi_dcmplt>
 800b212:	2800      	cmp	r0, #0
 800b214:	f47f acce 	bne.w	800abb4 <_strtod_l+0x4ac>
 800b218:	a333      	add	r3, pc, #204	; (adr r3, 800b2e8 <_strtod_l+0xbe0>)
 800b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 fc91 	bl	8000b48 <__aeabi_dcmpgt>
 800b226:	2800      	cmp	r0, #0
 800b228:	f43f af7b 	beq.w	800b122 <_strtod_l+0xa1a>
 800b22c:	e4c2      	b.n	800abb4 <_strtod_l+0x4ac>
 800b22e:	9b04      	ldr	r3, [sp, #16]
 800b230:	b333      	cbz	r3, 800b280 <_strtod_l+0xb78>
 800b232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b234:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b238:	d822      	bhi.n	800b280 <_strtod_l+0xb78>
 800b23a:	a32d      	add	r3, pc, #180	; (adr r3, 800b2f0 <_strtod_l+0xbe8>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	4640      	mov	r0, r8
 800b242:	4649      	mov	r1, r9
 800b244:	f7f5 fc6c 	bl	8000b20 <__aeabi_dcmple>
 800b248:	b1a0      	cbz	r0, 800b274 <_strtod_l+0xb6c>
 800b24a:	4649      	mov	r1, r9
 800b24c:	4640      	mov	r0, r8
 800b24e:	f7f5 fcc3 	bl	8000bd8 <__aeabi_d2uiz>
 800b252:	2801      	cmp	r0, #1
 800b254:	bf38      	it	cc
 800b256:	2001      	movcc	r0, #1
 800b258:	f7f5 f96c 	bl	8000534 <__aeabi_ui2d>
 800b25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b25e:	4680      	mov	r8, r0
 800b260:	4689      	mov	r9, r1
 800b262:	bb13      	cbnz	r3, 800b2aa <_strtod_l+0xba2>
 800b264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b268:	9014      	str	r0, [sp, #80]	; 0x50
 800b26a:	9315      	str	r3, [sp, #84]	; 0x54
 800b26c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b270:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b278:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b27c:	1a9b      	subs	r3, r3, r2
 800b27e:	930d      	str	r3, [sp, #52]	; 0x34
 800b280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b284:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b288:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b28c:	f001 fe60 	bl	800cf50 <__ulp>
 800b290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b294:	ec53 2b10 	vmov	r2, r3, d0
 800b298:	f7f5 f9c6 	bl	8000628 <__aeabi_dmul>
 800b29c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2a0:	f7f5 f80c 	bl	80002bc <__adddf3>
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	468b      	mov	fp, r1
 800b2a8:	e78f      	b.n	800b1ca <_strtod_l+0xac2>
 800b2aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b2ae:	e7dd      	b.n	800b26c <_strtod_l+0xb64>
 800b2b0:	a311      	add	r3, pc, #68	; (adr r3, 800b2f8 <_strtod_l+0xbf0>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f7f5 fc29 	bl	8000b0c <__aeabi_dcmplt>
 800b2ba:	e7b4      	b.n	800b226 <_strtod_l+0xb1e>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	930e      	str	r3, [sp, #56]	; 0x38
 800b2c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	f7ff ba65 	b.w	800a794 <_strtod_l+0x8c>
 800b2ca:	2b65      	cmp	r3, #101	; 0x65
 800b2cc:	f43f ab5d 	beq.w	800a98a <_strtod_l+0x282>
 800b2d0:	2b45      	cmp	r3, #69	; 0x45
 800b2d2:	f43f ab5a 	beq.w	800a98a <_strtod_l+0x282>
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f7ff bb92 	b.w	800aa00 <_strtod_l+0x2f8>
 800b2dc:	f3af 8000 	nop.w
 800b2e0:	94a03595 	.word	0x94a03595
 800b2e4:	3fdfffff 	.word	0x3fdfffff
 800b2e8:	35afe535 	.word	0x35afe535
 800b2ec:	3fe00000 	.word	0x3fe00000
 800b2f0:	ffc00000 	.word	0xffc00000
 800b2f4:	41dfffff 	.word	0x41dfffff
 800b2f8:	94a03595 	.word	0x94a03595
 800b2fc:	3fcfffff 	.word	0x3fcfffff
 800b300:	3ff00000 	.word	0x3ff00000
 800b304:	7ff00000 	.word	0x7ff00000
 800b308:	7fe00000 	.word	0x7fe00000
 800b30c:	7c9fffff 	.word	0x7c9fffff
 800b310:	3fe00000 	.word	0x3fe00000
 800b314:	bff00000 	.word	0xbff00000
 800b318:	7fefffff 	.word	0x7fefffff

0800b31c <strtod>:
 800b31c:	460a      	mov	r2, r1
 800b31e:	4601      	mov	r1, r0
 800b320:	4802      	ldr	r0, [pc, #8]	; (800b32c <strtod+0x10>)
 800b322:	4b03      	ldr	r3, [pc, #12]	; (800b330 <strtod+0x14>)
 800b324:	6800      	ldr	r0, [r0, #0]
 800b326:	f7ff b9ef 	b.w	800a708 <_strtod_l>
 800b32a:	bf00      	nop
 800b32c:	20000054 	.word	0x20000054
 800b330:	200000bc 	.word	0x200000bc

0800b334 <_strtol_l.isra.0>:
 800b334:	2b01      	cmp	r3, #1
 800b336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33a:	d001      	beq.n	800b340 <_strtol_l.isra.0+0xc>
 800b33c:	2b24      	cmp	r3, #36	; 0x24
 800b33e:	d906      	bls.n	800b34e <_strtol_l.isra.0+0x1a>
 800b340:	f7fe fcf0 	bl	8009d24 <__errno>
 800b344:	2316      	movs	r3, #22
 800b346:	6003      	str	r3, [r0, #0]
 800b348:	2000      	movs	r0, #0
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	4f3a      	ldr	r7, [pc, #232]	; (800b438 <_strtol_l.isra.0+0x104>)
 800b350:	468e      	mov	lr, r1
 800b352:	4676      	mov	r6, lr
 800b354:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b358:	5de5      	ldrb	r5, [r4, r7]
 800b35a:	f015 0508 	ands.w	r5, r5, #8
 800b35e:	d1f8      	bne.n	800b352 <_strtol_l.isra.0+0x1e>
 800b360:	2c2d      	cmp	r4, #45	; 0x2d
 800b362:	d134      	bne.n	800b3ce <_strtol_l.isra.0+0x9a>
 800b364:	f89e 4000 	ldrb.w	r4, [lr]
 800b368:	f04f 0801 	mov.w	r8, #1
 800b36c:	f106 0e02 	add.w	lr, r6, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d05c      	beq.n	800b42e <_strtol_l.isra.0+0xfa>
 800b374:	2b10      	cmp	r3, #16
 800b376:	d10c      	bne.n	800b392 <_strtol_l.isra.0+0x5e>
 800b378:	2c30      	cmp	r4, #48	; 0x30
 800b37a:	d10a      	bne.n	800b392 <_strtol_l.isra.0+0x5e>
 800b37c:	f89e 4000 	ldrb.w	r4, [lr]
 800b380:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b384:	2c58      	cmp	r4, #88	; 0x58
 800b386:	d14d      	bne.n	800b424 <_strtol_l.isra.0+0xf0>
 800b388:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b38c:	2310      	movs	r3, #16
 800b38e:	f10e 0e02 	add.w	lr, lr, #2
 800b392:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b396:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b39a:	2600      	movs	r6, #0
 800b39c:	fbbc f9f3 	udiv	r9, ip, r3
 800b3a0:	4635      	mov	r5, r6
 800b3a2:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b3aa:	2f09      	cmp	r7, #9
 800b3ac:	d818      	bhi.n	800b3e0 <_strtol_l.isra.0+0xac>
 800b3ae:	463c      	mov	r4, r7
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	dd24      	ble.n	800b3fe <_strtol_l.isra.0+0xca>
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	db1f      	blt.n	800b3f8 <_strtol_l.isra.0+0xc4>
 800b3b8:	45a9      	cmp	r9, r5
 800b3ba:	d31d      	bcc.n	800b3f8 <_strtol_l.isra.0+0xc4>
 800b3bc:	d101      	bne.n	800b3c2 <_strtol_l.isra.0+0x8e>
 800b3be:	45a2      	cmp	sl, r4
 800b3c0:	db1a      	blt.n	800b3f8 <_strtol_l.isra.0+0xc4>
 800b3c2:	fb05 4503 	mla	r5, r5, r3, r4
 800b3c6:	2601      	movs	r6, #1
 800b3c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b3cc:	e7eb      	b.n	800b3a6 <_strtol_l.isra.0+0x72>
 800b3ce:	2c2b      	cmp	r4, #43	; 0x2b
 800b3d0:	bf08      	it	eq
 800b3d2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b3d6:	46a8      	mov	r8, r5
 800b3d8:	bf08      	it	eq
 800b3da:	f106 0e02 	addeq.w	lr, r6, #2
 800b3de:	e7c7      	b.n	800b370 <_strtol_l.isra.0+0x3c>
 800b3e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b3e4:	2f19      	cmp	r7, #25
 800b3e6:	d801      	bhi.n	800b3ec <_strtol_l.isra.0+0xb8>
 800b3e8:	3c37      	subs	r4, #55	; 0x37
 800b3ea:	e7e1      	b.n	800b3b0 <_strtol_l.isra.0+0x7c>
 800b3ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b3f0:	2f19      	cmp	r7, #25
 800b3f2:	d804      	bhi.n	800b3fe <_strtol_l.isra.0+0xca>
 800b3f4:	3c57      	subs	r4, #87	; 0x57
 800b3f6:	e7db      	b.n	800b3b0 <_strtol_l.isra.0+0x7c>
 800b3f8:	f04f 36ff 	mov.w	r6, #4294967295
 800b3fc:	e7e4      	b.n	800b3c8 <_strtol_l.isra.0+0x94>
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	da05      	bge.n	800b40e <_strtol_l.isra.0+0xda>
 800b402:	2322      	movs	r3, #34	; 0x22
 800b404:	6003      	str	r3, [r0, #0]
 800b406:	4665      	mov	r5, ip
 800b408:	b942      	cbnz	r2, 800b41c <_strtol_l.isra.0+0xe8>
 800b40a:	4628      	mov	r0, r5
 800b40c:	e79d      	b.n	800b34a <_strtol_l.isra.0+0x16>
 800b40e:	f1b8 0f00 	cmp.w	r8, #0
 800b412:	d000      	beq.n	800b416 <_strtol_l.isra.0+0xe2>
 800b414:	426d      	negs	r5, r5
 800b416:	2a00      	cmp	r2, #0
 800b418:	d0f7      	beq.n	800b40a <_strtol_l.isra.0+0xd6>
 800b41a:	b10e      	cbz	r6, 800b420 <_strtol_l.isra.0+0xec>
 800b41c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b420:	6011      	str	r1, [r2, #0]
 800b422:	e7f2      	b.n	800b40a <_strtol_l.isra.0+0xd6>
 800b424:	2430      	movs	r4, #48	; 0x30
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1b3      	bne.n	800b392 <_strtol_l.isra.0+0x5e>
 800b42a:	2308      	movs	r3, #8
 800b42c:	e7b1      	b.n	800b392 <_strtol_l.isra.0+0x5e>
 800b42e:	2c30      	cmp	r4, #48	; 0x30
 800b430:	d0a4      	beq.n	800b37c <_strtol_l.isra.0+0x48>
 800b432:	230a      	movs	r3, #10
 800b434:	e7ad      	b.n	800b392 <_strtol_l.isra.0+0x5e>
 800b436:	bf00      	nop
 800b438:	08011529 	.word	0x08011529

0800b43c <strtol>:
 800b43c:	4613      	mov	r3, r2
 800b43e:	460a      	mov	r2, r1
 800b440:	4601      	mov	r1, r0
 800b442:	4802      	ldr	r0, [pc, #8]	; (800b44c <strtol+0x10>)
 800b444:	6800      	ldr	r0, [r0, #0]
 800b446:	f7ff bf75 	b.w	800b334 <_strtol_l.isra.0>
 800b44a:	bf00      	nop
 800b44c:	20000054 	.word	0x20000054

0800b450 <quorem>:
 800b450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	6903      	ldr	r3, [r0, #16]
 800b456:	690c      	ldr	r4, [r1, #16]
 800b458:	42a3      	cmp	r3, r4
 800b45a:	4607      	mov	r7, r0
 800b45c:	f2c0 8081 	blt.w	800b562 <quorem+0x112>
 800b460:	3c01      	subs	r4, #1
 800b462:	f101 0814 	add.w	r8, r1, #20
 800b466:	f100 0514 	add.w	r5, r0, #20
 800b46a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b478:	3301      	adds	r3, #1
 800b47a:	429a      	cmp	r2, r3
 800b47c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b484:	fbb2 f6f3 	udiv	r6, r2, r3
 800b488:	d331      	bcc.n	800b4ee <quorem+0x9e>
 800b48a:	f04f 0e00 	mov.w	lr, #0
 800b48e:	4640      	mov	r0, r8
 800b490:	46ac      	mov	ip, r5
 800b492:	46f2      	mov	sl, lr
 800b494:	f850 2b04 	ldr.w	r2, [r0], #4
 800b498:	b293      	uxth	r3, r2
 800b49a:	fb06 e303 	mla	r3, r6, r3, lr
 800b49e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	ebaa 0303 	sub.w	r3, sl, r3
 800b4a8:	0c12      	lsrs	r2, r2, #16
 800b4aa:	f8dc a000 	ldr.w	sl, [ip]
 800b4ae:	fb06 e202 	mla	r2, r6, r2, lr
 800b4b2:	fa13 f38a 	uxtah	r3, r3, sl
 800b4b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4ba:	fa1f fa82 	uxth.w	sl, r2
 800b4be:	f8dc 2000 	ldr.w	r2, [ip]
 800b4c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b4c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4d0:	4581      	cmp	r9, r0
 800b4d2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4da:	d2db      	bcs.n	800b494 <quorem+0x44>
 800b4dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4e0:	b92b      	cbnz	r3, 800b4ee <quorem+0x9e>
 800b4e2:	9b01      	ldr	r3, [sp, #4]
 800b4e4:	3b04      	subs	r3, #4
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	d32e      	bcc.n	800b54a <quorem+0xfa>
 800b4ec:	613c      	str	r4, [r7, #16]
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f001 fc8a 	bl	800ce08 <__mcmp>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	db24      	blt.n	800b542 <quorem+0xf2>
 800b4f8:	3601      	adds	r6, #1
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f04f 0c00 	mov.w	ip, #0
 800b500:	f858 2b04 	ldr.w	r2, [r8], #4
 800b504:	f8d0 e000 	ldr.w	lr, [r0]
 800b508:	b293      	uxth	r3, r2
 800b50a:	ebac 0303 	sub.w	r3, ip, r3
 800b50e:	0c12      	lsrs	r2, r2, #16
 800b510:	fa13 f38e 	uxtah	r3, r3, lr
 800b514:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b518:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b522:	45c1      	cmp	r9, r8
 800b524:	f840 3b04 	str.w	r3, [r0], #4
 800b528:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b52c:	d2e8      	bcs.n	800b500 <quorem+0xb0>
 800b52e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b536:	b922      	cbnz	r2, 800b542 <quorem+0xf2>
 800b538:	3b04      	subs	r3, #4
 800b53a:	429d      	cmp	r5, r3
 800b53c:	461a      	mov	r2, r3
 800b53e:	d30a      	bcc.n	800b556 <quorem+0x106>
 800b540:	613c      	str	r4, [r7, #16]
 800b542:	4630      	mov	r0, r6
 800b544:	b003      	add	sp, #12
 800b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	3b04      	subs	r3, #4
 800b54e:	2a00      	cmp	r2, #0
 800b550:	d1cc      	bne.n	800b4ec <quorem+0x9c>
 800b552:	3c01      	subs	r4, #1
 800b554:	e7c7      	b.n	800b4e6 <quorem+0x96>
 800b556:	6812      	ldr	r2, [r2, #0]
 800b558:	3b04      	subs	r3, #4
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	d1f0      	bne.n	800b540 <quorem+0xf0>
 800b55e:	3c01      	subs	r4, #1
 800b560:	e7eb      	b.n	800b53a <quorem+0xea>
 800b562:	2000      	movs	r0, #0
 800b564:	e7ee      	b.n	800b544 <quorem+0xf4>
	...

0800b568 <_dtoa_r>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	ed2d 8b02 	vpush	{d8}
 800b570:	ec57 6b10 	vmov	r6, r7, d0
 800b574:	b095      	sub	sp, #84	; 0x54
 800b576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b57c:	9105      	str	r1, [sp, #20]
 800b57e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b582:	4604      	mov	r4, r0
 800b584:	9209      	str	r2, [sp, #36]	; 0x24
 800b586:	930f      	str	r3, [sp, #60]	; 0x3c
 800b588:	b975      	cbnz	r5, 800b5a8 <_dtoa_r+0x40>
 800b58a:	2010      	movs	r0, #16
 800b58c:	f001 f94c 	bl	800c828 <malloc>
 800b590:	4602      	mov	r2, r0
 800b592:	6260      	str	r0, [r4, #36]	; 0x24
 800b594:	b920      	cbnz	r0, 800b5a0 <_dtoa_r+0x38>
 800b596:	4bb2      	ldr	r3, [pc, #712]	; (800b860 <_dtoa_r+0x2f8>)
 800b598:	21ea      	movs	r1, #234	; 0xea
 800b59a:	48b2      	ldr	r0, [pc, #712]	; (800b864 <_dtoa_r+0x2fc>)
 800b59c:	f002 f874 	bl	800d688 <__assert_func>
 800b5a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5a4:	6005      	str	r5, [r0, #0]
 800b5a6:	60c5      	str	r5, [r0, #12]
 800b5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5aa:	6819      	ldr	r1, [r3, #0]
 800b5ac:	b151      	cbz	r1, 800b5c4 <_dtoa_r+0x5c>
 800b5ae:	685a      	ldr	r2, [r3, #4]
 800b5b0:	604a      	str	r2, [r1, #4]
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	4093      	lsls	r3, r2
 800b5b6:	608b      	str	r3, [r1, #8]
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f001 f99d 	bl	800c8f8 <_Bfree>
 800b5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	1e3b      	subs	r3, r7, #0
 800b5c6:	bfb9      	ittee	lt
 800b5c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5cc:	9303      	strlt	r3, [sp, #12]
 800b5ce:	2300      	movge	r3, #0
 800b5d0:	f8c8 3000 	strge.w	r3, [r8]
 800b5d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b5d8:	4ba3      	ldr	r3, [pc, #652]	; (800b868 <_dtoa_r+0x300>)
 800b5da:	bfbc      	itt	lt
 800b5dc:	2201      	movlt	r2, #1
 800b5de:	f8c8 2000 	strlt.w	r2, [r8]
 800b5e2:	ea33 0309 	bics.w	r3, r3, r9
 800b5e6:	d11b      	bne.n	800b620 <_dtoa_r+0xb8>
 800b5e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5ee:	6013      	str	r3, [r2, #0]
 800b5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5f4:	4333      	orrs	r3, r6
 800b5f6:	f000 857a 	beq.w	800c0ee <_dtoa_r+0xb86>
 800b5fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5fc:	b963      	cbnz	r3, 800b618 <_dtoa_r+0xb0>
 800b5fe:	4b9b      	ldr	r3, [pc, #620]	; (800b86c <_dtoa_r+0x304>)
 800b600:	e024      	b.n	800b64c <_dtoa_r+0xe4>
 800b602:	4b9b      	ldr	r3, [pc, #620]	; (800b870 <_dtoa_r+0x308>)
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	3308      	adds	r3, #8
 800b608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b60a:	6013      	str	r3, [r2, #0]
 800b60c:	9800      	ldr	r0, [sp, #0]
 800b60e:	b015      	add	sp, #84	; 0x54
 800b610:	ecbd 8b02 	vpop	{d8}
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	4b94      	ldr	r3, [pc, #592]	; (800b86c <_dtoa_r+0x304>)
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	3303      	adds	r3, #3
 800b61e:	e7f3      	b.n	800b608 <_dtoa_r+0xa0>
 800b620:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b624:	2200      	movs	r2, #0
 800b626:	ec51 0b17 	vmov	r0, r1, d7
 800b62a:	2300      	movs	r3, #0
 800b62c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b630:	f7f5 fa62 	bl	8000af8 <__aeabi_dcmpeq>
 800b634:	4680      	mov	r8, r0
 800b636:	b158      	cbz	r0, 800b650 <_dtoa_r+0xe8>
 800b638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b63a:	2301      	movs	r3, #1
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 8551 	beq.w	800c0e8 <_dtoa_r+0xb80>
 800b646:	488b      	ldr	r0, [pc, #556]	; (800b874 <_dtoa_r+0x30c>)
 800b648:	6018      	str	r0, [r3, #0]
 800b64a:	1e43      	subs	r3, r0, #1
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	e7dd      	b.n	800b60c <_dtoa_r+0xa4>
 800b650:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b654:	aa12      	add	r2, sp, #72	; 0x48
 800b656:	a913      	add	r1, sp, #76	; 0x4c
 800b658:	4620      	mov	r0, r4
 800b65a:	f001 fcf5 	bl	800d048 <__d2b>
 800b65e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b662:	4683      	mov	fp, r0
 800b664:	2d00      	cmp	r5, #0
 800b666:	d07c      	beq.n	800b762 <_dtoa_r+0x1fa>
 800b668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b66a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b672:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b676:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b67a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b67e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b682:	4b7d      	ldr	r3, [pc, #500]	; (800b878 <_dtoa_r+0x310>)
 800b684:	2200      	movs	r2, #0
 800b686:	4630      	mov	r0, r6
 800b688:	4639      	mov	r1, r7
 800b68a:	f7f4 fe15 	bl	80002b8 <__aeabi_dsub>
 800b68e:	a36e      	add	r3, pc, #440	; (adr r3, 800b848 <_dtoa_r+0x2e0>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 ffc8 	bl	8000628 <__aeabi_dmul>
 800b698:	a36d      	add	r3, pc, #436	; (adr r3, 800b850 <_dtoa_r+0x2e8>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	f7f4 fe0d 	bl	80002bc <__adddf3>
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	f7f4 ff54 	bl	8000554 <__aeabi_i2d>
 800b6ac:	a36a      	add	r3, pc, #424	; (adr r3, 800b858 <_dtoa_r+0x2f0>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 ffb9 	bl	8000628 <__aeabi_dmul>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	4639      	mov	r1, r7
 800b6be:	f7f4 fdfd 	bl	80002bc <__adddf3>
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	f7f5 fa5f 	bl	8000b88 <__aeabi_d2iz>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7f5 fa1a 	bl	8000b0c <__aeabi_dcmplt>
 800b6d8:	b148      	cbz	r0, 800b6ee <_dtoa_r+0x186>
 800b6da:	4650      	mov	r0, sl
 800b6dc:	f7f4 ff3a 	bl	8000554 <__aeabi_i2d>
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	463b      	mov	r3, r7
 800b6e4:	f7f5 fa08 	bl	8000af8 <__aeabi_dcmpeq>
 800b6e8:	b908      	cbnz	r0, 800b6ee <_dtoa_r+0x186>
 800b6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6ee:	f1ba 0f16 	cmp.w	sl, #22
 800b6f2:	d854      	bhi.n	800b79e <_dtoa_r+0x236>
 800b6f4:	4b61      	ldr	r3, [pc, #388]	; (800b87c <_dtoa_r+0x314>)
 800b6f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b702:	f7f5 fa03 	bl	8000b0c <__aeabi_dcmplt>
 800b706:	2800      	cmp	r0, #0
 800b708:	d04b      	beq.n	800b7a2 <_dtoa_r+0x23a>
 800b70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b70e:	2300      	movs	r3, #0
 800b710:	930e      	str	r3, [sp, #56]	; 0x38
 800b712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b714:	1b5d      	subs	r5, r3, r5
 800b716:	1e6b      	subs	r3, r5, #1
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	bf43      	ittte	mi
 800b71c:	2300      	movmi	r3, #0
 800b71e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b722:	9304      	strmi	r3, [sp, #16]
 800b724:	f04f 0800 	movpl.w	r8, #0
 800b728:	f1ba 0f00 	cmp.w	sl, #0
 800b72c:	db3b      	blt.n	800b7a6 <_dtoa_r+0x23e>
 800b72e:	9b04      	ldr	r3, [sp, #16]
 800b730:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b734:	4453      	add	r3, sl
 800b736:	9304      	str	r3, [sp, #16]
 800b738:	2300      	movs	r3, #0
 800b73a:	9306      	str	r3, [sp, #24]
 800b73c:	9b05      	ldr	r3, [sp, #20]
 800b73e:	2b09      	cmp	r3, #9
 800b740:	d869      	bhi.n	800b816 <_dtoa_r+0x2ae>
 800b742:	2b05      	cmp	r3, #5
 800b744:	bfc4      	itt	gt
 800b746:	3b04      	subgt	r3, #4
 800b748:	9305      	strgt	r3, [sp, #20]
 800b74a:	9b05      	ldr	r3, [sp, #20]
 800b74c:	f1a3 0302 	sub.w	r3, r3, #2
 800b750:	bfcc      	ite	gt
 800b752:	2500      	movgt	r5, #0
 800b754:	2501      	movle	r5, #1
 800b756:	2b03      	cmp	r3, #3
 800b758:	d869      	bhi.n	800b82e <_dtoa_r+0x2c6>
 800b75a:	e8df f003 	tbb	[pc, r3]
 800b75e:	4e2c      	.short	0x4e2c
 800b760:	5a4c      	.short	0x5a4c
 800b762:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b766:	441d      	add	r5, r3
 800b768:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b76c:	2b20      	cmp	r3, #32
 800b76e:	bfc1      	itttt	gt
 800b770:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b774:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b778:	fa09 f303 	lslgt.w	r3, r9, r3
 800b77c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b780:	bfda      	itte	le
 800b782:	f1c3 0320 	rsble	r3, r3, #32
 800b786:	fa06 f003 	lslle.w	r0, r6, r3
 800b78a:	4318      	orrgt	r0, r3
 800b78c:	f7f4 fed2 	bl	8000534 <__aeabi_ui2d>
 800b790:	2301      	movs	r3, #1
 800b792:	4606      	mov	r6, r0
 800b794:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b798:	3d01      	subs	r5, #1
 800b79a:	9310      	str	r3, [sp, #64]	; 0x40
 800b79c:	e771      	b.n	800b682 <_dtoa_r+0x11a>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e7b6      	b.n	800b710 <_dtoa_r+0x1a8>
 800b7a2:	900e      	str	r0, [sp, #56]	; 0x38
 800b7a4:	e7b5      	b.n	800b712 <_dtoa_r+0x1aa>
 800b7a6:	f1ca 0300 	rsb	r3, sl, #0
 800b7aa:	9306      	str	r3, [sp, #24]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	eba8 080a 	sub.w	r8, r8, sl
 800b7b2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7b4:	e7c2      	b.n	800b73c <_dtoa_r+0x1d4>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9308      	str	r3, [sp, #32]
 800b7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dc39      	bgt.n	800b834 <_dtoa_r+0x2cc>
 800b7c0:	f04f 0901 	mov.w	r9, #1
 800b7c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7c8:	464b      	mov	r3, r9
 800b7ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b7ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	6042      	str	r2, [r0, #4]
 800b7d4:	2204      	movs	r2, #4
 800b7d6:	f102 0614 	add.w	r6, r2, #20
 800b7da:	429e      	cmp	r6, r3
 800b7dc:	6841      	ldr	r1, [r0, #4]
 800b7de:	d92f      	bls.n	800b840 <_dtoa_r+0x2d8>
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f001 f849 	bl	800c878 <_Balloc>
 800b7e6:	9000      	str	r0, [sp, #0]
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d14b      	bne.n	800b884 <_dtoa_r+0x31c>
 800b7ec:	4b24      	ldr	r3, [pc, #144]	; (800b880 <_dtoa_r+0x318>)
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b7f4:	e6d1      	b.n	800b59a <_dtoa_r+0x32>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7de      	b.n	800b7b8 <_dtoa_r+0x250>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9308      	str	r3, [sp, #32]
 800b7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b800:	eb0a 0903 	add.w	r9, sl, r3
 800b804:	f109 0301 	add.w	r3, r9, #1
 800b808:	2b01      	cmp	r3, #1
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	bfb8      	it	lt
 800b80e:	2301      	movlt	r3, #1
 800b810:	e7dd      	b.n	800b7ce <_dtoa_r+0x266>
 800b812:	2301      	movs	r3, #1
 800b814:	e7f2      	b.n	800b7fc <_dtoa_r+0x294>
 800b816:	2501      	movs	r5, #1
 800b818:	2300      	movs	r3, #0
 800b81a:	9305      	str	r3, [sp, #20]
 800b81c:	9508      	str	r5, [sp, #32]
 800b81e:	f04f 39ff 	mov.w	r9, #4294967295
 800b822:	2200      	movs	r2, #0
 800b824:	f8cd 9004 	str.w	r9, [sp, #4]
 800b828:	2312      	movs	r3, #18
 800b82a:	9209      	str	r2, [sp, #36]	; 0x24
 800b82c:	e7cf      	b.n	800b7ce <_dtoa_r+0x266>
 800b82e:	2301      	movs	r3, #1
 800b830:	9308      	str	r3, [sp, #32]
 800b832:	e7f4      	b.n	800b81e <_dtoa_r+0x2b6>
 800b834:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b838:	f8cd 9004 	str.w	r9, [sp, #4]
 800b83c:	464b      	mov	r3, r9
 800b83e:	e7c6      	b.n	800b7ce <_dtoa_r+0x266>
 800b840:	3101      	adds	r1, #1
 800b842:	6041      	str	r1, [r0, #4]
 800b844:	0052      	lsls	r2, r2, #1
 800b846:	e7c6      	b.n	800b7d6 <_dtoa_r+0x26e>
 800b848:	636f4361 	.word	0x636f4361
 800b84c:	3fd287a7 	.word	0x3fd287a7
 800b850:	8b60c8b3 	.word	0x8b60c8b3
 800b854:	3fc68a28 	.word	0x3fc68a28
 800b858:	509f79fb 	.word	0x509f79fb
 800b85c:	3fd34413 	.word	0x3fd34413
 800b860:	08011636 	.word	0x08011636
 800b864:	0801164d 	.word	0x0801164d
 800b868:	7ff00000 	.word	0x7ff00000
 800b86c:	08011632 	.word	0x08011632
 800b870:	08011629 	.word	0x08011629
 800b874:	080114b1 	.word	0x080114b1
 800b878:	3ff80000 	.word	0x3ff80000
 800b87c:	080117c8 	.word	0x080117c8
 800b880:	080116ac 	.word	0x080116ac
 800b884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b886:	9a00      	ldr	r2, [sp, #0]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	9b01      	ldr	r3, [sp, #4]
 800b88c:	2b0e      	cmp	r3, #14
 800b88e:	f200 80ad 	bhi.w	800b9ec <_dtoa_r+0x484>
 800b892:	2d00      	cmp	r5, #0
 800b894:	f000 80aa 	beq.w	800b9ec <_dtoa_r+0x484>
 800b898:	f1ba 0f00 	cmp.w	sl, #0
 800b89c:	dd36      	ble.n	800b90c <_dtoa_r+0x3a4>
 800b89e:	4ac3      	ldr	r2, [pc, #780]	; (800bbac <_dtoa_r+0x644>)
 800b8a0:	f00a 030f 	and.w	r3, sl, #15
 800b8a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8a8:	ed93 7b00 	vldr	d7, [r3]
 800b8ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b8b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b8b4:	eeb0 8a47 	vmov.f32	s16, s14
 800b8b8:	eef0 8a67 	vmov.f32	s17, s15
 800b8bc:	d016      	beq.n	800b8ec <_dtoa_r+0x384>
 800b8be:	4bbc      	ldr	r3, [pc, #752]	; (800bbb0 <_dtoa_r+0x648>)
 800b8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8c8:	f7f4 ffd8 	bl	800087c <__aeabi_ddiv>
 800b8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d0:	f007 070f 	and.w	r7, r7, #15
 800b8d4:	2503      	movs	r5, #3
 800b8d6:	4eb6      	ldr	r6, [pc, #728]	; (800bbb0 <_dtoa_r+0x648>)
 800b8d8:	b957      	cbnz	r7, 800b8f0 <_dtoa_r+0x388>
 800b8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8de:	ec53 2b18 	vmov	r2, r3, d8
 800b8e2:	f7f4 ffcb 	bl	800087c <__aeabi_ddiv>
 800b8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8ea:	e029      	b.n	800b940 <_dtoa_r+0x3d8>
 800b8ec:	2502      	movs	r5, #2
 800b8ee:	e7f2      	b.n	800b8d6 <_dtoa_r+0x36e>
 800b8f0:	07f9      	lsls	r1, r7, #31
 800b8f2:	d508      	bpl.n	800b906 <_dtoa_r+0x39e>
 800b8f4:	ec51 0b18 	vmov	r0, r1, d8
 800b8f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8fc:	f7f4 fe94 	bl	8000628 <__aeabi_dmul>
 800b900:	ec41 0b18 	vmov	d8, r0, r1
 800b904:	3501      	adds	r5, #1
 800b906:	107f      	asrs	r7, r7, #1
 800b908:	3608      	adds	r6, #8
 800b90a:	e7e5      	b.n	800b8d8 <_dtoa_r+0x370>
 800b90c:	f000 80a6 	beq.w	800ba5c <_dtoa_r+0x4f4>
 800b910:	f1ca 0600 	rsb	r6, sl, #0
 800b914:	4ba5      	ldr	r3, [pc, #660]	; (800bbac <_dtoa_r+0x644>)
 800b916:	4fa6      	ldr	r7, [pc, #664]	; (800bbb0 <_dtoa_r+0x648>)
 800b918:	f006 020f 	and.w	r2, r6, #15
 800b91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b928:	f7f4 fe7e 	bl	8000628 <__aeabi_dmul>
 800b92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b930:	1136      	asrs	r6, r6, #4
 800b932:	2300      	movs	r3, #0
 800b934:	2502      	movs	r5, #2
 800b936:	2e00      	cmp	r6, #0
 800b938:	f040 8085 	bne.w	800ba46 <_dtoa_r+0x4de>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1d2      	bne.n	800b8e6 <_dtoa_r+0x37e>
 800b940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 808c 	beq.w	800ba60 <_dtoa_r+0x4f8>
 800b948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b94c:	4b99      	ldr	r3, [pc, #612]	; (800bbb4 <_dtoa_r+0x64c>)
 800b94e:	2200      	movs	r2, #0
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 f8da 	bl	8000b0c <__aeabi_dcmplt>
 800b958:	2800      	cmp	r0, #0
 800b95a:	f000 8081 	beq.w	800ba60 <_dtoa_r+0x4f8>
 800b95e:	9b01      	ldr	r3, [sp, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d07d      	beq.n	800ba60 <_dtoa_r+0x4f8>
 800b964:	f1b9 0f00 	cmp.w	r9, #0
 800b968:	dd3c      	ble.n	800b9e4 <_dtoa_r+0x47c>
 800b96a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b96e:	9307      	str	r3, [sp, #28]
 800b970:	2200      	movs	r2, #0
 800b972:	4b91      	ldr	r3, [pc, #580]	; (800bbb8 <_dtoa_r+0x650>)
 800b974:	4630      	mov	r0, r6
 800b976:	4639      	mov	r1, r7
 800b978:	f7f4 fe56 	bl	8000628 <__aeabi_dmul>
 800b97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b980:	3501      	adds	r5, #1
 800b982:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b986:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7f4 fde2 	bl	8000554 <__aeabi_i2d>
 800b990:	4632      	mov	r2, r6
 800b992:	463b      	mov	r3, r7
 800b994:	f7f4 fe48 	bl	8000628 <__aeabi_dmul>
 800b998:	4b88      	ldr	r3, [pc, #544]	; (800bbbc <_dtoa_r+0x654>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7f4 fc8e 	bl	80002bc <__adddf3>
 800b9a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9a8:	9303      	str	r3, [sp, #12]
 800b9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d15c      	bne.n	800ba6a <_dtoa_r+0x502>
 800b9b0:	4b83      	ldr	r3, [pc, #524]	; (800bbc0 <_dtoa_r+0x658>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	f7f4 fc7e 	bl	80002b8 <__aeabi_dsub>
 800b9bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	460f      	mov	r7, r1
 800b9c4:	f7f5 f8c0 	bl	8000b48 <__aeabi_dcmpgt>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	f040 8296 	bne.w	800befa <_dtoa_r+0x992>
 800b9ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9d8:	4639      	mov	r1, r7
 800b9da:	f7f5 f897 	bl	8000b0c <__aeabi_dcmplt>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f040 8288 	bne.w	800bef4 <_dtoa_r+0x98c>
 800b9e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f2c0 8158 	blt.w	800bca4 <_dtoa_r+0x73c>
 800b9f4:	f1ba 0f0e 	cmp.w	sl, #14
 800b9f8:	f300 8154 	bgt.w	800bca4 <_dtoa_r+0x73c>
 800b9fc:	4b6b      	ldr	r3, [pc, #428]	; (800bbac <_dtoa_r+0x644>)
 800b9fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f280 80e3 	bge.w	800bbd4 <_dtoa_r+0x66c>
 800ba0e:	9b01      	ldr	r3, [sp, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f300 80df 	bgt.w	800bbd4 <_dtoa_r+0x66c>
 800ba16:	f040 826d 	bne.w	800bef4 <_dtoa_r+0x98c>
 800ba1a:	4b69      	ldr	r3, [pc, #420]	; (800bbc0 <_dtoa_r+0x658>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4649      	mov	r1, r9
 800ba22:	f7f4 fe01 	bl	8000628 <__aeabi_dmul>
 800ba26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba2a:	f7f5 f883 	bl	8000b34 <__aeabi_dcmpge>
 800ba2e:	9e01      	ldr	r6, [sp, #4]
 800ba30:	4637      	mov	r7, r6
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f040 8243 	bne.w	800bebe <_dtoa_r+0x956>
 800ba38:	9d00      	ldr	r5, [sp, #0]
 800ba3a:	2331      	movs	r3, #49	; 0x31
 800ba3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ba40:	f10a 0a01 	add.w	sl, sl, #1
 800ba44:	e23f      	b.n	800bec6 <_dtoa_r+0x95e>
 800ba46:	07f2      	lsls	r2, r6, #31
 800ba48:	d505      	bpl.n	800ba56 <_dtoa_r+0x4ee>
 800ba4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba4e:	f7f4 fdeb 	bl	8000628 <__aeabi_dmul>
 800ba52:	3501      	adds	r5, #1
 800ba54:	2301      	movs	r3, #1
 800ba56:	1076      	asrs	r6, r6, #1
 800ba58:	3708      	adds	r7, #8
 800ba5a:	e76c      	b.n	800b936 <_dtoa_r+0x3ce>
 800ba5c:	2502      	movs	r5, #2
 800ba5e:	e76f      	b.n	800b940 <_dtoa_r+0x3d8>
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	f8cd a01c 	str.w	sl, [sp, #28]
 800ba66:	930c      	str	r3, [sp, #48]	; 0x30
 800ba68:	e78d      	b.n	800b986 <_dtoa_r+0x41e>
 800ba6a:	9900      	ldr	r1, [sp, #0]
 800ba6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba70:	4b4e      	ldr	r3, [pc, #312]	; (800bbac <_dtoa_r+0x644>)
 800ba72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba76:	4401      	add	r1, r0
 800ba78:	9102      	str	r1, [sp, #8]
 800ba7a:	9908      	ldr	r1, [sp, #32]
 800ba7c:	eeb0 8a47 	vmov.f32	s16, s14
 800ba80:	eef0 8a67 	vmov.f32	s17, s15
 800ba84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	d045      	beq.n	800bb1c <_dtoa_r+0x5b4>
 800ba90:	494c      	ldr	r1, [pc, #304]	; (800bbc4 <_dtoa_r+0x65c>)
 800ba92:	2000      	movs	r0, #0
 800ba94:	f7f4 fef2 	bl	800087c <__aeabi_ddiv>
 800ba98:	ec53 2b18 	vmov	r2, r3, d8
 800ba9c:	f7f4 fc0c 	bl	80002b8 <__aeabi_dsub>
 800baa0:	9d00      	ldr	r5, [sp, #0]
 800baa2:	ec41 0b18 	vmov	d8, r0, r1
 800baa6:	4639      	mov	r1, r7
 800baa8:	4630      	mov	r0, r6
 800baaa:	f7f5 f86d 	bl	8000b88 <__aeabi_d2iz>
 800baae:	900c      	str	r0, [sp, #48]	; 0x30
 800bab0:	f7f4 fd50 	bl	8000554 <__aeabi_i2d>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	4630      	mov	r0, r6
 800baba:	4639      	mov	r1, r7
 800babc:	f7f4 fbfc 	bl	80002b8 <__aeabi_dsub>
 800bac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bac2:	3330      	adds	r3, #48	; 0x30
 800bac4:	f805 3b01 	strb.w	r3, [r5], #1
 800bac8:	ec53 2b18 	vmov	r2, r3, d8
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	f7f5 f81c 	bl	8000b0c <__aeabi_dcmplt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d165      	bne.n	800bba4 <_dtoa_r+0x63c>
 800bad8:	4632      	mov	r2, r6
 800bada:	463b      	mov	r3, r7
 800badc:	4935      	ldr	r1, [pc, #212]	; (800bbb4 <_dtoa_r+0x64c>)
 800bade:	2000      	movs	r0, #0
 800bae0:	f7f4 fbea 	bl	80002b8 <__aeabi_dsub>
 800bae4:	ec53 2b18 	vmov	r2, r3, d8
 800bae8:	f7f5 f810 	bl	8000b0c <__aeabi_dcmplt>
 800baec:	2800      	cmp	r0, #0
 800baee:	f040 80b9 	bne.w	800bc64 <_dtoa_r+0x6fc>
 800baf2:	9b02      	ldr	r3, [sp, #8]
 800baf4:	429d      	cmp	r5, r3
 800baf6:	f43f af75 	beq.w	800b9e4 <_dtoa_r+0x47c>
 800bafa:	4b2f      	ldr	r3, [pc, #188]	; (800bbb8 <_dtoa_r+0x650>)
 800bafc:	ec51 0b18 	vmov	r0, r1, d8
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7f4 fd91 	bl	8000628 <__aeabi_dmul>
 800bb06:	4b2c      	ldr	r3, [pc, #176]	; (800bbb8 <_dtoa_r+0x650>)
 800bb08:	ec41 0b18 	vmov	d8, r0, r1
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4630      	mov	r0, r6
 800bb10:	4639      	mov	r1, r7
 800bb12:	f7f4 fd89 	bl	8000628 <__aeabi_dmul>
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	e7c4      	b.n	800baa6 <_dtoa_r+0x53e>
 800bb1c:	ec51 0b17 	vmov	r0, r1, d7
 800bb20:	f7f4 fd82 	bl	8000628 <__aeabi_dmul>
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	9d00      	ldr	r5, [sp, #0]
 800bb28:	930c      	str	r3, [sp, #48]	; 0x30
 800bb2a:	ec41 0b18 	vmov	d8, r0, r1
 800bb2e:	4639      	mov	r1, r7
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7f5 f829 	bl	8000b88 <__aeabi_d2iz>
 800bb36:	9011      	str	r0, [sp, #68]	; 0x44
 800bb38:	f7f4 fd0c 	bl	8000554 <__aeabi_i2d>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4630      	mov	r0, r6
 800bb42:	4639      	mov	r1, r7
 800bb44:	f7f4 fbb8 	bl	80002b8 <__aeabi_dsub>
 800bb48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb4a:	3330      	adds	r3, #48	; 0x30
 800bb4c:	f805 3b01 	strb.w	r3, [r5], #1
 800bb50:	9b02      	ldr	r3, [sp, #8]
 800bb52:	429d      	cmp	r5, r3
 800bb54:	4606      	mov	r6, r0
 800bb56:	460f      	mov	r7, r1
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	d134      	bne.n	800bbc8 <_dtoa_r+0x660>
 800bb5e:	4b19      	ldr	r3, [pc, #100]	; (800bbc4 <_dtoa_r+0x65c>)
 800bb60:	ec51 0b18 	vmov	r0, r1, d8
 800bb64:	f7f4 fbaa 	bl	80002bc <__adddf3>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	4639      	mov	r1, r7
 800bb70:	f7f4 ffea 	bl	8000b48 <__aeabi_dcmpgt>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d175      	bne.n	800bc64 <_dtoa_r+0x6fc>
 800bb78:	ec53 2b18 	vmov	r2, r3, d8
 800bb7c:	4911      	ldr	r1, [pc, #68]	; (800bbc4 <_dtoa_r+0x65c>)
 800bb7e:	2000      	movs	r0, #0
 800bb80:	f7f4 fb9a 	bl	80002b8 <__aeabi_dsub>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 ffbe 	bl	8000b0c <__aeabi_dcmplt>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	f43f af27 	beq.w	800b9e4 <_dtoa_r+0x47c>
 800bb96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb98:	1e6b      	subs	r3, r5, #1
 800bb9a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bba0:	2b30      	cmp	r3, #48	; 0x30
 800bba2:	d0f8      	beq.n	800bb96 <_dtoa_r+0x62e>
 800bba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bba8:	e04a      	b.n	800bc40 <_dtoa_r+0x6d8>
 800bbaa:	bf00      	nop
 800bbac:	080117c8 	.word	0x080117c8
 800bbb0:	080117a0 	.word	0x080117a0
 800bbb4:	3ff00000 	.word	0x3ff00000
 800bbb8:	40240000 	.word	0x40240000
 800bbbc:	401c0000 	.word	0x401c0000
 800bbc0:	40140000 	.word	0x40140000
 800bbc4:	3fe00000 	.word	0x3fe00000
 800bbc8:	4baf      	ldr	r3, [pc, #700]	; (800be88 <_dtoa_r+0x920>)
 800bbca:	f7f4 fd2d 	bl	8000628 <__aeabi_dmul>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	460f      	mov	r7, r1
 800bbd2:	e7ac      	b.n	800bb2e <_dtoa_r+0x5c6>
 800bbd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbd8:	9d00      	ldr	r5, [sp, #0]
 800bbda:	4642      	mov	r2, r8
 800bbdc:	464b      	mov	r3, r9
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 fe4b 	bl	800087c <__aeabi_ddiv>
 800bbe6:	f7f4 ffcf 	bl	8000b88 <__aeabi_d2iz>
 800bbea:	9002      	str	r0, [sp, #8]
 800bbec:	f7f4 fcb2 	bl	8000554 <__aeabi_i2d>
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	f7f4 fd18 	bl	8000628 <__aeabi_dmul>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	4639      	mov	r1, r7
 800bc00:	f7f4 fb5a 	bl	80002b8 <__aeabi_dsub>
 800bc04:	9e02      	ldr	r6, [sp, #8]
 800bc06:	9f01      	ldr	r7, [sp, #4]
 800bc08:	3630      	adds	r6, #48	; 0x30
 800bc0a:	f805 6b01 	strb.w	r6, [r5], #1
 800bc0e:	9e00      	ldr	r6, [sp, #0]
 800bc10:	1bae      	subs	r6, r5, r6
 800bc12:	42b7      	cmp	r7, r6
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	d137      	bne.n	800bc8a <_dtoa_r+0x722>
 800bc1a:	f7f4 fb4f 	bl	80002bc <__adddf3>
 800bc1e:	4642      	mov	r2, r8
 800bc20:	464b      	mov	r3, r9
 800bc22:	4606      	mov	r6, r0
 800bc24:	460f      	mov	r7, r1
 800bc26:	f7f4 ff8f 	bl	8000b48 <__aeabi_dcmpgt>
 800bc2a:	b9c8      	cbnz	r0, 800bc60 <_dtoa_r+0x6f8>
 800bc2c:	4642      	mov	r2, r8
 800bc2e:	464b      	mov	r3, r9
 800bc30:	4630      	mov	r0, r6
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 ff60 	bl	8000af8 <__aeabi_dcmpeq>
 800bc38:	b110      	cbz	r0, 800bc40 <_dtoa_r+0x6d8>
 800bc3a:	9b02      	ldr	r3, [sp, #8]
 800bc3c:	07d9      	lsls	r1, r3, #31
 800bc3e:	d40f      	bmi.n	800bc60 <_dtoa_r+0x6f8>
 800bc40:	4620      	mov	r0, r4
 800bc42:	4659      	mov	r1, fp
 800bc44:	f000 fe58 	bl	800c8f8 <_Bfree>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	702b      	strb	r3, [r5, #0]
 800bc4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc4e:	f10a 0001 	add.w	r0, sl, #1
 800bc52:	6018      	str	r0, [r3, #0]
 800bc54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f43f acd8 	beq.w	800b60c <_dtoa_r+0xa4>
 800bc5c:	601d      	str	r5, [r3, #0]
 800bc5e:	e4d5      	b.n	800b60c <_dtoa_r+0xa4>
 800bc60:	f8cd a01c 	str.w	sl, [sp, #28]
 800bc64:	462b      	mov	r3, r5
 800bc66:	461d      	mov	r5, r3
 800bc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc6c:	2a39      	cmp	r2, #57	; 0x39
 800bc6e:	d108      	bne.n	800bc82 <_dtoa_r+0x71a>
 800bc70:	9a00      	ldr	r2, [sp, #0]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d1f7      	bne.n	800bc66 <_dtoa_r+0x6fe>
 800bc76:	9a07      	ldr	r2, [sp, #28]
 800bc78:	9900      	ldr	r1, [sp, #0]
 800bc7a:	3201      	adds	r2, #1
 800bc7c:	9207      	str	r2, [sp, #28]
 800bc7e:	2230      	movs	r2, #48	; 0x30
 800bc80:	700a      	strb	r2, [r1, #0]
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	3201      	adds	r2, #1
 800bc86:	701a      	strb	r2, [r3, #0]
 800bc88:	e78c      	b.n	800bba4 <_dtoa_r+0x63c>
 800bc8a:	4b7f      	ldr	r3, [pc, #508]	; (800be88 <_dtoa_r+0x920>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f7f4 fccb 	bl	8000628 <__aeabi_dmul>
 800bc92:	2200      	movs	r2, #0
 800bc94:	2300      	movs	r3, #0
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	f7f4 ff2d 	bl	8000af8 <__aeabi_dcmpeq>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d09b      	beq.n	800bbda <_dtoa_r+0x672>
 800bca2:	e7cd      	b.n	800bc40 <_dtoa_r+0x6d8>
 800bca4:	9a08      	ldr	r2, [sp, #32]
 800bca6:	2a00      	cmp	r2, #0
 800bca8:	f000 80c4 	beq.w	800be34 <_dtoa_r+0x8cc>
 800bcac:	9a05      	ldr	r2, [sp, #20]
 800bcae:	2a01      	cmp	r2, #1
 800bcb0:	f300 80a8 	bgt.w	800be04 <_dtoa_r+0x89c>
 800bcb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	f000 80a0 	beq.w	800bdfc <_dtoa_r+0x894>
 800bcbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcc0:	9e06      	ldr	r6, [sp, #24]
 800bcc2:	4645      	mov	r5, r8
 800bcc4:	9a04      	ldr	r2, [sp, #16]
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	441a      	add	r2, r3
 800bcca:	4620      	mov	r0, r4
 800bccc:	4498      	add	r8, r3
 800bcce:	9204      	str	r2, [sp, #16]
 800bcd0:	f000 ff18 	bl	800cb04 <__i2b>
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	dd0b      	ble.n	800bcf2 <_dtoa_r+0x78a>
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd08      	ble.n	800bcf2 <_dtoa_r+0x78a>
 800bce0:	42ab      	cmp	r3, r5
 800bce2:	9a04      	ldr	r2, [sp, #16]
 800bce4:	bfa8      	it	ge
 800bce6:	462b      	movge	r3, r5
 800bce8:	eba8 0803 	sub.w	r8, r8, r3
 800bcec:	1aed      	subs	r5, r5, r3
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	9b06      	ldr	r3, [sp, #24]
 800bcf4:	b1fb      	cbz	r3, 800bd36 <_dtoa_r+0x7ce>
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 809f 	beq.w	800be3c <_dtoa_r+0x8d4>
 800bcfe:	2e00      	cmp	r6, #0
 800bd00:	dd11      	ble.n	800bd26 <_dtoa_r+0x7be>
 800bd02:	4639      	mov	r1, r7
 800bd04:	4632      	mov	r2, r6
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 ffb8 	bl	800cc7c <__pow5mult>
 800bd0c:	465a      	mov	r2, fp
 800bd0e:	4601      	mov	r1, r0
 800bd10:	4607      	mov	r7, r0
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 ff0c 	bl	800cb30 <__multiply>
 800bd18:	4659      	mov	r1, fp
 800bd1a:	9007      	str	r0, [sp, #28]
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 fdeb 	bl	800c8f8 <_Bfree>
 800bd22:	9b07      	ldr	r3, [sp, #28]
 800bd24:	469b      	mov	fp, r3
 800bd26:	9b06      	ldr	r3, [sp, #24]
 800bd28:	1b9a      	subs	r2, r3, r6
 800bd2a:	d004      	beq.n	800bd36 <_dtoa_r+0x7ce>
 800bd2c:	4659      	mov	r1, fp
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 ffa4 	bl	800cc7c <__pow5mult>
 800bd34:	4683      	mov	fp, r0
 800bd36:	2101      	movs	r1, #1
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fee3 	bl	800cb04 <__i2b>
 800bd3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	4606      	mov	r6, r0
 800bd44:	dd7c      	ble.n	800be40 <_dtoa_r+0x8d8>
 800bd46:	461a      	mov	r2, r3
 800bd48:	4601      	mov	r1, r0
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 ff96 	bl	800cc7c <__pow5mult>
 800bd50:	9b05      	ldr	r3, [sp, #20]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	4606      	mov	r6, r0
 800bd56:	dd76      	ble.n	800be46 <_dtoa_r+0x8de>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9306      	str	r3, [sp, #24]
 800bd5c:	6933      	ldr	r3, [r6, #16]
 800bd5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd62:	6918      	ldr	r0, [r3, #16]
 800bd64:	f000 fe7e 	bl	800ca64 <__hi0bits>
 800bd68:	f1c0 0020 	rsb	r0, r0, #32
 800bd6c:	9b04      	ldr	r3, [sp, #16]
 800bd6e:	4418      	add	r0, r3
 800bd70:	f010 001f 	ands.w	r0, r0, #31
 800bd74:	f000 8086 	beq.w	800be84 <_dtoa_r+0x91c>
 800bd78:	f1c0 0320 	rsb	r3, r0, #32
 800bd7c:	2b04      	cmp	r3, #4
 800bd7e:	dd7f      	ble.n	800be80 <_dtoa_r+0x918>
 800bd80:	f1c0 001c 	rsb	r0, r0, #28
 800bd84:	9b04      	ldr	r3, [sp, #16]
 800bd86:	4403      	add	r3, r0
 800bd88:	4480      	add	r8, r0
 800bd8a:	4405      	add	r5, r0
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	f1b8 0f00 	cmp.w	r8, #0
 800bd92:	dd05      	ble.n	800bda0 <_dtoa_r+0x838>
 800bd94:	4659      	mov	r1, fp
 800bd96:	4642      	mov	r2, r8
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 ffc9 	bl	800cd30 <__lshift>
 800bd9e:	4683      	mov	fp, r0
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dd05      	ble.n	800bdb2 <_dtoa_r+0x84a>
 800bda6:	4631      	mov	r1, r6
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 ffc0 	bl	800cd30 <__lshift>
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d069      	beq.n	800be8c <_dtoa_r+0x924>
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4658      	mov	r0, fp
 800bdbc:	f001 f824 	bl	800ce08 <__mcmp>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	da63      	bge.n	800be8c <_dtoa_r+0x924>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	4659      	mov	r1, fp
 800bdc8:	220a      	movs	r2, #10
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fdb6 	bl	800c93c <__multadd>
 800bdd0:	9b08      	ldr	r3, [sp, #32]
 800bdd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdd6:	4683      	mov	fp, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 818f 	beq.w	800c0fc <_dtoa_r+0xb94>
 800bdde:	4639      	mov	r1, r7
 800bde0:	2300      	movs	r3, #0
 800bde2:	220a      	movs	r2, #10
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fda9 	bl	800c93c <__multadd>
 800bdea:	f1b9 0f00 	cmp.w	r9, #0
 800bdee:	4607      	mov	r7, r0
 800bdf0:	f300 808e 	bgt.w	800bf10 <_dtoa_r+0x9a8>
 800bdf4:	9b05      	ldr	r3, [sp, #20]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	dc50      	bgt.n	800be9c <_dtoa_r+0x934>
 800bdfa:	e089      	b.n	800bf10 <_dtoa_r+0x9a8>
 800bdfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be02:	e75d      	b.n	800bcc0 <_dtoa_r+0x758>
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	1e5e      	subs	r6, r3, #1
 800be08:	9b06      	ldr	r3, [sp, #24]
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	bfbf      	itttt	lt
 800be0e:	9b06      	ldrlt	r3, [sp, #24]
 800be10:	9606      	strlt	r6, [sp, #24]
 800be12:	1af2      	sublt	r2, r6, r3
 800be14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800be16:	bfb6      	itet	lt
 800be18:	189b      	addlt	r3, r3, r2
 800be1a:	1b9e      	subge	r6, r3, r6
 800be1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	bfb8      	it	lt
 800be22:	2600      	movlt	r6, #0
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfb5      	itete	lt
 800be28:	eba8 0503 	sublt.w	r5, r8, r3
 800be2c:	9b01      	ldrge	r3, [sp, #4]
 800be2e:	2300      	movlt	r3, #0
 800be30:	4645      	movge	r5, r8
 800be32:	e747      	b.n	800bcc4 <_dtoa_r+0x75c>
 800be34:	9e06      	ldr	r6, [sp, #24]
 800be36:	9f08      	ldr	r7, [sp, #32]
 800be38:	4645      	mov	r5, r8
 800be3a:	e74c      	b.n	800bcd6 <_dtoa_r+0x76e>
 800be3c:	9a06      	ldr	r2, [sp, #24]
 800be3e:	e775      	b.n	800bd2c <_dtoa_r+0x7c4>
 800be40:	9b05      	ldr	r3, [sp, #20]
 800be42:	2b01      	cmp	r3, #1
 800be44:	dc18      	bgt.n	800be78 <_dtoa_r+0x910>
 800be46:	9b02      	ldr	r3, [sp, #8]
 800be48:	b9b3      	cbnz	r3, 800be78 <_dtoa_r+0x910>
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be50:	b9a3      	cbnz	r3, 800be7c <_dtoa_r+0x914>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be58:	0d1b      	lsrs	r3, r3, #20
 800be5a:	051b      	lsls	r3, r3, #20
 800be5c:	b12b      	cbz	r3, 800be6a <_dtoa_r+0x902>
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	3301      	adds	r3, #1
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	f108 0801 	add.w	r8, r8, #1
 800be68:	2301      	movs	r3, #1
 800be6a:	9306      	str	r3, [sp, #24]
 800be6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f47f af74 	bne.w	800bd5c <_dtoa_r+0x7f4>
 800be74:	2001      	movs	r0, #1
 800be76:	e779      	b.n	800bd6c <_dtoa_r+0x804>
 800be78:	2300      	movs	r3, #0
 800be7a:	e7f6      	b.n	800be6a <_dtoa_r+0x902>
 800be7c:	9b02      	ldr	r3, [sp, #8]
 800be7e:	e7f4      	b.n	800be6a <_dtoa_r+0x902>
 800be80:	d085      	beq.n	800bd8e <_dtoa_r+0x826>
 800be82:	4618      	mov	r0, r3
 800be84:	301c      	adds	r0, #28
 800be86:	e77d      	b.n	800bd84 <_dtoa_r+0x81c>
 800be88:	40240000 	.word	0x40240000
 800be8c:	9b01      	ldr	r3, [sp, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dc38      	bgt.n	800bf04 <_dtoa_r+0x99c>
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	2b02      	cmp	r3, #2
 800be96:	dd35      	ble.n	800bf04 <_dtoa_r+0x99c>
 800be98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800be9c:	f1b9 0f00 	cmp.w	r9, #0
 800bea0:	d10d      	bne.n	800bebe <_dtoa_r+0x956>
 800bea2:	4631      	mov	r1, r6
 800bea4:	464b      	mov	r3, r9
 800bea6:	2205      	movs	r2, #5
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 fd47 	bl	800c93c <__multadd>
 800beae:	4601      	mov	r1, r0
 800beb0:	4606      	mov	r6, r0
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 ffa8 	bl	800ce08 <__mcmp>
 800beb8:	2800      	cmp	r0, #0
 800beba:	f73f adbd 	bgt.w	800ba38 <_dtoa_r+0x4d0>
 800bebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec0:	9d00      	ldr	r5, [sp, #0]
 800bec2:	ea6f 0a03 	mvn.w	sl, r3
 800bec6:	f04f 0800 	mov.w	r8, #0
 800beca:	4631      	mov	r1, r6
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fd13 	bl	800c8f8 <_Bfree>
 800bed2:	2f00      	cmp	r7, #0
 800bed4:	f43f aeb4 	beq.w	800bc40 <_dtoa_r+0x6d8>
 800bed8:	f1b8 0f00 	cmp.w	r8, #0
 800bedc:	d005      	beq.n	800beea <_dtoa_r+0x982>
 800bede:	45b8      	cmp	r8, r7
 800bee0:	d003      	beq.n	800beea <_dtoa_r+0x982>
 800bee2:	4641      	mov	r1, r8
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 fd07 	bl	800c8f8 <_Bfree>
 800beea:	4639      	mov	r1, r7
 800beec:	4620      	mov	r0, r4
 800beee:	f000 fd03 	bl	800c8f8 <_Bfree>
 800bef2:	e6a5      	b.n	800bc40 <_dtoa_r+0x6d8>
 800bef4:	2600      	movs	r6, #0
 800bef6:	4637      	mov	r7, r6
 800bef8:	e7e1      	b.n	800bebe <_dtoa_r+0x956>
 800befa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800befc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bf00:	4637      	mov	r7, r6
 800bf02:	e599      	b.n	800ba38 <_dtoa_r+0x4d0>
 800bf04:	9b08      	ldr	r3, [sp, #32]
 800bf06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 80fd 	beq.w	800c10a <_dtoa_r+0xba2>
 800bf10:	2d00      	cmp	r5, #0
 800bf12:	dd05      	ble.n	800bf20 <_dtoa_r+0x9b8>
 800bf14:	4639      	mov	r1, r7
 800bf16:	462a      	mov	r2, r5
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 ff09 	bl	800cd30 <__lshift>
 800bf1e:	4607      	mov	r7, r0
 800bf20:	9b06      	ldr	r3, [sp, #24]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d05c      	beq.n	800bfe0 <_dtoa_r+0xa78>
 800bf26:	6879      	ldr	r1, [r7, #4]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f000 fca5 	bl	800c878 <_Balloc>
 800bf2e:	4605      	mov	r5, r0
 800bf30:	b928      	cbnz	r0, 800bf3e <_dtoa_r+0x9d6>
 800bf32:	4b80      	ldr	r3, [pc, #512]	; (800c134 <_dtoa_r+0xbcc>)
 800bf34:	4602      	mov	r2, r0
 800bf36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf3a:	f7ff bb2e 	b.w	800b59a <_dtoa_r+0x32>
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	3202      	adds	r2, #2
 800bf42:	0092      	lsls	r2, r2, #2
 800bf44:	f107 010c 	add.w	r1, r7, #12
 800bf48:	300c      	adds	r0, #12
 800bf4a:	f000 fc87 	bl	800c85c <memcpy>
 800bf4e:	2201      	movs	r2, #1
 800bf50:	4629      	mov	r1, r5
 800bf52:	4620      	mov	r0, r4
 800bf54:	f000 feec 	bl	800cd30 <__lshift>
 800bf58:	9b00      	ldr	r3, [sp, #0]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	9b00      	ldr	r3, [sp, #0]
 800bf60:	444b      	add	r3, r9
 800bf62:	9307      	str	r3, [sp, #28]
 800bf64:	9b02      	ldr	r3, [sp, #8]
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	46b8      	mov	r8, r7
 800bf6c:	9306      	str	r3, [sp, #24]
 800bf6e:	4607      	mov	r7, r0
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	4631      	mov	r1, r6
 800bf74:	3b01      	subs	r3, #1
 800bf76:	4658      	mov	r0, fp
 800bf78:	9302      	str	r3, [sp, #8]
 800bf7a:	f7ff fa69 	bl	800b450 <quorem>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	3330      	adds	r3, #48	; 0x30
 800bf82:	9004      	str	r0, [sp, #16]
 800bf84:	4641      	mov	r1, r8
 800bf86:	4658      	mov	r0, fp
 800bf88:	9308      	str	r3, [sp, #32]
 800bf8a:	f000 ff3d 	bl	800ce08 <__mcmp>
 800bf8e:	463a      	mov	r2, r7
 800bf90:	4681      	mov	r9, r0
 800bf92:	4631      	mov	r1, r6
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 ff53 	bl	800ce40 <__mdiff>
 800bf9a:	68c2      	ldr	r2, [r0, #12]
 800bf9c:	9b08      	ldr	r3, [sp, #32]
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	bb02      	cbnz	r2, 800bfe4 <_dtoa_r+0xa7c>
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	f000 ff2f 	bl	800ce08 <__mcmp>
 800bfaa:	9b08      	ldr	r3, [sp, #32]
 800bfac:	4602      	mov	r2, r0
 800bfae:	4629      	mov	r1, r5
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bfb6:	f000 fc9f 	bl	800c8f8 <_Bfree>
 800bfba:	9b05      	ldr	r3, [sp, #20]
 800bfbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfbe:	9d01      	ldr	r5, [sp, #4]
 800bfc0:	ea43 0102 	orr.w	r1, r3, r2
 800bfc4:	9b06      	ldr	r3, [sp, #24]
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	9b08      	ldr	r3, [sp, #32]
 800bfca:	d10d      	bne.n	800bfe8 <_dtoa_r+0xa80>
 800bfcc:	2b39      	cmp	r3, #57	; 0x39
 800bfce:	d029      	beq.n	800c024 <_dtoa_r+0xabc>
 800bfd0:	f1b9 0f00 	cmp.w	r9, #0
 800bfd4:	dd01      	ble.n	800bfda <_dtoa_r+0xa72>
 800bfd6:	9b04      	ldr	r3, [sp, #16]
 800bfd8:	3331      	adds	r3, #49	; 0x31
 800bfda:	9a02      	ldr	r2, [sp, #8]
 800bfdc:	7013      	strb	r3, [r2, #0]
 800bfde:	e774      	b.n	800beca <_dtoa_r+0x962>
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	e7b9      	b.n	800bf58 <_dtoa_r+0x9f0>
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	e7e2      	b.n	800bfae <_dtoa_r+0xa46>
 800bfe8:	f1b9 0f00 	cmp.w	r9, #0
 800bfec:	db06      	blt.n	800bffc <_dtoa_r+0xa94>
 800bfee:	9905      	ldr	r1, [sp, #20]
 800bff0:	ea41 0909 	orr.w	r9, r1, r9
 800bff4:	9906      	ldr	r1, [sp, #24]
 800bff6:	ea59 0101 	orrs.w	r1, r9, r1
 800bffa:	d120      	bne.n	800c03e <_dtoa_r+0xad6>
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	ddec      	ble.n	800bfda <_dtoa_r+0xa72>
 800c000:	4659      	mov	r1, fp
 800c002:	2201      	movs	r2, #1
 800c004:	4620      	mov	r0, r4
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	f000 fe92 	bl	800cd30 <__lshift>
 800c00c:	4631      	mov	r1, r6
 800c00e:	4683      	mov	fp, r0
 800c010:	f000 fefa 	bl	800ce08 <__mcmp>
 800c014:	2800      	cmp	r0, #0
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	dc02      	bgt.n	800c020 <_dtoa_r+0xab8>
 800c01a:	d1de      	bne.n	800bfda <_dtoa_r+0xa72>
 800c01c:	07da      	lsls	r2, r3, #31
 800c01e:	d5dc      	bpl.n	800bfda <_dtoa_r+0xa72>
 800c020:	2b39      	cmp	r3, #57	; 0x39
 800c022:	d1d8      	bne.n	800bfd6 <_dtoa_r+0xa6e>
 800c024:	9a02      	ldr	r2, [sp, #8]
 800c026:	2339      	movs	r3, #57	; 0x39
 800c028:	7013      	strb	r3, [r2, #0]
 800c02a:	462b      	mov	r3, r5
 800c02c:	461d      	mov	r5, r3
 800c02e:	3b01      	subs	r3, #1
 800c030:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c034:	2a39      	cmp	r2, #57	; 0x39
 800c036:	d050      	beq.n	800c0da <_dtoa_r+0xb72>
 800c038:	3201      	adds	r2, #1
 800c03a:	701a      	strb	r2, [r3, #0]
 800c03c:	e745      	b.n	800beca <_dtoa_r+0x962>
 800c03e:	2a00      	cmp	r2, #0
 800c040:	dd03      	ble.n	800c04a <_dtoa_r+0xae2>
 800c042:	2b39      	cmp	r3, #57	; 0x39
 800c044:	d0ee      	beq.n	800c024 <_dtoa_r+0xabc>
 800c046:	3301      	adds	r3, #1
 800c048:	e7c7      	b.n	800bfda <_dtoa_r+0xa72>
 800c04a:	9a01      	ldr	r2, [sp, #4]
 800c04c:	9907      	ldr	r1, [sp, #28]
 800c04e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c052:	428a      	cmp	r2, r1
 800c054:	d02a      	beq.n	800c0ac <_dtoa_r+0xb44>
 800c056:	4659      	mov	r1, fp
 800c058:	2300      	movs	r3, #0
 800c05a:	220a      	movs	r2, #10
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fc6d 	bl	800c93c <__multadd>
 800c062:	45b8      	cmp	r8, r7
 800c064:	4683      	mov	fp, r0
 800c066:	f04f 0300 	mov.w	r3, #0
 800c06a:	f04f 020a 	mov.w	r2, #10
 800c06e:	4641      	mov	r1, r8
 800c070:	4620      	mov	r0, r4
 800c072:	d107      	bne.n	800c084 <_dtoa_r+0xb1c>
 800c074:	f000 fc62 	bl	800c93c <__multadd>
 800c078:	4680      	mov	r8, r0
 800c07a:	4607      	mov	r7, r0
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	3301      	adds	r3, #1
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	e775      	b.n	800bf70 <_dtoa_r+0xa08>
 800c084:	f000 fc5a 	bl	800c93c <__multadd>
 800c088:	4639      	mov	r1, r7
 800c08a:	4680      	mov	r8, r0
 800c08c:	2300      	movs	r3, #0
 800c08e:	220a      	movs	r2, #10
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fc53 	bl	800c93c <__multadd>
 800c096:	4607      	mov	r7, r0
 800c098:	e7f0      	b.n	800c07c <_dtoa_r+0xb14>
 800c09a:	f1b9 0f00 	cmp.w	r9, #0
 800c09e:	9a00      	ldr	r2, [sp, #0]
 800c0a0:	bfcc      	ite	gt
 800c0a2:	464d      	movgt	r5, r9
 800c0a4:	2501      	movle	r5, #1
 800c0a6:	4415      	add	r5, r2
 800c0a8:	f04f 0800 	mov.w	r8, #0
 800c0ac:	4659      	mov	r1, fp
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	f000 fe3c 	bl	800cd30 <__lshift>
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	4683      	mov	fp, r0
 800c0bc:	f000 fea4 	bl	800ce08 <__mcmp>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	dcb2      	bgt.n	800c02a <_dtoa_r+0xac2>
 800c0c4:	d102      	bne.n	800c0cc <_dtoa_r+0xb64>
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	07db      	lsls	r3, r3, #31
 800c0ca:	d4ae      	bmi.n	800c02a <_dtoa_r+0xac2>
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	461d      	mov	r5, r3
 800c0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0d4:	2a30      	cmp	r2, #48	; 0x30
 800c0d6:	d0fa      	beq.n	800c0ce <_dtoa_r+0xb66>
 800c0d8:	e6f7      	b.n	800beca <_dtoa_r+0x962>
 800c0da:	9a00      	ldr	r2, [sp, #0]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d1a5      	bne.n	800c02c <_dtoa_r+0xac4>
 800c0e0:	f10a 0a01 	add.w	sl, sl, #1
 800c0e4:	2331      	movs	r3, #49	; 0x31
 800c0e6:	e779      	b.n	800bfdc <_dtoa_r+0xa74>
 800c0e8:	4b13      	ldr	r3, [pc, #76]	; (800c138 <_dtoa_r+0xbd0>)
 800c0ea:	f7ff baaf 	b.w	800b64c <_dtoa_r+0xe4>
 800c0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f47f aa86 	bne.w	800b602 <_dtoa_r+0x9a>
 800c0f6:	4b11      	ldr	r3, [pc, #68]	; (800c13c <_dtoa_r+0xbd4>)
 800c0f8:	f7ff baa8 	b.w	800b64c <_dtoa_r+0xe4>
 800c0fc:	f1b9 0f00 	cmp.w	r9, #0
 800c100:	dc03      	bgt.n	800c10a <_dtoa_r+0xba2>
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	2b02      	cmp	r3, #2
 800c106:	f73f aec9 	bgt.w	800be9c <_dtoa_r+0x934>
 800c10a:	9d00      	ldr	r5, [sp, #0]
 800c10c:	4631      	mov	r1, r6
 800c10e:	4658      	mov	r0, fp
 800c110:	f7ff f99e 	bl	800b450 <quorem>
 800c114:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c118:	f805 3b01 	strb.w	r3, [r5], #1
 800c11c:	9a00      	ldr	r2, [sp, #0]
 800c11e:	1aaa      	subs	r2, r5, r2
 800c120:	4591      	cmp	r9, r2
 800c122:	ddba      	ble.n	800c09a <_dtoa_r+0xb32>
 800c124:	4659      	mov	r1, fp
 800c126:	2300      	movs	r3, #0
 800c128:	220a      	movs	r2, #10
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 fc06 	bl	800c93c <__multadd>
 800c130:	4683      	mov	fp, r0
 800c132:	e7eb      	b.n	800c10c <_dtoa_r+0xba4>
 800c134:	080116ac 	.word	0x080116ac
 800c138:	080114b0 	.word	0x080114b0
 800c13c:	08011629 	.word	0x08011629

0800c140 <rshift>:
 800c140:	6903      	ldr	r3, [r0, #16]
 800c142:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c14a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c14e:	f100 0414 	add.w	r4, r0, #20
 800c152:	dd45      	ble.n	800c1e0 <rshift+0xa0>
 800c154:	f011 011f 	ands.w	r1, r1, #31
 800c158:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c15c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c160:	d10c      	bne.n	800c17c <rshift+0x3c>
 800c162:	f100 0710 	add.w	r7, r0, #16
 800c166:	4629      	mov	r1, r5
 800c168:	42b1      	cmp	r1, r6
 800c16a:	d334      	bcc.n	800c1d6 <rshift+0x96>
 800c16c:	1a9b      	subs	r3, r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	1eea      	subs	r2, r5, #3
 800c172:	4296      	cmp	r6, r2
 800c174:	bf38      	it	cc
 800c176:	2300      	movcc	r3, #0
 800c178:	4423      	add	r3, r4
 800c17a:	e015      	b.n	800c1a8 <rshift+0x68>
 800c17c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c180:	f1c1 0820 	rsb	r8, r1, #32
 800c184:	40cf      	lsrs	r7, r1
 800c186:	f105 0e04 	add.w	lr, r5, #4
 800c18a:	46a1      	mov	r9, r4
 800c18c:	4576      	cmp	r6, lr
 800c18e:	46f4      	mov	ip, lr
 800c190:	d815      	bhi.n	800c1be <rshift+0x7e>
 800c192:	1a9b      	subs	r3, r3, r2
 800c194:	009a      	lsls	r2, r3, #2
 800c196:	3a04      	subs	r2, #4
 800c198:	3501      	adds	r5, #1
 800c19a:	42ae      	cmp	r6, r5
 800c19c:	bf38      	it	cc
 800c19e:	2200      	movcc	r2, #0
 800c1a0:	18a3      	adds	r3, r4, r2
 800c1a2:	50a7      	str	r7, [r4, r2]
 800c1a4:	b107      	cbz	r7, 800c1a8 <rshift+0x68>
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	1b1a      	subs	r2, r3, r4
 800c1aa:	42a3      	cmp	r3, r4
 800c1ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c1b0:	bf08      	it	eq
 800c1b2:	2300      	moveq	r3, #0
 800c1b4:	6102      	str	r2, [r0, #16]
 800c1b6:	bf08      	it	eq
 800c1b8:	6143      	streq	r3, [r0, #20]
 800c1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1be:	f8dc c000 	ldr.w	ip, [ip]
 800c1c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1c6:	ea4c 0707 	orr.w	r7, ip, r7
 800c1ca:	f849 7b04 	str.w	r7, [r9], #4
 800c1ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1d2:	40cf      	lsrs	r7, r1
 800c1d4:	e7da      	b.n	800c18c <rshift+0x4c>
 800c1d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c1da:	f847 cf04 	str.w	ip, [r7, #4]!
 800c1de:	e7c3      	b.n	800c168 <rshift+0x28>
 800c1e0:	4623      	mov	r3, r4
 800c1e2:	e7e1      	b.n	800c1a8 <rshift+0x68>

0800c1e4 <__hexdig_fun>:
 800c1e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c1e8:	2b09      	cmp	r3, #9
 800c1ea:	d802      	bhi.n	800c1f2 <__hexdig_fun+0xe>
 800c1ec:	3820      	subs	r0, #32
 800c1ee:	b2c0      	uxtb	r0, r0
 800c1f0:	4770      	bx	lr
 800c1f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c1f6:	2b05      	cmp	r3, #5
 800c1f8:	d801      	bhi.n	800c1fe <__hexdig_fun+0x1a>
 800c1fa:	3847      	subs	r0, #71	; 0x47
 800c1fc:	e7f7      	b.n	800c1ee <__hexdig_fun+0xa>
 800c1fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c202:	2b05      	cmp	r3, #5
 800c204:	d801      	bhi.n	800c20a <__hexdig_fun+0x26>
 800c206:	3827      	subs	r0, #39	; 0x27
 800c208:	e7f1      	b.n	800c1ee <__hexdig_fun+0xa>
 800c20a:	2000      	movs	r0, #0
 800c20c:	4770      	bx	lr
	...

0800c210 <__gethex>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	ed2d 8b02 	vpush	{d8}
 800c218:	b089      	sub	sp, #36	; 0x24
 800c21a:	ee08 0a10 	vmov	s16, r0
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	4bbc      	ldr	r3, [pc, #752]	; (800c514 <__gethex+0x304>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	4618      	mov	r0, r3
 800c228:	468b      	mov	fp, r1
 800c22a:	4690      	mov	r8, r2
 800c22c:	f7f3 ffe2 	bl	80001f4 <strlen>
 800c230:	9b01      	ldr	r3, [sp, #4]
 800c232:	f8db 2000 	ldr.w	r2, [fp]
 800c236:	4403      	add	r3, r0
 800c238:	4682      	mov	sl, r0
 800c23a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c23e:	9305      	str	r3, [sp, #20]
 800c240:	1c93      	adds	r3, r2, #2
 800c242:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c246:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c24a:	32fe      	adds	r2, #254	; 0xfe
 800c24c:	18d1      	adds	r1, r2, r3
 800c24e:	461f      	mov	r7, r3
 800c250:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c254:	9100      	str	r1, [sp, #0]
 800c256:	2830      	cmp	r0, #48	; 0x30
 800c258:	d0f8      	beq.n	800c24c <__gethex+0x3c>
 800c25a:	f7ff ffc3 	bl	800c1e4 <__hexdig_fun>
 800c25e:	4604      	mov	r4, r0
 800c260:	2800      	cmp	r0, #0
 800c262:	d13a      	bne.n	800c2da <__gethex+0xca>
 800c264:	9901      	ldr	r1, [sp, #4]
 800c266:	4652      	mov	r2, sl
 800c268:	4638      	mov	r0, r7
 800c26a:	f001 f9ed 	bl	800d648 <strncmp>
 800c26e:	4605      	mov	r5, r0
 800c270:	2800      	cmp	r0, #0
 800c272:	d168      	bne.n	800c346 <__gethex+0x136>
 800c274:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c278:	eb07 060a 	add.w	r6, r7, sl
 800c27c:	f7ff ffb2 	bl	800c1e4 <__hexdig_fun>
 800c280:	2800      	cmp	r0, #0
 800c282:	d062      	beq.n	800c34a <__gethex+0x13a>
 800c284:	4633      	mov	r3, r6
 800c286:	7818      	ldrb	r0, [r3, #0]
 800c288:	2830      	cmp	r0, #48	; 0x30
 800c28a:	461f      	mov	r7, r3
 800c28c:	f103 0301 	add.w	r3, r3, #1
 800c290:	d0f9      	beq.n	800c286 <__gethex+0x76>
 800c292:	f7ff ffa7 	bl	800c1e4 <__hexdig_fun>
 800c296:	2301      	movs	r3, #1
 800c298:	fab0 f480 	clz	r4, r0
 800c29c:	0964      	lsrs	r4, r4, #5
 800c29e:	4635      	mov	r5, r6
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	463a      	mov	r2, r7
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	3201      	adds	r2, #1
 800c2a8:	7830      	ldrb	r0, [r6, #0]
 800c2aa:	f7ff ff9b 	bl	800c1e4 <__hexdig_fun>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d1f8      	bne.n	800c2a4 <__gethex+0x94>
 800c2b2:	9901      	ldr	r1, [sp, #4]
 800c2b4:	4652      	mov	r2, sl
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f001 f9c6 	bl	800d648 <strncmp>
 800c2bc:	b980      	cbnz	r0, 800c2e0 <__gethex+0xd0>
 800c2be:	b94d      	cbnz	r5, 800c2d4 <__gethex+0xc4>
 800c2c0:	eb06 050a 	add.w	r5, r6, sl
 800c2c4:	462a      	mov	r2, r5
 800c2c6:	4616      	mov	r6, r2
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	7830      	ldrb	r0, [r6, #0]
 800c2cc:	f7ff ff8a 	bl	800c1e4 <__hexdig_fun>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d1f8      	bne.n	800c2c6 <__gethex+0xb6>
 800c2d4:	1bad      	subs	r5, r5, r6
 800c2d6:	00ad      	lsls	r5, r5, #2
 800c2d8:	e004      	b.n	800c2e4 <__gethex+0xd4>
 800c2da:	2400      	movs	r4, #0
 800c2dc:	4625      	mov	r5, r4
 800c2de:	e7e0      	b.n	800c2a2 <__gethex+0x92>
 800c2e0:	2d00      	cmp	r5, #0
 800c2e2:	d1f7      	bne.n	800c2d4 <__gethex+0xc4>
 800c2e4:	7833      	ldrb	r3, [r6, #0]
 800c2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2ea:	2b50      	cmp	r3, #80	; 0x50
 800c2ec:	d13b      	bne.n	800c366 <__gethex+0x156>
 800c2ee:	7873      	ldrb	r3, [r6, #1]
 800c2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800c2f2:	d02c      	beq.n	800c34e <__gethex+0x13e>
 800c2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800c2f6:	d02e      	beq.n	800c356 <__gethex+0x146>
 800c2f8:	1c71      	adds	r1, r6, #1
 800c2fa:	f04f 0900 	mov.w	r9, #0
 800c2fe:	7808      	ldrb	r0, [r1, #0]
 800c300:	f7ff ff70 	bl	800c1e4 <__hexdig_fun>
 800c304:	1e43      	subs	r3, r0, #1
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b18      	cmp	r3, #24
 800c30a:	d82c      	bhi.n	800c366 <__gethex+0x156>
 800c30c:	f1a0 0210 	sub.w	r2, r0, #16
 800c310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c314:	f7ff ff66 	bl	800c1e4 <__hexdig_fun>
 800c318:	1e43      	subs	r3, r0, #1
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b18      	cmp	r3, #24
 800c31e:	d91d      	bls.n	800c35c <__gethex+0x14c>
 800c320:	f1b9 0f00 	cmp.w	r9, #0
 800c324:	d000      	beq.n	800c328 <__gethex+0x118>
 800c326:	4252      	negs	r2, r2
 800c328:	4415      	add	r5, r2
 800c32a:	f8cb 1000 	str.w	r1, [fp]
 800c32e:	b1e4      	cbz	r4, 800c36a <__gethex+0x15a>
 800c330:	9b00      	ldr	r3, [sp, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	bf14      	ite	ne
 800c336:	2700      	movne	r7, #0
 800c338:	2706      	moveq	r7, #6
 800c33a:	4638      	mov	r0, r7
 800c33c:	b009      	add	sp, #36	; 0x24
 800c33e:	ecbd 8b02 	vpop	{d8}
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c346:	463e      	mov	r6, r7
 800c348:	4625      	mov	r5, r4
 800c34a:	2401      	movs	r4, #1
 800c34c:	e7ca      	b.n	800c2e4 <__gethex+0xd4>
 800c34e:	f04f 0900 	mov.w	r9, #0
 800c352:	1cb1      	adds	r1, r6, #2
 800c354:	e7d3      	b.n	800c2fe <__gethex+0xee>
 800c356:	f04f 0901 	mov.w	r9, #1
 800c35a:	e7fa      	b.n	800c352 <__gethex+0x142>
 800c35c:	230a      	movs	r3, #10
 800c35e:	fb03 0202 	mla	r2, r3, r2, r0
 800c362:	3a10      	subs	r2, #16
 800c364:	e7d4      	b.n	800c310 <__gethex+0x100>
 800c366:	4631      	mov	r1, r6
 800c368:	e7df      	b.n	800c32a <__gethex+0x11a>
 800c36a:	1bf3      	subs	r3, r6, r7
 800c36c:	3b01      	subs	r3, #1
 800c36e:	4621      	mov	r1, r4
 800c370:	2b07      	cmp	r3, #7
 800c372:	dc0b      	bgt.n	800c38c <__gethex+0x17c>
 800c374:	ee18 0a10 	vmov	r0, s16
 800c378:	f000 fa7e 	bl	800c878 <_Balloc>
 800c37c:	4604      	mov	r4, r0
 800c37e:	b940      	cbnz	r0, 800c392 <__gethex+0x182>
 800c380:	4b65      	ldr	r3, [pc, #404]	; (800c518 <__gethex+0x308>)
 800c382:	4602      	mov	r2, r0
 800c384:	21de      	movs	r1, #222	; 0xde
 800c386:	4865      	ldr	r0, [pc, #404]	; (800c51c <__gethex+0x30c>)
 800c388:	f001 f97e 	bl	800d688 <__assert_func>
 800c38c:	3101      	adds	r1, #1
 800c38e:	105b      	asrs	r3, r3, #1
 800c390:	e7ee      	b.n	800c370 <__gethex+0x160>
 800c392:	f100 0914 	add.w	r9, r0, #20
 800c396:	f04f 0b00 	mov.w	fp, #0
 800c39a:	f1ca 0301 	rsb	r3, sl, #1
 800c39e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3a2:	f8cd b000 	str.w	fp, [sp]
 800c3a6:	9306      	str	r3, [sp, #24]
 800c3a8:	42b7      	cmp	r7, r6
 800c3aa:	d340      	bcc.n	800c42e <__gethex+0x21e>
 800c3ac:	9802      	ldr	r0, [sp, #8]
 800c3ae:	9b00      	ldr	r3, [sp, #0]
 800c3b0:	f840 3b04 	str.w	r3, [r0], #4
 800c3b4:	eba0 0009 	sub.w	r0, r0, r9
 800c3b8:	1080      	asrs	r0, r0, #2
 800c3ba:	0146      	lsls	r6, r0, #5
 800c3bc:	6120      	str	r0, [r4, #16]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fb50 	bl	800ca64 <__hi0bits>
 800c3c4:	1a30      	subs	r0, r6, r0
 800c3c6:	f8d8 6000 	ldr.w	r6, [r8]
 800c3ca:	42b0      	cmp	r0, r6
 800c3cc:	dd63      	ble.n	800c496 <__gethex+0x286>
 800c3ce:	1b87      	subs	r7, r0, r6
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 feea 	bl	800d1ac <__any_on>
 800c3d8:	4682      	mov	sl, r0
 800c3da:	b1a8      	cbz	r0, 800c408 <__gethex+0x1f8>
 800c3dc:	1e7b      	subs	r3, r7, #1
 800c3de:	1159      	asrs	r1, r3, #5
 800c3e0:	f003 021f 	and.w	r2, r3, #31
 800c3e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c3e8:	f04f 0a01 	mov.w	sl, #1
 800c3ec:	fa0a f202 	lsl.w	r2, sl, r2
 800c3f0:	420a      	tst	r2, r1
 800c3f2:	d009      	beq.n	800c408 <__gethex+0x1f8>
 800c3f4:	4553      	cmp	r3, sl
 800c3f6:	dd05      	ble.n	800c404 <__gethex+0x1f4>
 800c3f8:	1eb9      	subs	r1, r7, #2
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 fed6 	bl	800d1ac <__any_on>
 800c400:	2800      	cmp	r0, #0
 800c402:	d145      	bne.n	800c490 <__gethex+0x280>
 800c404:	f04f 0a02 	mov.w	sl, #2
 800c408:	4639      	mov	r1, r7
 800c40a:	4620      	mov	r0, r4
 800c40c:	f7ff fe98 	bl	800c140 <rshift>
 800c410:	443d      	add	r5, r7
 800c412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c416:	42ab      	cmp	r3, r5
 800c418:	da4c      	bge.n	800c4b4 <__gethex+0x2a4>
 800c41a:	ee18 0a10 	vmov	r0, s16
 800c41e:	4621      	mov	r1, r4
 800c420:	f000 fa6a 	bl	800c8f8 <_Bfree>
 800c424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c426:	2300      	movs	r3, #0
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	27a3      	movs	r7, #163	; 0xa3
 800c42c:	e785      	b.n	800c33a <__gethex+0x12a>
 800c42e:	1e73      	subs	r3, r6, #1
 800c430:	9a05      	ldr	r2, [sp, #20]
 800c432:	9303      	str	r3, [sp, #12]
 800c434:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c438:	4293      	cmp	r3, r2
 800c43a:	d019      	beq.n	800c470 <__gethex+0x260>
 800c43c:	f1bb 0f20 	cmp.w	fp, #32
 800c440:	d107      	bne.n	800c452 <__gethex+0x242>
 800c442:	9b02      	ldr	r3, [sp, #8]
 800c444:	9a00      	ldr	r2, [sp, #0]
 800c446:	f843 2b04 	str.w	r2, [r3], #4
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	2300      	movs	r3, #0
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	469b      	mov	fp, r3
 800c452:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c456:	f7ff fec5 	bl	800c1e4 <__hexdig_fun>
 800c45a:	9b00      	ldr	r3, [sp, #0]
 800c45c:	f000 000f 	and.w	r0, r0, #15
 800c460:	fa00 f00b 	lsl.w	r0, r0, fp
 800c464:	4303      	orrs	r3, r0
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	f10b 0b04 	add.w	fp, fp, #4
 800c46c:	9b03      	ldr	r3, [sp, #12]
 800c46e:	e00d      	b.n	800c48c <__gethex+0x27c>
 800c470:	9b03      	ldr	r3, [sp, #12]
 800c472:	9a06      	ldr	r2, [sp, #24]
 800c474:	4413      	add	r3, r2
 800c476:	42bb      	cmp	r3, r7
 800c478:	d3e0      	bcc.n	800c43c <__gethex+0x22c>
 800c47a:	4618      	mov	r0, r3
 800c47c:	9901      	ldr	r1, [sp, #4]
 800c47e:	9307      	str	r3, [sp, #28]
 800c480:	4652      	mov	r2, sl
 800c482:	f001 f8e1 	bl	800d648 <strncmp>
 800c486:	9b07      	ldr	r3, [sp, #28]
 800c488:	2800      	cmp	r0, #0
 800c48a:	d1d7      	bne.n	800c43c <__gethex+0x22c>
 800c48c:	461e      	mov	r6, r3
 800c48e:	e78b      	b.n	800c3a8 <__gethex+0x198>
 800c490:	f04f 0a03 	mov.w	sl, #3
 800c494:	e7b8      	b.n	800c408 <__gethex+0x1f8>
 800c496:	da0a      	bge.n	800c4ae <__gethex+0x29e>
 800c498:	1a37      	subs	r7, r6, r0
 800c49a:	4621      	mov	r1, r4
 800c49c:	ee18 0a10 	vmov	r0, s16
 800c4a0:	463a      	mov	r2, r7
 800c4a2:	f000 fc45 	bl	800cd30 <__lshift>
 800c4a6:	1bed      	subs	r5, r5, r7
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	f100 0914 	add.w	r9, r0, #20
 800c4ae:	f04f 0a00 	mov.w	sl, #0
 800c4b2:	e7ae      	b.n	800c412 <__gethex+0x202>
 800c4b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c4b8:	42a8      	cmp	r0, r5
 800c4ba:	dd72      	ble.n	800c5a2 <__gethex+0x392>
 800c4bc:	1b45      	subs	r5, r0, r5
 800c4be:	42ae      	cmp	r6, r5
 800c4c0:	dc36      	bgt.n	800c530 <__gethex+0x320>
 800c4c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d02a      	beq.n	800c520 <__gethex+0x310>
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d02c      	beq.n	800c528 <__gethex+0x318>
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d115      	bne.n	800c4fe <__gethex+0x2ee>
 800c4d2:	42ae      	cmp	r6, r5
 800c4d4:	d113      	bne.n	800c4fe <__gethex+0x2ee>
 800c4d6:	2e01      	cmp	r6, #1
 800c4d8:	d10b      	bne.n	800c4f2 <__gethex+0x2e2>
 800c4da:	9a04      	ldr	r2, [sp, #16]
 800c4dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4e0:	6013      	str	r3, [r2, #0]
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	6123      	str	r3, [r4, #16]
 800c4e6:	f8c9 3000 	str.w	r3, [r9]
 800c4ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4ec:	2762      	movs	r7, #98	; 0x62
 800c4ee:	601c      	str	r4, [r3, #0]
 800c4f0:	e723      	b.n	800c33a <__gethex+0x12a>
 800c4f2:	1e71      	subs	r1, r6, #1
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fe59 	bl	800d1ac <__any_on>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d1ed      	bne.n	800c4da <__gethex+0x2ca>
 800c4fe:	ee18 0a10 	vmov	r0, s16
 800c502:	4621      	mov	r1, r4
 800c504:	f000 f9f8 	bl	800c8f8 <_Bfree>
 800c508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c50a:	2300      	movs	r3, #0
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	2750      	movs	r7, #80	; 0x50
 800c510:	e713      	b.n	800c33a <__gethex+0x12a>
 800c512:	bf00      	nop
 800c514:	08011728 	.word	0x08011728
 800c518:	080116ac 	.word	0x080116ac
 800c51c:	080116bd 	.word	0x080116bd
 800c520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1eb      	bne.n	800c4fe <__gethex+0x2ee>
 800c526:	e7d8      	b.n	800c4da <__gethex+0x2ca>
 800c528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1d5      	bne.n	800c4da <__gethex+0x2ca>
 800c52e:	e7e6      	b.n	800c4fe <__gethex+0x2ee>
 800c530:	1e6f      	subs	r7, r5, #1
 800c532:	f1ba 0f00 	cmp.w	sl, #0
 800c536:	d131      	bne.n	800c59c <__gethex+0x38c>
 800c538:	b127      	cbz	r7, 800c544 <__gethex+0x334>
 800c53a:	4639      	mov	r1, r7
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 fe35 	bl	800d1ac <__any_on>
 800c542:	4682      	mov	sl, r0
 800c544:	117b      	asrs	r3, r7, #5
 800c546:	2101      	movs	r1, #1
 800c548:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c54c:	f007 071f 	and.w	r7, r7, #31
 800c550:	fa01 f707 	lsl.w	r7, r1, r7
 800c554:	421f      	tst	r7, r3
 800c556:	4629      	mov	r1, r5
 800c558:	4620      	mov	r0, r4
 800c55a:	bf18      	it	ne
 800c55c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c560:	1b76      	subs	r6, r6, r5
 800c562:	f7ff fded 	bl	800c140 <rshift>
 800c566:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c56a:	2702      	movs	r7, #2
 800c56c:	f1ba 0f00 	cmp.w	sl, #0
 800c570:	d048      	beq.n	800c604 <__gethex+0x3f4>
 800c572:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c576:	2b02      	cmp	r3, #2
 800c578:	d015      	beq.n	800c5a6 <__gethex+0x396>
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d017      	beq.n	800c5ae <__gethex+0x39e>
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d109      	bne.n	800c596 <__gethex+0x386>
 800c582:	f01a 0f02 	tst.w	sl, #2
 800c586:	d006      	beq.n	800c596 <__gethex+0x386>
 800c588:	f8d9 0000 	ldr.w	r0, [r9]
 800c58c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c590:	f01a 0f01 	tst.w	sl, #1
 800c594:	d10e      	bne.n	800c5b4 <__gethex+0x3a4>
 800c596:	f047 0710 	orr.w	r7, r7, #16
 800c59a:	e033      	b.n	800c604 <__gethex+0x3f4>
 800c59c:	f04f 0a01 	mov.w	sl, #1
 800c5a0:	e7d0      	b.n	800c544 <__gethex+0x334>
 800c5a2:	2701      	movs	r7, #1
 800c5a4:	e7e2      	b.n	800c56c <__gethex+0x35c>
 800c5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5a8:	f1c3 0301 	rsb	r3, r3, #1
 800c5ac:	9315      	str	r3, [sp, #84]	; 0x54
 800c5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0f0      	beq.n	800c596 <__gethex+0x386>
 800c5b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5b8:	f104 0314 	add.w	r3, r4, #20
 800c5bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5c4:	f04f 0c00 	mov.w	ip, #0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c5d2:	d01c      	beq.n	800c60e <__gethex+0x3fe>
 800c5d4:	3201      	adds	r2, #1
 800c5d6:	6002      	str	r2, [r0, #0]
 800c5d8:	2f02      	cmp	r7, #2
 800c5da:	f104 0314 	add.w	r3, r4, #20
 800c5de:	d13f      	bne.n	800c660 <__gethex+0x450>
 800c5e0:	f8d8 2000 	ldr.w	r2, [r8]
 800c5e4:	3a01      	subs	r2, #1
 800c5e6:	42b2      	cmp	r2, r6
 800c5e8:	d10a      	bne.n	800c600 <__gethex+0x3f0>
 800c5ea:	1171      	asrs	r1, r6, #5
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c5f2:	f006 061f 	and.w	r6, r6, #31
 800c5f6:	fa02 f606 	lsl.w	r6, r2, r6
 800c5fa:	421e      	tst	r6, r3
 800c5fc:	bf18      	it	ne
 800c5fe:	4617      	movne	r7, r2
 800c600:	f047 0720 	orr.w	r7, r7, #32
 800c604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c606:	601c      	str	r4, [r3, #0]
 800c608:	9b04      	ldr	r3, [sp, #16]
 800c60a:	601d      	str	r5, [r3, #0]
 800c60c:	e695      	b.n	800c33a <__gethex+0x12a>
 800c60e:	4299      	cmp	r1, r3
 800c610:	f843 cc04 	str.w	ip, [r3, #-4]
 800c614:	d8d8      	bhi.n	800c5c8 <__gethex+0x3b8>
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	459b      	cmp	fp, r3
 800c61a:	db19      	blt.n	800c650 <__gethex+0x440>
 800c61c:	6861      	ldr	r1, [r4, #4]
 800c61e:	ee18 0a10 	vmov	r0, s16
 800c622:	3101      	adds	r1, #1
 800c624:	f000 f928 	bl	800c878 <_Balloc>
 800c628:	4681      	mov	r9, r0
 800c62a:	b918      	cbnz	r0, 800c634 <__gethex+0x424>
 800c62c:	4b1a      	ldr	r3, [pc, #104]	; (800c698 <__gethex+0x488>)
 800c62e:	4602      	mov	r2, r0
 800c630:	2184      	movs	r1, #132	; 0x84
 800c632:	e6a8      	b.n	800c386 <__gethex+0x176>
 800c634:	6922      	ldr	r2, [r4, #16]
 800c636:	3202      	adds	r2, #2
 800c638:	f104 010c 	add.w	r1, r4, #12
 800c63c:	0092      	lsls	r2, r2, #2
 800c63e:	300c      	adds	r0, #12
 800c640:	f000 f90c 	bl	800c85c <memcpy>
 800c644:	4621      	mov	r1, r4
 800c646:	ee18 0a10 	vmov	r0, s16
 800c64a:	f000 f955 	bl	800c8f8 <_Bfree>
 800c64e:	464c      	mov	r4, r9
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c658:	6122      	str	r2, [r4, #16]
 800c65a:	2201      	movs	r2, #1
 800c65c:	615a      	str	r2, [r3, #20]
 800c65e:	e7bb      	b.n	800c5d8 <__gethex+0x3c8>
 800c660:	6922      	ldr	r2, [r4, #16]
 800c662:	455a      	cmp	r2, fp
 800c664:	dd0b      	ble.n	800c67e <__gethex+0x46e>
 800c666:	2101      	movs	r1, #1
 800c668:	4620      	mov	r0, r4
 800c66a:	f7ff fd69 	bl	800c140 <rshift>
 800c66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c672:	3501      	adds	r5, #1
 800c674:	42ab      	cmp	r3, r5
 800c676:	f6ff aed0 	blt.w	800c41a <__gethex+0x20a>
 800c67a:	2701      	movs	r7, #1
 800c67c:	e7c0      	b.n	800c600 <__gethex+0x3f0>
 800c67e:	f016 061f 	ands.w	r6, r6, #31
 800c682:	d0fa      	beq.n	800c67a <__gethex+0x46a>
 800c684:	449a      	add	sl, r3
 800c686:	f1c6 0620 	rsb	r6, r6, #32
 800c68a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c68e:	f000 f9e9 	bl	800ca64 <__hi0bits>
 800c692:	42b0      	cmp	r0, r6
 800c694:	dbe7      	blt.n	800c666 <__gethex+0x456>
 800c696:	e7f0      	b.n	800c67a <__gethex+0x46a>
 800c698:	080116ac 	.word	0x080116ac

0800c69c <L_shift>:
 800c69c:	f1c2 0208 	rsb	r2, r2, #8
 800c6a0:	0092      	lsls	r2, r2, #2
 800c6a2:	b570      	push	{r4, r5, r6, lr}
 800c6a4:	f1c2 0620 	rsb	r6, r2, #32
 800c6a8:	6843      	ldr	r3, [r0, #4]
 800c6aa:	6804      	ldr	r4, [r0, #0]
 800c6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800c6b0:	432c      	orrs	r4, r5
 800c6b2:	40d3      	lsrs	r3, r2
 800c6b4:	6004      	str	r4, [r0, #0]
 800c6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6ba:	4288      	cmp	r0, r1
 800c6bc:	d3f4      	bcc.n	800c6a8 <L_shift+0xc>
 800c6be:	bd70      	pop	{r4, r5, r6, pc}

0800c6c0 <__match>:
 800c6c0:	b530      	push	{r4, r5, lr}
 800c6c2:	6803      	ldr	r3, [r0, #0]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ca:	b914      	cbnz	r4, 800c6d2 <__match+0x12>
 800c6cc:	6003      	str	r3, [r0, #0]
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	bd30      	pop	{r4, r5, pc}
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c6da:	2d19      	cmp	r5, #25
 800c6dc:	bf98      	it	ls
 800c6de:	3220      	addls	r2, #32
 800c6e0:	42a2      	cmp	r2, r4
 800c6e2:	d0f0      	beq.n	800c6c6 <__match+0x6>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e7f3      	b.n	800c6d0 <__match+0x10>

0800c6e8 <__hexnan>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	680b      	ldr	r3, [r1, #0]
 800c6ee:	6801      	ldr	r1, [r0, #0]
 800c6f0:	115e      	asrs	r6, r3, #5
 800c6f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6f6:	f013 031f 	ands.w	r3, r3, #31
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	bf18      	it	ne
 800c6fe:	3604      	addne	r6, #4
 800c700:	2500      	movs	r5, #0
 800c702:	1f37      	subs	r7, r6, #4
 800c704:	4682      	mov	sl, r0
 800c706:	4690      	mov	r8, r2
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c70e:	46b9      	mov	r9, r7
 800c710:	463c      	mov	r4, r7
 800c712:	9502      	str	r5, [sp, #8]
 800c714:	46ab      	mov	fp, r5
 800c716:	784a      	ldrb	r2, [r1, #1]
 800c718:	1c4b      	adds	r3, r1, #1
 800c71a:	9303      	str	r3, [sp, #12]
 800c71c:	b342      	cbz	r2, 800c770 <__hexnan+0x88>
 800c71e:	4610      	mov	r0, r2
 800c720:	9105      	str	r1, [sp, #20]
 800c722:	9204      	str	r2, [sp, #16]
 800c724:	f7ff fd5e 	bl	800c1e4 <__hexdig_fun>
 800c728:	2800      	cmp	r0, #0
 800c72a:	d14f      	bne.n	800c7cc <__hexnan+0xe4>
 800c72c:	9a04      	ldr	r2, [sp, #16]
 800c72e:	9905      	ldr	r1, [sp, #20]
 800c730:	2a20      	cmp	r2, #32
 800c732:	d818      	bhi.n	800c766 <__hexnan+0x7e>
 800c734:	9b02      	ldr	r3, [sp, #8]
 800c736:	459b      	cmp	fp, r3
 800c738:	dd13      	ble.n	800c762 <__hexnan+0x7a>
 800c73a:	454c      	cmp	r4, r9
 800c73c:	d206      	bcs.n	800c74c <__hexnan+0x64>
 800c73e:	2d07      	cmp	r5, #7
 800c740:	dc04      	bgt.n	800c74c <__hexnan+0x64>
 800c742:	462a      	mov	r2, r5
 800c744:	4649      	mov	r1, r9
 800c746:	4620      	mov	r0, r4
 800c748:	f7ff ffa8 	bl	800c69c <L_shift>
 800c74c:	4544      	cmp	r4, r8
 800c74e:	d950      	bls.n	800c7f2 <__hexnan+0x10a>
 800c750:	2300      	movs	r3, #0
 800c752:	f1a4 0904 	sub.w	r9, r4, #4
 800c756:	f844 3c04 	str.w	r3, [r4, #-4]
 800c75a:	f8cd b008 	str.w	fp, [sp, #8]
 800c75e:	464c      	mov	r4, r9
 800c760:	461d      	mov	r5, r3
 800c762:	9903      	ldr	r1, [sp, #12]
 800c764:	e7d7      	b.n	800c716 <__hexnan+0x2e>
 800c766:	2a29      	cmp	r2, #41	; 0x29
 800c768:	d156      	bne.n	800c818 <__hexnan+0x130>
 800c76a:	3102      	adds	r1, #2
 800c76c:	f8ca 1000 	str.w	r1, [sl]
 800c770:	f1bb 0f00 	cmp.w	fp, #0
 800c774:	d050      	beq.n	800c818 <__hexnan+0x130>
 800c776:	454c      	cmp	r4, r9
 800c778:	d206      	bcs.n	800c788 <__hexnan+0xa0>
 800c77a:	2d07      	cmp	r5, #7
 800c77c:	dc04      	bgt.n	800c788 <__hexnan+0xa0>
 800c77e:	462a      	mov	r2, r5
 800c780:	4649      	mov	r1, r9
 800c782:	4620      	mov	r0, r4
 800c784:	f7ff ff8a 	bl	800c69c <L_shift>
 800c788:	4544      	cmp	r4, r8
 800c78a:	d934      	bls.n	800c7f6 <__hexnan+0x10e>
 800c78c:	f1a8 0204 	sub.w	r2, r8, #4
 800c790:	4623      	mov	r3, r4
 800c792:	f853 1b04 	ldr.w	r1, [r3], #4
 800c796:	f842 1f04 	str.w	r1, [r2, #4]!
 800c79a:	429f      	cmp	r7, r3
 800c79c:	d2f9      	bcs.n	800c792 <__hexnan+0xaa>
 800c79e:	1b3b      	subs	r3, r7, r4
 800c7a0:	f023 0303 	bic.w	r3, r3, #3
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	3401      	adds	r4, #1
 800c7a8:	3e03      	subs	r6, #3
 800c7aa:	42b4      	cmp	r4, r6
 800c7ac:	bf88      	it	hi
 800c7ae:	2304      	movhi	r3, #4
 800c7b0:	4443      	add	r3, r8
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f843 2b04 	str.w	r2, [r3], #4
 800c7b8:	429f      	cmp	r7, r3
 800c7ba:	d2fb      	bcs.n	800c7b4 <__hexnan+0xcc>
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	b91b      	cbnz	r3, 800c7c8 <__hexnan+0xe0>
 800c7c0:	4547      	cmp	r7, r8
 800c7c2:	d127      	bne.n	800c814 <__hexnan+0x12c>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	603b      	str	r3, [r7, #0]
 800c7c8:	2005      	movs	r0, #5
 800c7ca:	e026      	b.n	800c81a <__hexnan+0x132>
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	2d08      	cmp	r5, #8
 800c7d0:	f10b 0b01 	add.w	fp, fp, #1
 800c7d4:	dd06      	ble.n	800c7e4 <__hexnan+0xfc>
 800c7d6:	4544      	cmp	r4, r8
 800c7d8:	d9c3      	bls.n	800c762 <__hexnan+0x7a>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7e0:	2501      	movs	r5, #1
 800c7e2:	3c04      	subs	r4, #4
 800c7e4:	6822      	ldr	r2, [r4, #0]
 800c7e6:	f000 000f 	and.w	r0, r0, #15
 800c7ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c7ee:	6022      	str	r2, [r4, #0]
 800c7f0:	e7b7      	b.n	800c762 <__hexnan+0x7a>
 800c7f2:	2508      	movs	r5, #8
 800c7f4:	e7b5      	b.n	800c762 <__hexnan+0x7a>
 800c7f6:	9b01      	ldr	r3, [sp, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0df      	beq.n	800c7bc <__hexnan+0xd4>
 800c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c800:	f1c3 0320 	rsb	r3, r3, #32
 800c804:	fa22 f303 	lsr.w	r3, r2, r3
 800c808:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c80c:	401a      	ands	r2, r3
 800c80e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c812:	e7d3      	b.n	800c7bc <__hexnan+0xd4>
 800c814:	3f04      	subs	r7, #4
 800c816:	e7d1      	b.n	800c7bc <__hexnan+0xd4>
 800c818:	2004      	movs	r0, #4
 800c81a:	b007      	add	sp, #28
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c820 <_localeconv_r>:
 800c820:	4800      	ldr	r0, [pc, #0]	; (800c824 <_localeconv_r+0x4>)
 800c822:	4770      	bx	lr
 800c824:	200001ac 	.word	0x200001ac

0800c828 <malloc>:
 800c828:	4b02      	ldr	r3, [pc, #8]	; (800c834 <malloc+0xc>)
 800c82a:	4601      	mov	r1, r0
 800c82c:	6818      	ldr	r0, [r3, #0]
 800c82e:	f000 bd3d 	b.w	800d2ac <_malloc_r>
 800c832:	bf00      	nop
 800c834:	20000054 	.word	0x20000054

0800c838 <__ascii_mbtowc>:
 800c838:	b082      	sub	sp, #8
 800c83a:	b901      	cbnz	r1, 800c83e <__ascii_mbtowc+0x6>
 800c83c:	a901      	add	r1, sp, #4
 800c83e:	b142      	cbz	r2, 800c852 <__ascii_mbtowc+0x1a>
 800c840:	b14b      	cbz	r3, 800c856 <__ascii_mbtowc+0x1e>
 800c842:	7813      	ldrb	r3, [r2, #0]
 800c844:	600b      	str	r3, [r1, #0]
 800c846:	7812      	ldrb	r2, [r2, #0]
 800c848:	1e10      	subs	r0, r2, #0
 800c84a:	bf18      	it	ne
 800c84c:	2001      	movne	r0, #1
 800c84e:	b002      	add	sp, #8
 800c850:	4770      	bx	lr
 800c852:	4610      	mov	r0, r2
 800c854:	e7fb      	b.n	800c84e <__ascii_mbtowc+0x16>
 800c856:	f06f 0001 	mvn.w	r0, #1
 800c85a:	e7f8      	b.n	800c84e <__ascii_mbtowc+0x16>

0800c85c <memcpy>:
 800c85c:	440a      	add	r2, r1
 800c85e:	4291      	cmp	r1, r2
 800c860:	f100 33ff 	add.w	r3, r0, #4294967295
 800c864:	d100      	bne.n	800c868 <memcpy+0xc>
 800c866:	4770      	bx	lr
 800c868:	b510      	push	{r4, lr}
 800c86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c872:	4291      	cmp	r1, r2
 800c874:	d1f9      	bne.n	800c86a <memcpy+0xe>
 800c876:	bd10      	pop	{r4, pc}

0800c878 <_Balloc>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c87c:	4604      	mov	r4, r0
 800c87e:	460d      	mov	r5, r1
 800c880:	b976      	cbnz	r6, 800c8a0 <_Balloc+0x28>
 800c882:	2010      	movs	r0, #16
 800c884:	f7ff ffd0 	bl	800c828 <malloc>
 800c888:	4602      	mov	r2, r0
 800c88a:	6260      	str	r0, [r4, #36]	; 0x24
 800c88c:	b920      	cbnz	r0, 800c898 <_Balloc+0x20>
 800c88e:	4b18      	ldr	r3, [pc, #96]	; (800c8f0 <_Balloc+0x78>)
 800c890:	4818      	ldr	r0, [pc, #96]	; (800c8f4 <_Balloc+0x7c>)
 800c892:	2166      	movs	r1, #102	; 0x66
 800c894:	f000 fef8 	bl	800d688 <__assert_func>
 800c898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c89c:	6006      	str	r6, [r0, #0]
 800c89e:	60c6      	str	r6, [r0, #12]
 800c8a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8a2:	68f3      	ldr	r3, [r6, #12]
 800c8a4:	b183      	cbz	r3, 800c8c8 <_Balloc+0x50>
 800c8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8ae:	b9b8      	cbnz	r0, 800c8e0 <_Balloc+0x68>
 800c8b0:	2101      	movs	r1, #1
 800c8b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c8b6:	1d72      	adds	r2, r6, #5
 800c8b8:	0092      	lsls	r2, r2, #2
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f000 fc97 	bl	800d1ee <_calloc_r>
 800c8c0:	b160      	cbz	r0, 800c8dc <_Balloc+0x64>
 800c8c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8c6:	e00e      	b.n	800c8e6 <_Balloc+0x6e>
 800c8c8:	2221      	movs	r2, #33	; 0x21
 800c8ca:	2104      	movs	r1, #4
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fc8e 	bl	800d1ee <_calloc_r>
 800c8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d4:	60f0      	str	r0, [r6, #12]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1e4      	bne.n	800c8a6 <_Balloc+0x2e>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	bd70      	pop	{r4, r5, r6, pc}
 800c8e0:	6802      	ldr	r2, [r0, #0]
 800c8e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8ec:	e7f7      	b.n	800c8de <_Balloc+0x66>
 800c8ee:	bf00      	nop
 800c8f0:	08011636 	.word	0x08011636
 800c8f4:	0801173c 	.word	0x0801173c

0800c8f8 <_Bfree>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	460c      	mov	r4, r1
 800c900:	b976      	cbnz	r6, 800c920 <_Bfree+0x28>
 800c902:	2010      	movs	r0, #16
 800c904:	f7ff ff90 	bl	800c828 <malloc>
 800c908:	4602      	mov	r2, r0
 800c90a:	6268      	str	r0, [r5, #36]	; 0x24
 800c90c:	b920      	cbnz	r0, 800c918 <_Bfree+0x20>
 800c90e:	4b09      	ldr	r3, [pc, #36]	; (800c934 <_Bfree+0x3c>)
 800c910:	4809      	ldr	r0, [pc, #36]	; (800c938 <_Bfree+0x40>)
 800c912:	218a      	movs	r1, #138	; 0x8a
 800c914:	f000 feb8 	bl	800d688 <__assert_func>
 800c918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c91c:	6006      	str	r6, [r0, #0]
 800c91e:	60c6      	str	r6, [r0, #12]
 800c920:	b13c      	cbz	r4, 800c932 <_Bfree+0x3a>
 800c922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c924:	6862      	ldr	r2, [r4, #4]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c92c:	6021      	str	r1, [r4, #0]
 800c92e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c932:	bd70      	pop	{r4, r5, r6, pc}
 800c934:	08011636 	.word	0x08011636
 800c938:	0801173c 	.word	0x0801173c

0800c93c <__multadd>:
 800c93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c940:	690e      	ldr	r6, [r1, #16]
 800c942:	4607      	mov	r7, r0
 800c944:	4698      	mov	r8, r3
 800c946:	460c      	mov	r4, r1
 800c948:	f101 0014 	add.w	r0, r1, #20
 800c94c:	2300      	movs	r3, #0
 800c94e:	6805      	ldr	r5, [r0, #0]
 800c950:	b2a9      	uxth	r1, r5
 800c952:	fb02 8101 	mla	r1, r2, r1, r8
 800c956:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c95a:	0c2d      	lsrs	r5, r5, #16
 800c95c:	fb02 c505 	mla	r5, r2, r5, ip
 800c960:	b289      	uxth	r1, r1
 800c962:	3301      	adds	r3, #1
 800c964:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c968:	429e      	cmp	r6, r3
 800c96a:	f840 1b04 	str.w	r1, [r0], #4
 800c96e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c972:	dcec      	bgt.n	800c94e <__multadd+0x12>
 800c974:	f1b8 0f00 	cmp.w	r8, #0
 800c978:	d022      	beq.n	800c9c0 <__multadd+0x84>
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	42b3      	cmp	r3, r6
 800c97e:	dc19      	bgt.n	800c9b4 <__multadd+0x78>
 800c980:	6861      	ldr	r1, [r4, #4]
 800c982:	4638      	mov	r0, r7
 800c984:	3101      	adds	r1, #1
 800c986:	f7ff ff77 	bl	800c878 <_Balloc>
 800c98a:	4605      	mov	r5, r0
 800c98c:	b928      	cbnz	r0, 800c99a <__multadd+0x5e>
 800c98e:	4602      	mov	r2, r0
 800c990:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <__multadd+0x8c>)
 800c992:	480e      	ldr	r0, [pc, #56]	; (800c9cc <__multadd+0x90>)
 800c994:	21b5      	movs	r1, #181	; 0xb5
 800c996:	f000 fe77 	bl	800d688 <__assert_func>
 800c99a:	6922      	ldr	r2, [r4, #16]
 800c99c:	3202      	adds	r2, #2
 800c99e:	f104 010c 	add.w	r1, r4, #12
 800c9a2:	0092      	lsls	r2, r2, #2
 800c9a4:	300c      	adds	r0, #12
 800c9a6:	f7ff ff59 	bl	800c85c <memcpy>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	f7ff ffa3 	bl	800c8f8 <_Bfree>
 800c9b2:	462c      	mov	r4, r5
 800c9b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c9b8:	3601      	adds	r6, #1
 800c9ba:	f8c3 8014 	str.w	r8, [r3, #20]
 800c9be:	6126      	str	r6, [r4, #16]
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c6:	bf00      	nop
 800c9c8:	080116ac 	.word	0x080116ac
 800c9cc:	0801173c 	.word	0x0801173c

0800c9d0 <__s2b>:
 800c9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	4615      	mov	r5, r2
 800c9d8:	461f      	mov	r7, r3
 800c9da:	2209      	movs	r2, #9
 800c9dc:	3308      	adds	r3, #8
 800c9de:	4606      	mov	r6, r0
 800c9e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	db09      	blt.n	800ca00 <__s2b+0x30>
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f7ff ff43 	bl	800c878 <_Balloc>
 800c9f2:	b940      	cbnz	r0, 800ca06 <__s2b+0x36>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <__s2b+0x8c>)
 800c9f8:	4819      	ldr	r0, [pc, #100]	; (800ca60 <__s2b+0x90>)
 800c9fa:	21ce      	movs	r1, #206	; 0xce
 800c9fc:	f000 fe44 	bl	800d688 <__assert_func>
 800ca00:	0052      	lsls	r2, r2, #1
 800ca02:	3101      	adds	r1, #1
 800ca04:	e7f0      	b.n	800c9e8 <__s2b+0x18>
 800ca06:	9b08      	ldr	r3, [sp, #32]
 800ca08:	6143      	str	r3, [r0, #20]
 800ca0a:	2d09      	cmp	r5, #9
 800ca0c:	f04f 0301 	mov.w	r3, #1
 800ca10:	6103      	str	r3, [r0, #16]
 800ca12:	dd16      	ble.n	800ca42 <__s2b+0x72>
 800ca14:	f104 0909 	add.w	r9, r4, #9
 800ca18:	46c8      	mov	r8, r9
 800ca1a:	442c      	add	r4, r5
 800ca1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca20:	4601      	mov	r1, r0
 800ca22:	3b30      	subs	r3, #48	; 0x30
 800ca24:	220a      	movs	r2, #10
 800ca26:	4630      	mov	r0, r6
 800ca28:	f7ff ff88 	bl	800c93c <__multadd>
 800ca2c:	45a0      	cmp	r8, r4
 800ca2e:	d1f5      	bne.n	800ca1c <__s2b+0x4c>
 800ca30:	f1a5 0408 	sub.w	r4, r5, #8
 800ca34:	444c      	add	r4, r9
 800ca36:	1b2d      	subs	r5, r5, r4
 800ca38:	1963      	adds	r3, r4, r5
 800ca3a:	42bb      	cmp	r3, r7
 800ca3c:	db04      	blt.n	800ca48 <__s2b+0x78>
 800ca3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca42:	340a      	adds	r4, #10
 800ca44:	2509      	movs	r5, #9
 800ca46:	e7f6      	b.n	800ca36 <__s2b+0x66>
 800ca48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca4c:	4601      	mov	r1, r0
 800ca4e:	3b30      	subs	r3, #48	; 0x30
 800ca50:	220a      	movs	r2, #10
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7ff ff72 	bl	800c93c <__multadd>
 800ca58:	e7ee      	b.n	800ca38 <__s2b+0x68>
 800ca5a:	bf00      	nop
 800ca5c:	080116ac 	.word	0x080116ac
 800ca60:	0801173c 	.word	0x0801173c

0800ca64 <__hi0bits>:
 800ca64:	0c03      	lsrs	r3, r0, #16
 800ca66:	041b      	lsls	r3, r3, #16
 800ca68:	b9d3      	cbnz	r3, 800caa0 <__hi0bits+0x3c>
 800ca6a:	0400      	lsls	r0, r0, #16
 800ca6c:	2310      	movs	r3, #16
 800ca6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca72:	bf04      	itt	eq
 800ca74:	0200      	lsleq	r0, r0, #8
 800ca76:	3308      	addeq	r3, #8
 800ca78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca7c:	bf04      	itt	eq
 800ca7e:	0100      	lsleq	r0, r0, #4
 800ca80:	3304      	addeq	r3, #4
 800ca82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca86:	bf04      	itt	eq
 800ca88:	0080      	lsleq	r0, r0, #2
 800ca8a:	3302      	addeq	r3, #2
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	db05      	blt.n	800ca9c <__hi0bits+0x38>
 800ca90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca94:	f103 0301 	add.w	r3, r3, #1
 800ca98:	bf08      	it	eq
 800ca9a:	2320      	moveq	r3, #32
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	4770      	bx	lr
 800caa0:	2300      	movs	r3, #0
 800caa2:	e7e4      	b.n	800ca6e <__hi0bits+0xa>

0800caa4 <__lo0bits>:
 800caa4:	6803      	ldr	r3, [r0, #0]
 800caa6:	f013 0207 	ands.w	r2, r3, #7
 800caaa:	4601      	mov	r1, r0
 800caac:	d00b      	beq.n	800cac6 <__lo0bits+0x22>
 800caae:	07da      	lsls	r2, r3, #31
 800cab0:	d424      	bmi.n	800cafc <__lo0bits+0x58>
 800cab2:	0798      	lsls	r0, r3, #30
 800cab4:	bf49      	itett	mi
 800cab6:	085b      	lsrmi	r3, r3, #1
 800cab8:	089b      	lsrpl	r3, r3, #2
 800caba:	2001      	movmi	r0, #1
 800cabc:	600b      	strmi	r3, [r1, #0]
 800cabe:	bf5c      	itt	pl
 800cac0:	600b      	strpl	r3, [r1, #0]
 800cac2:	2002      	movpl	r0, #2
 800cac4:	4770      	bx	lr
 800cac6:	b298      	uxth	r0, r3
 800cac8:	b9b0      	cbnz	r0, 800caf8 <__lo0bits+0x54>
 800caca:	0c1b      	lsrs	r3, r3, #16
 800cacc:	2010      	movs	r0, #16
 800cace:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cad2:	bf04      	itt	eq
 800cad4:	0a1b      	lsreq	r3, r3, #8
 800cad6:	3008      	addeq	r0, #8
 800cad8:	071a      	lsls	r2, r3, #28
 800cada:	bf04      	itt	eq
 800cadc:	091b      	lsreq	r3, r3, #4
 800cade:	3004      	addeq	r0, #4
 800cae0:	079a      	lsls	r2, r3, #30
 800cae2:	bf04      	itt	eq
 800cae4:	089b      	lsreq	r3, r3, #2
 800cae6:	3002      	addeq	r0, #2
 800cae8:	07da      	lsls	r2, r3, #31
 800caea:	d403      	bmi.n	800caf4 <__lo0bits+0x50>
 800caec:	085b      	lsrs	r3, r3, #1
 800caee:	f100 0001 	add.w	r0, r0, #1
 800caf2:	d005      	beq.n	800cb00 <__lo0bits+0x5c>
 800caf4:	600b      	str	r3, [r1, #0]
 800caf6:	4770      	bx	lr
 800caf8:	4610      	mov	r0, r2
 800cafa:	e7e8      	b.n	800cace <__lo0bits+0x2a>
 800cafc:	2000      	movs	r0, #0
 800cafe:	4770      	bx	lr
 800cb00:	2020      	movs	r0, #32
 800cb02:	4770      	bx	lr

0800cb04 <__i2b>:
 800cb04:	b510      	push	{r4, lr}
 800cb06:	460c      	mov	r4, r1
 800cb08:	2101      	movs	r1, #1
 800cb0a:	f7ff feb5 	bl	800c878 <_Balloc>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	b928      	cbnz	r0, 800cb1e <__i2b+0x1a>
 800cb12:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <__i2b+0x24>)
 800cb14:	4805      	ldr	r0, [pc, #20]	; (800cb2c <__i2b+0x28>)
 800cb16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb1a:	f000 fdb5 	bl	800d688 <__assert_func>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	6144      	str	r4, [r0, #20]
 800cb22:	6103      	str	r3, [r0, #16]
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	bf00      	nop
 800cb28:	080116ac 	.word	0x080116ac
 800cb2c:	0801173c 	.word	0x0801173c

0800cb30 <__multiply>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	4614      	mov	r4, r2
 800cb36:	690a      	ldr	r2, [r1, #16]
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	bfb8      	it	lt
 800cb3e:	460b      	movlt	r3, r1
 800cb40:	460d      	mov	r5, r1
 800cb42:	bfbc      	itt	lt
 800cb44:	4625      	movlt	r5, r4
 800cb46:	461c      	movlt	r4, r3
 800cb48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cb4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cb50:	68ab      	ldr	r3, [r5, #8]
 800cb52:	6869      	ldr	r1, [r5, #4]
 800cb54:	eb0a 0709 	add.w	r7, sl, r9
 800cb58:	42bb      	cmp	r3, r7
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	bfb8      	it	lt
 800cb5e:	3101      	addlt	r1, #1
 800cb60:	f7ff fe8a 	bl	800c878 <_Balloc>
 800cb64:	b930      	cbnz	r0, 800cb74 <__multiply+0x44>
 800cb66:	4602      	mov	r2, r0
 800cb68:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <__multiply+0x144>)
 800cb6a:	4843      	ldr	r0, [pc, #268]	; (800cc78 <__multiply+0x148>)
 800cb6c:	f240 115d 	movw	r1, #349	; 0x15d
 800cb70:	f000 fd8a 	bl	800d688 <__assert_func>
 800cb74:	f100 0614 	add.w	r6, r0, #20
 800cb78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cb7c:	4633      	mov	r3, r6
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4543      	cmp	r3, r8
 800cb82:	d31e      	bcc.n	800cbc2 <__multiply+0x92>
 800cb84:	f105 0c14 	add.w	ip, r5, #20
 800cb88:	f104 0314 	add.w	r3, r4, #20
 800cb8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cb90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cb94:	9202      	str	r2, [sp, #8]
 800cb96:	ebac 0205 	sub.w	r2, ip, r5
 800cb9a:	3a15      	subs	r2, #21
 800cb9c:	f022 0203 	bic.w	r2, r2, #3
 800cba0:	3204      	adds	r2, #4
 800cba2:	f105 0115 	add.w	r1, r5, #21
 800cba6:	458c      	cmp	ip, r1
 800cba8:	bf38      	it	cc
 800cbaa:	2204      	movcc	r2, #4
 800cbac:	9201      	str	r2, [sp, #4]
 800cbae:	9a02      	ldr	r2, [sp, #8]
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d808      	bhi.n	800cbc8 <__multiply+0x98>
 800cbb6:	2f00      	cmp	r7, #0
 800cbb8:	dc55      	bgt.n	800cc66 <__multiply+0x136>
 800cbba:	6107      	str	r7, [r0, #16]
 800cbbc:	b005      	add	sp, #20
 800cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc2:	f843 2b04 	str.w	r2, [r3], #4
 800cbc6:	e7db      	b.n	800cb80 <__multiply+0x50>
 800cbc8:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbcc:	f1ba 0f00 	cmp.w	sl, #0
 800cbd0:	d020      	beq.n	800cc14 <__multiply+0xe4>
 800cbd2:	f105 0e14 	add.w	lr, r5, #20
 800cbd6:	46b1      	mov	r9, r6
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cbde:	f8d9 b000 	ldr.w	fp, [r9]
 800cbe2:	b2a1      	uxth	r1, r4
 800cbe4:	fa1f fb8b 	uxth.w	fp, fp
 800cbe8:	fb0a b101 	mla	r1, sl, r1, fp
 800cbec:	4411      	add	r1, r2
 800cbee:	f8d9 2000 	ldr.w	r2, [r9]
 800cbf2:	0c24      	lsrs	r4, r4, #16
 800cbf4:	0c12      	lsrs	r2, r2, #16
 800cbf6:	fb0a 2404 	mla	r4, sl, r4, r2
 800cbfa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cbfe:	b289      	uxth	r1, r1
 800cc00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc04:	45f4      	cmp	ip, lr
 800cc06:	f849 1b04 	str.w	r1, [r9], #4
 800cc0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cc0e:	d8e4      	bhi.n	800cbda <__multiply+0xaa>
 800cc10:	9901      	ldr	r1, [sp, #4]
 800cc12:	5072      	str	r2, [r6, r1]
 800cc14:	9a03      	ldr	r2, [sp, #12]
 800cc16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc1a:	3304      	adds	r3, #4
 800cc1c:	f1b9 0f00 	cmp.w	r9, #0
 800cc20:	d01f      	beq.n	800cc62 <__multiply+0x132>
 800cc22:	6834      	ldr	r4, [r6, #0]
 800cc24:	f105 0114 	add.w	r1, r5, #20
 800cc28:	46b6      	mov	lr, r6
 800cc2a:	f04f 0a00 	mov.w	sl, #0
 800cc2e:	880a      	ldrh	r2, [r1, #0]
 800cc30:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cc34:	fb09 b202 	mla	r2, r9, r2, fp
 800cc38:	4492      	add	sl, r2
 800cc3a:	b2a4      	uxth	r4, r4
 800cc3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cc40:	f84e 4b04 	str.w	r4, [lr], #4
 800cc44:	f851 4b04 	ldr.w	r4, [r1], #4
 800cc48:	f8be 2000 	ldrh.w	r2, [lr]
 800cc4c:	0c24      	lsrs	r4, r4, #16
 800cc4e:	fb09 2404 	mla	r4, r9, r4, r2
 800cc52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cc56:	458c      	cmp	ip, r1
 800cc58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cc5c:	d8e7      	bhi.n	800cc2e <__multiply+0xfe>
 800cc5e:	9a01      	ldr	r2, [sp, #4]
 800cc60:	50b4      	str	r4, [r6, r2]
 800cc62:	3604      	adds	r6, #4
 800cc64:	e7a3      	b.n	800cbae <__multiply+0x7e>
 800cc66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1a5      	bne.n	800cbba <__multiply+0x8a>
 800cc6e:	3f01      	subs	r7, #1
 800cc70:	e7a1      	b.n	800cbb6 <__multiply+0x86>
 800cc72:	bf00      	nop
 800cc74:	080116ac 	.word	0x080116ac
 800cc78:	0801173c 	.word	0x0801173c

0800cc7c <__pow5mult>:
 800cc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc80:	4615      	mov	r5, r2
 800cc82:	f012 0203 	ands.w	r2, r2, #3
 800cc86:	4606      	mov	r6, r0
 800cc88:	460f      	mov	r7, r1
 800cc8a:	d007      	beq.n	800cc9c <__pow5mult+0x20>
 800cc8c:	4c25      	ldr	r4, [pc, #148]	; (800cd24 <__pow5mult+0xa8>)
 800cc8e:	3a01      	subs	r2, #1
 800cc90:	2300      	movs	r3, #0
 800cc92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc96:	f7ff fe51 	bl	800c93c <__multadd>
 800cc9a:	4607      	mov	r7, r0
 800cc9c:	10ad      	asrs	r5, r5, #2
 800cc9e:	d03d      	beq.n	800cd1c <__pow5mult+0xa0>
 800cca0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cca2:	b97c      	cbnz	r4, 800ccc4 <__pow5mult+0x48>
 800cca4:	2010      	movs	r0, #16
 800cca6:	f7ff fdbf 	bl	800c828 <malloc>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	6270      	str	r0, [r6, #36]	; 0x24
 800ccae:	b928      	cbnz	r0, 800ccbc <__pow5mult+0x40>
 800ccb0:	4b1d      	ldr	r3, [pc, #116]	; (800cd28 <__pow5mult+0xac>)
 800ccb2:	481e      	ldr	r0, [pc, #120]	; (800cd2c <__pow5mult+0xb0>)
 800ccb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccb8:	f000 fce6 	bl	800d688 <__assert_func>
 800ccbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccc0:	6004      	str	r4, [r0, #0]
 800ccc2:	60c4      	str	r4, [r0, #12]
 800ccc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cccc:	b94c      	cbnz	r4, 800cce2 <__pow5mult+0x66>
 800ccce:	f240 2171 	movw	r1, #625	; 0x271
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7ff ff16 	bl	800cb04 <__i2b>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccde:	4604      	mov	r4, r0
 800cce0:	6003      	str	r3, [r0, #0]
 800cce2:	f04f 0900 	mov.w	r9, #0
 800cce6:	07eb      	lsls	r3, r5, #31
 800cce8:	d50a      	bpl.n	800cd00 <__pow5mult+0x84>
 800ccea:	4639      	mov	r1, r7
 800ccec:	4622      	mov	r2, r4
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f7ff ff1e 	bl	800cb30 <__multiply>
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	4680      	mov	r8, r0
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f7ff fdfd 	bl	800c8f8 <_Bfree>
 800ccfe:	4647      	mov	r7, r8
 800cd00:	106d      	asrs	r5, r5, #1
 800cd02:	d00b      	beq.n	800cd1c <__pow5mult+0xa0>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	b938      	cbnz	r0, 800cd18 <__pow5mult+0x9c>
 800cd08:	4622      	mov	r2, r4
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7ff ff0f 	bl	800cb30 <__multiply>
 800cd12:	6020      	str	r0, [r4, #0]
 800cd14:	f8c0 9000 	str.w	r9, [r0]
 800cd18:	4604      	mov	r4, r0
 800cd1a:	e7e4      	b.n	800cce6 <__pow5mult+0x6a>
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd22:	bf00      	nop
 800cd24:	08011890 	.word	0x08011890
 800cd28:	08011636 	.word	0x08011636
 800cd2c:	0801173c 	.word	0x0801173c

0800cd30 <__lshift>:
 800cd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd34:	460c      	mov	r4, r1
 800cd36:	6849      	ldr	r1, [r1, #4]
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	4607      	mov	r7, r0
 800cd42:	4691      	mov	r9, r2
 800cd44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd48:	f108 0601 	add.w	r6, r8, #1
 800cd4c:	42b3      	cmp	r3, r6
 800cd4e:	db0b      	blt.n	800cd68 <__lshift+0x38>
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff fd91 	bl	800c878 <_Balloc>
 800cd56:	4605      	mov	r5, r0
 800cd58:	b948      	cbnz	r0, 800cd6e <__lshift+0x3e>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	4b28      	ldr	r3, [pc, #160]	; (800ce00 <__lshift+0xd0>)
 800cd5e:	4829      	ldr	r0, [pc, #164]	; (800ce04 <__lshift+0xd4>)
 800cd60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd64:	f000 fc90 	bl	800d688 <__assert_func>
 800cd68:	3101      	adds	r1, #1
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	e7ee      	b.n	800cd4c <__lshift+0x1c>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	f100 0114 	add.w	r1, r0, #20
 800cd74:	f100 0210 	add.w	r2, r0, #16
 800cd78:	4618      	mov	r0, r3
 800cd7a:	4553      	cmp	r3, sl
 800cd7c:	db33      	blt.n	800cde6 <__lshift+0xb6>
 800cd7e:	6920      	ldr	r0, [r4, #16]
 800cd80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd84:	f104 0314 	add.w	r3, r4, #20
 800cd88:	f019 091f 	ands.w	r9, r9, #31
 800cd8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd94:	d02b      	beq.n	800cdee <__lshift+0xbe>
 800cd96:	f1c9 0e20 	rsb	lr, r9, #32
 800cd9a:	468a      	mov	sl, r1
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	6818      	ldr	r0, [r3, #0]
 800cda0:	fa00 f009 	lsl.w	r0, r0, r9
 800cda4:	4302      	orrs	r2, r0
 800cda6:	f84a 2b04 	str.w	r2, [sl], #4
 800cdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdae:	459c      	cmp	ip, r3
 800cdb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cdb4:	d8f3      	bhi.n	800cd9e <__lshift+0x6e>
 800cdb6:	ebac 0304 	sub.w	r3, ip, r4
 800cdba:	3b15      	subs	r3, #21
 800cdbc:	f023 0303 	bic.w	r3, r3, #3
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	f104 0015 	add.w	r0, r4, #21
 800cdc6:	4584      	cmp	ip, r0
 800cdc8:	bf38      	it	cc
 800cdca:	2304      	movcc	r3, #4
 800cdcc:	50ca      	str	r2, [r1, r3]
 800cdce:	b10a      	cbz	r2, 800cdd4 <__lshift+0xa4>
 800cdd0:	f108 0602 	add.w	r6, r8, #2
 800cdd4:	3e01      	subs	r6, #1
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	612e      	str	r6, [r5, #16]
 800cdda:	4621      	mov	r1, r4
 800cddc:	f7ff fd8c 	bl	800c8f8 <_Bfree>
 800cde0:	4628      	mov	r0, r5
 800cde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdea:	3301      	adds	r3, #1
 800cdec:	e7c5      	b.n	800cd7a <__lshift+0x4a>
 800cdee:	3904      	subs	r1, #4
 800cdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdf8:	459c      	cmp	ip, r3
 800cdfa:	d8f9      	bhi.n	800cdf0 <__lshift+0xc0>
 800cdfc:	e7ea      	b.n	800cdd4 <__lshift+0xa4>
 800cdfe:	bf00      	nop
 800ce00:	080116ac 	.word	0x080116ac
 800ce04:	0801173c 	.word	0x0801173c

0800ce08 <__mcmp>:
 800ce08:	b530      	push	{r4, r5, lr}
 800ce0a:	6902      	ldr	r2, [r0, #16]
 800ce0c:	690c      	ldr	r4, [r1, #16]
 800ce0e:	1b12      	subs	r2, r2, r4
 800ce10:	d10e      	bne.n	800ce30 <__mcmp+0x28>
 800ce12:	f100 0314 	add.w	r3, r0, #20
 800ce16:	3114      	adds	r1, #20
 800ce18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce28:	42a5      	cmp	r5, r4
 800ce2a:	d003      	beq.n	800ce34 <__mcmp+0x2c>
 800ce2c:	d305      	bcc.n	800ce3a <__mcmp+0x32>
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4610      	mov	r0, r2
 800ce32:	bd30      	pop	{r4, r5, pc}
 800ce34:	4283      	cmp	r3, r0
 800ce36:	d3f3      	bcc.n	800ce20 <__mcmp+0x18>
 800ce38:	e7fa      	b.n	800ce30 <__mcmp+0x28>
 800ce3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce3e:	e7f7      	b.n	800ce30 <__mcmp+0x28>

0800ce40 <__mdiff>:
 800ce40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	460c      	mov	r4, r1
 800ce46:	4606      	mov	r6, r0
 800ce48:	4611      	mov	r1, r2
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	4617      	mov	r7, r2
 800ce4e:	f7ff ffdb 	bl	800ce08 <__mcmp>
 800ce52:	1e05      	subs	r5, r0, #0
 800ce54:	d110      	bne.n	800ce78 <__mdiff+0x38>
 800ce56:	4629      	mov	r1, r5
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7ff fd0d 	bl	800c878 <_Balloc>
 800ce5e:	b930      	cbnz	r0, 800ce6e <__mdiff+0x2e>
 800ce60:	4b39      	ldr	r3, [pc, #228]	; (800cf48 <__mdiff+0x108>)
 800ce62:	4602      	mov	r2, r0
 800ce64:	f240 2132 	movw	r1, #562	; 0x232
 800ce68:	4838      	ldr	r0, [pc, #224]	; (800cf4c <__mdiff+0x10c>)
 800ce6a:	f000 fc0d 	bl	800d688 <__assert_func>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce78:	bfa4      	itt	ge
 800ce7a:	463b      	movge	r3, r7
 800ce7c:	4627      	movge	r7, r4
 800ce7e:	4630      	mov	r0, r6
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	bfa6      	itte	ge
 800ce84:	461c      	movge	r4, r3
 800ce86:	2500      	movge	r5, #0
 800ce88:	2501      	movlt	r5, #1
 800ce8a:	f7ff fcf5 	bl	800c878 <_Balloc>
 800ce8e:	b920      	cbnz	r0, 800ce9a <__mdiff+0x5a>
 800ce90:	4b2d      	ldr	r3, [pc, #180]	; (800cf48 <__mdiff+0x108>)
 800ce92:	4602      	mov	r2, r0
 800ce94:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce98:	e7e6      	b.n	800ce68 <__mdiff+0x28>
 800ce9a:	693e      	ldr	r6, [r7, #16]
 800ce9c:	60c5      	str	r5, [r0, #12]
 800ce9e:	6925      	ldr	r5, [r4, #16]
 800cea0:	f107 0114 	add.w	r1, r7, #20
 800cea4:	f104 0914 	add.w	r9, r4, #20
 800cea8:	f100 0e14 	add.w	lr, r0, #20
 800ceac:	f107 0210 	add.w	r2, r7, #16
 800ceb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ceb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ceb8:	46f2      	mov	sl, lr
 800ceba:	2700      	movs	r7, #0
 800cebc:	f859 3b04 	ldr.w	r3, [r9], #4
 800cec0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cec4:	fa1f f883 	uxth.w	r8, r3
 800cec8:	fa17 f78b 	uxtah	r7, r7, fp
 800cecc:	0c1b      	lsrs	r3, r3, #16
 800cece:	eba7 0808 	sub.w	r8, r7, r8
 800ced2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ced6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ceda:	fa1f f888 	uxth.w	r8, r8
 800cede:	141f      	asrs	r7, r3, #16
 800cee0:	454d      	cmp	r5, r9
 800cee2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cee6:	f84a 3b04 	str.w	r3, [sl], #4
 800ceea:	d8e7      	bhi.n	800cebc <__mdiff+0x7c>
 800ceec:	1b2b      	subs	r3, r5, r4
 800ceee:	3b15      	subs	r3, #21
 800cef0:	f023 0303 	bic.w	r3, r3, #3
 800cef4:	3304      	adds	r3, #4
 800cef6:	3415      	adds	r4, #21
 800cef8:	42a5      	cmp	r5, r4
 800cefa:	bf38      	it	cc
 800cefc:	2304      	movcc	r3, #4
 800cefe:	4419      	add	r1, r3
 800cf00:	4473      	add	r3, lr
 800cf02:	469e      	mov	lr, r3
 800cf04:	460d      	mov	r5, r1
 800cf06:	4565      	cmp	r5, ip
 800cf08:	d30e      	bcc.n	800cf28 <__mdiff+0xe8>
 800cf0a:	f10c 0203 	add.w	r2, ip, #3
 800cf0e:	1a52      	subs	r2, r2, r1
 800cf10:	f022 0203 	bic.w	r2, r2, #3
 800cf14:	3903      	subs	r1, #3
 800cf16:	458c      	cmp	ip, r1
 800cf18:	bf38      	it	cc
 800cf1a:	2200      	movcc	r2, #0
 800cf1c:	441a      	add	r2, r3
 800cf1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf22:	b17b      	cbz	r3, 800cf44 <__mdiff+0x104>
 800cf24:	6106      	str	r6, [r0, #16]
 800cf26:	e7a5      	b.n	800ce74 <__mdiff+0x34>
 800cf28:	f855 8b04 	ldr.w	r8, [r5], #4
 800cf2c:	fa17 f488 	uxtah	r4, r7, r8
 800cf30:	1422      	asrs	r2, r4, #16
 800cf32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cf36:	b2a4      	uxth	r4, r4
 800cf38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cf3c:	f84e 4b04 	str.w	r4, [lr], #4
 800cf40:	1417      	asrs	r7, r2, #16
 800cf42:	e7e0      	b.n	800cf06 <__mdiff+0xc6>
 800cf44:	3e01      	subs	r6, #1
 800cf46:	e7ea      	b.n	800cf1e <__mdiff+0xde>
 800cf48:	080116ac 	.word	0x080116ac
 800cf4c:	0801173c 	.word	0x0801173c

0800cf50 <__ulp>:
 800cf50:	b082      	sub	sp, #8
 800cf52:	ed8d 0b00 	vstr	d0, [sp]
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	4912      	ldr	r1, [pc, #72]	; (800cfa4 <__ulp+0x54>)
 800cf5a:	4019      	ands	r1, r3
 800cf5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cf60:	2900      	cmp	r1, #0
 800cf62:	dd05      	ble.n	800cf70 <__ulp+0x20>
 800cf64:	2200      	movs	r2, #0
 800cf66:	460b      	mov	r3, r1
 800cf68:	ec43 2b10 	vmov	d0, r2, r3
 800cf6c:	b002      	add	sp, #8
 800cf6e:	4770      	bx	lr
 800cf70:	4249      	negs	r1, r1
 800cf72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cf76:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	f04f 0300 	mov.w	r3, #0
 800cf82:	da04      	bge.n	800cf8e <__ulp+0x3e>
 800cf84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf88:	fa41 f300 	asr.w	r3, r1, r0
 800cf8c:	e7ec      	b.n	800cf68 <__ulp+0x18>
 800cf8e:	f1a0 0114 	sub.w	r1, r0, #20
 800cf92:	291e      	cmp	r1, #30
 800cf94:	bfda      	itte	le
 800cf96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cf9a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cf9e:	2101      	movgt	r1, #1
 800cfa0:	460a      	mov	r2, r1
 800cfa2:	e7e1      	b.n	800cf68 <__ulp+0x18>
 800cfa4:	7ff00000 	.word	0x7ff00000

0800cfa8 <__b2d>:
 800cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfaa:	6905      	ldr	r5, [r0, #16]
 800cfac:	f100 0714 	add.w	r7, r0, #20
 800cfb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cfb4:	1f2e      	subs	r6, r5, #4
 800cfb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f7ff fd52 	bl	800ca64 <__hi0bits>
 800cfc0:	f1c0 0320 	rsb	r3, r0, #32
 800cfc4:	280a      	cmp	r0, #10
 800cfc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d044 <__b2d+0x9c>
 800cfca:	600b      	str	r3, [r1, #0]
 800cfcc:	dc14      	bgt.n	800cff8 <__b2d+0x50>
 800cfce:	f1c0 0e0b 	rsb	lr, r0, #11
 800cfd2:	fa24 f10e 	lsr.w	r1, r4, lr
 800cfd6:	42b7      	cmp	r7, r6
 800cfd8:	ea41 030c 	orr.w	r3, r1, ip
 800cfdc:	bf34      	ite	cc
 800cfde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cfe2:	2100      	movcs	r1, #0
 800cfe4:	3015      	adds	r0, #21
 800cfe6:	fa04 f000 	lsl.w	r0, r4, r0
 800cfea:	fa21 f10e 	lsr.w	r1, r1, lr
 800cfee:	ea40 0201 	orr.w	r2, r0, r1
 800cff2:	ec43 2b10 	vmov	d0, r2, r3
 800cff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff8:	42b7      	cmp	r7, r6
 800cffa:	bf3a      	itte	cc
 800cffc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d000:	f1a5 0608 	subcc.w	r6, r5, #8
 800d004:	2100      	movcs	r1, #0
 800d006:	380b      	subs	r0, #11
 800d008:	d017      	beq.n	800d03a <__b2d+0x92>
 800d00a:	f1c0 0c20 	rsb	ip, r0, #32
 800d00e:	fa04 f500 	lsl.w	r5, r4, r0
 800d012:	42be      	cmp	r6, r7
 800d014:	fa21 f40c 	lsr.w	r4, r1, ip
 800d018:	ea45 0504 	orr.w	r5, r5, r4
 800d01c:	bf8c      	ite	hi
 800d01e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d022:	2400      	movls	r4, #0
 800d024:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d028:	fa01 f000 	lsl.w	r0, r1, r0
 800d02c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d030:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d034:	ea40 0204 	orr.w	r2, r0, r4
 800d038:	e7db      	b.n	800cff2 <__b2d+0x4a>
 800d03a:	ea44 030c 	orr.w	r3, r4, ip
 800d03e:	460a      	mov	r2, r1
 800d040:	e7d7      	b.n	800cff2 <__b2d+0x4a>
 800d042:	bf00      	nop
 800d044:	3ff00000 	.word	0x3ff00000

0800d048 <__d2b>:
 800d048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	4689      	mov	r9, r1
 800d04e:	2101      	movs	r1, #1
 800d050:	ec57 6b10 	vmov	r6, r7, d0
 800d054:	4690      	mov	r8, r2
 800d056:	f7ff fc0f 	bl	800c878 <_Balloc>
 800d05a:	4604      	mov	r4, r0
 800d05c:	b930      	cbnz	r0, 800d06c <__d2b+0x24>
 800d05e:	4602      	mov	r2, r0
 800d060:	4b25      	ldr	r3, [pc, #148]	; (800d0f8 <__d2b+0xb0>)
 800d062:	4826      	ldr	r0, [pc, #152]	; (800d0fc <__d2b+0xb4>)
 800d064:	f240 310a 	movw	r1, #778	; 0x30a
 800d068:	f000 fb0e 	bl	800d688 <__assert_func>
 800d06c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d074:	bb35      	cbnz	r5, 800d0c4 <__d2b+0x7c>
 800d076:	2e00      	cmp	r6, #0
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	d028      	beq.n	800d0ce <__d2b+0x86>
 800d07c:	4668      	mov	r0, sp
 800d07e:	9600      	str	r6, [sp, #0]
 800d080:	f7ff fd10 	bl	800caa4 <__lo0bits>
 800d084:	9900      	ldr	r1, [sp, #0]
 800d086:	b300      	cbz	r0, 800d0ca <__d2b+0x82>
 800d088:	9a01      	ldr	r2, [sp, #4]
 800d08a:	f1c0 0320 	rsb	r3, r0, #32
 800d08e:	fa02 f303 	lsl.w	r3, r2, r3
 800d092:	430b      	orrs	r3, r1
 800d094:	40c2      	lsrs	r2, r0
 800d096:	6163      	str	r3, [r4, #20]
 800d098:	9201      	str	r2, [sp, #4]
 800d09a:	9b01      	ldr	r3, [sp, #4]
 800d09c:	61a3      	str	r3, [r4, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bf14      	ite	ne
 800d0a2:	2202      	movne	r2, #2
 800d0a4:	2201      	moveq	r2, #1
 800d0a6:	6122      	str	r2, [r4, #16]
 800d0a8:	b1d5      	cbz	r5, 800d0e0 <__d2b+0x98>
 800d0aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0ae:	4405      	add	r5, r0
 800d0b0:	f8c9 5000 	str.w	r5, [r9]
 800d0b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0b8:	f8c8 0000 	str.w	r0, [r8]
 800d0bc:	4620      	mov	r0, r4
 800d0be:	b003      	add	sp, #12
 800d0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0c8:	e7d5      	b.n	800d076 <__d2b+0x2e>
 800d0ca:	6161      	str	r1, [r4, #20]
 800d0cc:	e7e5      	b.n	800d09a <__d2b+0x52>
 800d0ce:	a801      	add	r0, sp, #4
 800d0d0:	f7ff fce8 	bl	800caa4 <__lo0bits>
 800d0d4:	9b01      	ldr	r3, [sp, #4]
 800d0d6:	6163      	str	r3, [r4, #20]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	6122      	str	r2, [r4, #16]
 800d0dc:	3020      	adds	r0, #32
 800d0de:	e7e3      	b.n	800d0a8 <__d2b+0x60>
 800d0e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0e8:	f8c9 0000 	str.w	r0, [r9]
 800d0ec:	6918      	ldr	r0, [r3, #16]
 800d0ee:	f7ff fcb9 	bl	800ca64 <__hi0bits>
 800d0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0f6:	e7df      	b.n	800d0b8 <__d2b+0x70>
 800d0f8:	080116ac 	.word	0x080116ac
 800d0fc:	0801173c 	.word	0x0801173c

0800d100 <__ratio>:
 800d100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d104:	4688      	mov	r8, r1
 800d106:	4669      	mov	r1, sp
 800d108:	4681      	mov	r9, r0
 800d10a:	f7ff ff4d 	bl	800cfa8 <__b2d>
 800d10e:	a901      	add	r1, sp, #4
 800d110:	4640      	mov	r0, r8
 800d112:	ec55 4b10 	vmov	r4, r5, d0
 800d116:	f7ff ff47 	bl	800cfa8 <__b2d>
 800d11a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d11e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d122:	eba3 0c02 	sub.w	ip, r3, r2
 800d126:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d12a:	1a9b      	subs	r3, r3, r2
 800d12c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d130:	ec51 0b10 	vmov	r0, r1, d0
 800d134:	2b00      	cmp	r3, #0
 800d136:	bfd6      	itet	le
 800d138:	460a      	movle	r2, r1
 800d13a:	462a      	movgt	r2, r5
 800d13c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d140:	468b      	mov	fp, r1
 800d142:	462f      	mov	r7, r5
 800d144:	bfd4      	ite	le
 800d146:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d14a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d14e:	4620      	mov	r0, r4
 800d150:	ee10 2a10 	vmov	r2, s0
 800d154:	465b      	mov	r3, fp
 800d156:	4639      	mov	r1, r7
 800d158:	f7f3 fb90 	bl	800087c <__aeabi_ddiv>
 800d15c:	ec41 0b10 	vmov	d0, r0, r1
 800d160:	b003      	add	sp, #12
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d166 <__copybits>:
 800d166:	3901      	subs	r1, #1
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	1149      	asrs	r1, r1, #5
 800d16c:	6914      	ldr	r4, [r2, #16]
 800d16e:	3101      	adds	r1, #1
 800d170:	f102 0314 	add.w	r3, r2, #20
 800d174:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d178:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d17c:	1f05      	subs	r5, r0, #4
 800d17e:	42a3      	cmp	r3, r4
 800d180:	d30c      	bcc.n	800d19c <__copybits+0x36>
 800d182:	1aa3      	subs	r3, r4, r2
 800d184:	3b11      	subs	r3, #17
 800d186:	f023 0303 	bic.w	r3, r3, #3
 800d18a:	3211      	adds	r2, #17
 800d18c:	42a2      	cmp	r2, r4
 800d18e:	bf88      	it	hi
 800d190:	2300      	movhi	r3, #0
 800d192:	4418      	add	r0, r3
 800d194:	2300      	movs	r3, #0
 800d196:	4288      	cmp	r0, r1
 800d198:	d305      	bcc.n	800d1a6 <__copybits+0x40>
 800d19a:	bd70      	pop	{r4, r5, r6, pc}
 800d19c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1a4:	e7eb      	b.n	800d17e <__copybits+0x18>
 800d1a6:	f840 3b04 	str.w	r3, [r0], #4
 800d1aa:	e7f4      	b.n	800d196 <__copybits+0x30>

0800d1ac <__any_on>:
 800d1ac:	f100 0214 	add.w	r2, r0, #20
 800d1b0:	6900      	ldr	r0, [r0, #16]
 800d1b2:	114b      	asrs	r3, r1, #5
 800d1b4:	4298      	cmp	r0, r3
 800d1b6:	b510      	push	{r4, lr}
 800d1b8:	db11      	blt.n	800d1de <__any_on+0x32>
 800d1ba:	dd0a      	ble.n	800d1d2 <__any_on+0x26>
 800d1bc:	f011 011f 	ands.w	r1, r1, #31
 800d1c0:	d007      	beq.n	800d1d2 <__any_on+0x26>
 800d1c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1c6:	fa24 f001 	lsr.w	r0, r4, r1
 800d1ca:	fa00 f101 	lsl.w	r1, r0, r1
 800d1ce:	428c      	cmp	r4, r1
 800d1d0:	d10b      	bne.n	800d1ea <__any_on+0x3e>
 800d1d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d803      	bhi.n	800d1e2 <__any_on+0x36>
 800d1da:	2000      	movs	r0, #0
 800d1dc:	bd10      	pop	{r4, pc}
 800d1de:	4603      	mov	r3, r0
 800d1e0:	e7f7      	b.n	800d1d2 <__any_on+0x26>
 800d1e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d1e6:	2900      	cmp	r1, #0
 800d1e8:	d0f5      	beq.n	800d1d6 <__any_on+0x2a>
 800d1ea:	2001      	movs	r0, #1
 800d1ec:	e7f6      	b.n	800d1dc <__any_on+0x30>

0800d1ee <_calloc_r>:
 800d1ee:	b513      	push	{r0, r1, r4, lr}
 800d1f0:	434a      	muls	r2, r1
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	9201      	str	r2, [sp, #4]
 800d1f6:	f000 f859 	bl	800d2ac <_malloc_r>
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	b118      	cbz	r0, 800d206 <_calloc_r+0x18>
 800d1fe:	9a01      	ldr	r2, [sp, #4]
 800d200:	2100      	movs	r1, #0
 800d202:	f7fc fdb9 	bl	8009d78 <memset>
 800d206:	4620      	mov	r0, r4
 800d208:	b002      	add	sp, #8
 800d20a:	bd10      	pop	{r4, pc}

0800d20c <_free_r>:
 800d20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d20e:	2900      	cmp	r1, #0
 800d210:	d048      	beq.n	800d2a4 <_free_r+0x98>
 800d212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d216:	9001      	str	r0, [sp, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f1a1 0404 	sub.w	r4, r1, #4
 800d21e:	bfb8      	it	lt
 800d220:	18e4      	addlt	r4, r4, r3
 800d222:	f000 fa7b 	bl	800d71c <__malloc_lock>
 800d226:	4a20      	ldr	r2, [pc, #128]	; (800d2a8 <_free_r+0x9c>)
 800d228:	9801      	ldr	r0, [sp, #4]
 800d22a:	6813      	ldr	r3, [r2, #0]
 800d22c:	4615      	mov	r5, r2
 800d22e:	b933      	cbnz	r3, 800d23e <_free_r+0x32>
 800d230:	6063      	str	r3, [r4, #4]
 800d232:	6014      	str	r4, [r2, #0]
 800d234:	b003      	add	sp, #12
 800d236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d23a:	f000 ba75 	b.w	800d728 <__malloc_unlock>
 800d23e:	42a3      	cmp	r3, r4
 800d240:	d90b      	bls.n	800d25a <_free_r+0x4e>
 800d242:	6821      	ldr	r1, [r4, #0]
 800d244:	1862      	adds	r2, r4, r1
 800d246:	4293      	cmp	r3, r2
 800d248:	bf04      	itt	eq
 800d24a:	681a      	ldreq	r2, [r3, #0]
 800d24c:	685b      	ldreq	r3, [r3, #4]
 800d24e:	6063      	str	r3, [r4, #4]
 800d250:	bf04      	itt	eq
 800d252:	1852      	addeq	r2, r2, r1
 800d254:	6022      	streq	r2, [r4, #0]
 800d256:	602c      	str	r4, [r5, #0]
 800d258:	e7ec      	b.n	800d234 <_free_r+0x28>
 800d25a:	461a      	mov	r2, r3
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	b10b      	cbz	r3, 800d264 <_free_r+0x58>
 800d260:	42a3      	cmp	r3, r4
 800d262:	d9fa      	bls.n	800d25a <_free_r+0x4e>
 800d264:	6811      	ldr	r1, [r2, #0]
 800d266:	1855      	adds	r5, r2, r1
 800d268:	42a5      	cmp	r5, r4
 800d26a:	d10b      	bne.n	800d284 <_free_r+0x78>
 800d26c:	6824      	ldr	r4, [r4, #0]
 800d26e:	4421      	add	r1, r4
 800d270:	1854      	adds	r4, r2, r1
 800d272:	42a3      	cmp	r3, r4
 800d274:	6011      	str	r1, [r2, #0]
 800d276:	d1dd      	bne.n	800d234 <_free_r+0x28>
 800d278:	681c      	ldr	r4, [r3, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	6053      	str	r3, [r2, #4]
 800d27e:	4421      	add	r1, r4
 800d280:	6011      	str	r1, [r2, #0]
 800d282:	e7d7      	b.n	800d234 <_free_r+0x28>
 800d284:	d902      	bls.n	800d28c <_free_r+0x80>
 800d286:	230c      	movs	r3, #12
 800d288:	6003      	str	r3, [r0, #0]
 800d28a:	e7d3      	b.n	800d234 <_free_r+0x28>
 800d28c:	6825      	ldr	r5, [r4, #0]
 800d28e:	1961      	adds	r1, r4, r5
 800d290:	428b      	cmp	r3, r1
 800d292:	bf04      	itt	eq
 800d294:	6819      	ldreq	r1, [r3, #0]
 800d296:	685b      	ldreq	r3, [r3, #4]
 800d298:	6063      	str	r3, [r4, #4]
 800d29a:	bf04      	itt	eq
 800d29c:	1949      	addeq	r1, r1, r5
 800d29e:	6021      	streq	r1, [r4, #0]
 800d2a0:	6054      	str	r4, [r2, #4]
 800d2a2:	e7c7      	b.n	800d234 <_free_r+0x28>
 800d2a4:	b003      	add	sp, #12
 800d2a6:	bd30      	pop	{r4, r5, pc}
 800d2a8:	200002b0 	.word	0x200002b0

0800d2ac <_malloc_r>:
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	1ccd      	adds	r5, r1, #3
 800d2b0:	f025 0503 	bic.w	r5, r5, #3
 800d2b4:	3508      	adds	r5, #8
 800d2b6:	2d0c      	cmp	r5, #12
 800d2b8:	bf38      	it	cc
 800d2ba:	250c      	movcc	r5, #12
 800d2bc:	2d00      	cmp	r5, #0
 800d2be:	4606      	mov	r6, r0
 800d2c0:	db01      	blt.n	800d2c6 <_malloc_r+0x1a>
 800d2c2:	42a9      	cmp	r1, r5
 800d2c4:	d903      	bls.n	800d2ce <_malloc_r+0x22>
 800d2c6:	230c      	movs	r3, #12
 800d2c8:	6033      	str	r3, [r6, #0]
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ce:	f000 fa25 	bl	800d71c <__malloc_lock>
 800d2d2:	4921      	ldr	r1, [pc, #132]	; (800d358 <_malloc_r+0xac>)
 800d2d4:	680a      	ldr	r2, [r1, #0]
 800d2d6:	4614      	mov	r4, r2
 800d2d8:	b99c      	cbnz	r4, 800d302 <_malloc_r+0x56>
 800d2da:	4f20      	ldr	r7, [pc, #128]	; (800d35c <_malloc_r+0xb0>)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	b923      	cbnz	r3, 800d2ea <_malloc_r+0x3e>
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f000 f9a0 	bl	800d628 <_sbrk_r>
 800d2e8:	6038      	str	r0, [r7, #0]
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	f000 f99b 	bl	800d628 <_sbrk_r>
 800d2f2:	1c43      	adds	r3, r0, #1
 800d2f4:	d123      	bne.n	800d33e <_malloc_r+0x92>
 800d2f6:	230c      	movs	r3, #12
 800d2f8:	6033      	str	r3, [r6, #0]
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f000 fa14 	bl	800d728 <__malloc_unlock>
 800d300:	e7e3      	b.n	800d2ca <_malloc_r+0x1e>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	1b5b      	subs	r3, r3, r5
 800d306:	d417      	bmi.n	800d338 <_malloc_r+0x8c>
 800d308:	2b0b      	cmp	r3, #11
 800d30a:	d903      	bls.n	800d314 <_malloc_r+0x68>
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	441c      	add	r4, r3
 800d310:	6025      	str	r5, [r4, #0]
 800d312:	e004      	b.n	800d31e <_malloc_r+0x72>
 800d314:	6863      	ldr	r3, [r4, #4]
 800d316:	42a2      	cmp	r2, r4
 800d318:	bf0c      	ite	eq
 800d31a:	600b      	streq	r3, [r1, #0]
 800d31c:	6053      	strne	r3, [r2, #4]
 800d31e:	4630      	mov	r0, r6
 800d320:	f000 fa02 	bl	800d728 <__malloc_unlock>
 800d324:	f104 000b 	add.w	r0, r4, #11
 800d328:	1d23      	adds	r3, r4, #4
 800d32a:	f020 0007 	bic.w	r0, r0, #7
 800d32e:	1ac2      	subs	r2, r0, r3
 800d330:	d0cc      	beq.n	800d2cc <_malloc_r+0x20>
 800d332:	1a1b      	subs	r3, r3, r0
 800d334:	50a3      	str	r3, [r4, r2]
 800d336:	e7c9      	b.n	800d2cc <_malloc_r+0x20>
 800d338:	4622      	mov	r2, r4
 800d33a:	6864      	ldr	r4, [r4, #4]
 800d33c:	e7cc      	b.n	800d2d8 <_malloc_r+0x2c>
 800d33e:	1cc4      	adds	r4, r0, #3
 800d340:	f024 0403 	bic.w	r4, r4, #3
 800d344:	42a0      	cmp	r0, r4
 800d346:	d0e3      	beq.n	800d310 <_malloc_r+0x64>
 800d348:	1a21      	subs	r1, r4, r0
 800d34a:	4630      	mov	r0, r6
 800d34c:	f000 f96c 	bl	800d628 <_sbrk_r>
 800d350:	3001      	adds	r0, #1
 800d352:	d1dd      	bne.n	800d310 <_malloc_r+0x64>
 800d354:	e7cf      	b.n	800d2f6 <_malloc_r+0x4a>
 800d356:	bf00      	nop
 800d358:	200002b0 	.word	0x200002b0
 800d35c:	200002b4 	.word	0x200002b4

0800d360 <__ssputs_r>:
 800d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d364:	688e      	ldr	r6, [r1, #8]
 800d366:	429e      	cmp	r6, r3
 800d368:	4682      	mov	sl, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	4690      	mov	r8, r2
 800d36e:	461f      	mov	r7, r3
 800d370:	d838      	bhi.n	800d3e4 <__ssputs_r+0x84>
 800d372:	898a      	ldrh	r2, [r1, #12]
 800d374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d378:	d032      	beq.n	800d3e0 <__ssputs_r+0x80>
 800d37a:	6825      	ldr	r5, [r4, #0]
 800d37c:	6909      	ldr	r1, [r1, #16]
 800d37e:	eba5 0901 	sub.w	r9, r5, r1
 800d382:	6965      	ldr	r5, [r4, #20]
 800d384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d38c:	3301      	adds	r3, #1
 800d38e:	444b      	add	r3, r9
 800d390:	106d      	asrs	r5, r5, #1
 800d392:	429d      	cmp	r5, r3
 800d394:	bf38      	it	cc
 800d396:	461d      	movcc	r5, r3
 800d398:	0553      	lsls	r3, r2, #21
 800d39a:	d531      	bpl.n	800d400 <__ssputs_r+0xa0>
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7ff ff85 	bl	800d2ac <_malloc_r>
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	b950      	cbnz	r0, 800d3bc <__ssputs_r+0x5c>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	f8ca 3000 	str.w	r3, [sl]
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3b2:	81a3      	strh	r3, [r4, #12]
 800d3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3bc:	6921      	ldr	r1, [r4, #16]
 800d3be:	464a      	mov	r2, r9
 800d3c0:	f7ff fa4c 	bl	800c85c <memcpy>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	6126      	str	r6, [r4, #16]
 800d3d2:	6165      	str	r5, [r4, #20]
 800d3d4:	444e      	add	r6, r9
 800d3d6:	eba5 0509 	sub.w	r5, r5, r9
 800d3da:	6026      	str	r6, [r4, #0]
 800d3dc:	60a5      	str	r5, [r4, #8]
 800d3de:	463e      	mov	r6, r7
 800d3e0:	42be      	cmp	r6, r7
 800d3e2:	d900      	bls.n	800d3e6 <__ssputs_r+0x86>
 800d3e4:	463e      	mov	r6, r7
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	4641      	mov	r1, r8
 800d3ec:	f000 f97c 	bl	800d6e8 <memmove>
 800d3f0:	68a3      	ldr	r3, [r4, #8]
 800d3f2:	6822      	ldr	r2, [r4, #0]
 800d3f4:	1b9b      	subs	r3, r3, r6
 800d3f6:	4432      	add	r2, r6
 800d3f8:	60a3      	str	r3, [r4, #8]
 800d3fa:	6022      	str	r2, [r4, #0]
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e7db      	b.n	800d3b8 <__ssputs_r+0x58>
 800d400:	462a      	mov	r2, r5
 800d402:	f000 f997 	bl	800d734 <_realloc_r>
 800d406:	4606      	mov	r6, r0
 800d408:	2800      	cmp	r0, #0
 800d40a:	d1e1      	bne.n	800d3d0 <__ssputs_r+0x70>
 800d40c:	6921      	ldr	r1, [r4, #16]
 800d40e:	4650      	mov	r0, sl
 800d410:	f7ff fefc 	bl	800d20c <_free_r>
 800d414:	e7c7      	b.n	800d3a6 <__ssputs_r+0x46>
	...

0800d418 <_svfiprintf_r>:
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	4698      	mov	r8, r3
 800d41e:	898b      	ldrh	r3, [r1, #12]
 800d420:	061b      	lsls	r3, r3, #24
 800d422:	b09d      	sub	sp, #116	; 0x74
 800d424:	4607      	mov	r7, r0
 800d426:	460d      	mov	r5, r1
 800d428:	4614      	mov	r4, r2
 800d42a:	d50e      	bpl.n	800d44a <_svfiprintf_r+0x32>
 800d42c:	690b      	ldr	r3, [r1, #16]
 800d42e:	b963      	cbnz	r3, 800d44a <_svfiprintf_r+0x32>
 800d430:	2140      	movs	r1, #64	; 0x40
 800d432:	f7ff ff3b 	bl	800d2ac <_malloc_r>
 800d436:	6028      	str	r0, [r5, #0]
 800d438:	6128      	str	r0, [r5, #16]
 800d43a:	b920      	cbnz	r0, 800d446 <_svfiprintf_r+0x2e>
 800d43c:	230c      	movs	r3, #12
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	f04f 30ff 	mov.w	r0, #4294967295
 800d444:	e0d1      	b.n	800d5ea <_svfiprintf_r+0x1d2>
 800d446:	2340      	movs	r3, #64	; 0x40
 800d448:	616b      	str	r3, [r5, #20]
 800d44a:	2300      	movs	r3, #0
 800d44c:	9309      	str	r3, [sp, #36]	; 0x24
 800d44e:	2320      	movs	r3, #32
 800d450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d454:	f8cd 800c 	str.w	r8, [sp, #12]
 800d458:	2330      	movs	r3, #48	; 0x30
 800d45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d604 <_svfiprintf_r+0x1ec>
 800d45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d462:	f04f 0901 	mov.w	r9, #1
 800d466:	4623      	mov	r3, r4
 800d468:	469a      	mov	sl, r3
 800d46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d46e:	b10a      	cbz	r2, 800d474 <_svfiprintf_r+0x5c>
 800d470:	2a25      	cmp	r2, #37	; 0x25
 800d472:	d1f9      	bne.n	800d468 <_svfiprintf_r+0x50>
 800d474:	ebba 0b04 	subs.w	fp, sl, r4
 800d478:	d00b      	beq.n	800d492 <_svfiprintf_r+0x7a>
 800d47a:	465b      	mov	r3, fp
 800d47c:	4622      	mov	r2, r4
 800d47e:	4629      	mov	r1, r5
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff ff6d 	bl	800d360 <__ssputs_r>
 800d486:	3001      	adds	r0, #1
 800d488:	f000 80aa 	beq.w	800d5e0 <_svfiprintf_r+0x1c8>
 800d48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d48e:	445a      	add	r2, fp
 800d490:	9209      	str	r2, [sp, #36]	; 0x24
 800d492:	f89a 3000 	ldrb.w	r3, [sl]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 80a2 	beq.w	800d5e0 <_svfiprintf_r+0x1c8>
 800d49c:	2300      	movs	r3, #0
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a6:	f10a 0a01 	add.w	sl, sl, #1
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	9307      	str	r3, [sp, #28]
 800d4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800d4b4:	4654      	mov	r4, sl
 800d4b6:	2205      	movs	r2, #5
 800d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4bc:	4851      	ldr	r0, [pc, #324]	; (800d604 <_svfiprintf_r+0x1ec>)
 800d4be:	f7f2 fea7 	bl	8000210 <memchr>
 800d4c2:	9a04      	ldr	r2, [sp, #16]
 800d4c4:	b9d8      	cbnz	r0, 800d4fe <_svfiprintf_r+0xe6>
 800d4c6:	06d0      	lsls	r0, r2, #27
 800d4c8:	bf44      	itt	mi
 800d4ca:	2320      	movmi	r3, #32
 800d4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d0:	0711      	lsls	r1, r2, #28
 800d4d2:	bf44      	itt	mi
 800d4d4:	232b      	movmi	r3, #43	; 0x2b
 800d4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4da:	f89a 3000 	ldrb.w	r3, [sl]
 800d4de:	2b2a      	cmp	r3, #42	; 0x2a
 800d4e0:	d015      	beq.n	800d50e <_svfiprintf_r+0xf6>
 800d4e2:	9a07      	ldr	r2, [sp, #28]
 800d4e4:	4654      	mov	r4, sl
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	f04f 0c0a 	mov.w	ip, #10
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f2:	3b30      	subs	r3, #48	; 0x30
 800d4f4:	2b09      	cmp	r3, #9
 800d4f6:	d94e      	bls.n	800d596 <_svfiprintf_r+0x17e>
 800d4f8:	b1b0      	cbz	r0, 800d528 <_svfiprintf_r+0x110>
 800d4fa:	9207      	str	r2, [sp, #28]
 800d4fc:	e014      	b.n	800d528 <_svfiprintf_r+0x110>
 800d4fe:	eba0 0308 	sub.w	r3, r0, r8
 800d502:	fa09 f303 	lsl.w	r3, r9, r3
 800d506:	4313      	orrs	r3, r2
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	46a2      	mov	sl, r4
 800d50c:	e7d2      	b.n	800d4b4 <_svfiprintf_r+0x9c>
 800d50e:	9b03      	ldr	r3, [sp, #12]
 800d510:	1d19      	adds	r1, r3, #4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	9103      	str	r1, [sp, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfbb      	ittet	lt
 800d51a:	425b      	neglt	r3, r3
 800d51c:	f042 0202 	orrlt.w	r2, r2, #2
 800d520:	9307      	strge	r3, [sp, #28]
 800d522:	9307      	strlt	r3, [sp, #28]
 800d524:	bfb8      	it	lt
 800d526:	9204      	strlt	r2, [sp, #16]
 800d528:	7823      	ldrb	r3, [r4, #0]
 800d52a:	2b2e      	cmp	r3, #46	; 0x2e
 800d52c:	d10c      	bne.n	800d548 <_svfiprintf_r+0x130>
 800d52e:	7863      	ldrb	r3, [r4, #1]
 800d530:	2b2a      	cmp	r3, #42	; 0x2a
 800d532:	d135      	bne.n	800d5a0 <_svfiprintf_r+0x188>
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	1d1a      	adds	r2, r3, #4
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	9203      	str	r2, [sp, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bfb8      	it	lt
 800d540:	f04f 33ff 	movlt.w	r3, #4294967295
 800d544:	3402      	adds	r4, #2
 800d546:	9305      	str	r3, [sp, #20]
 800d548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d614 <_svfiprintf_r+0x1fc>
 800d54c:	7821      	ldrb	r1, [r4, #0]
 800d54e:	2203      	movs	r2, #3
 800d550:	4650      	mov	r0, sl
 800d552:	f7f2 fe5d 	bl	8000210 <memchr>
 800d556:	b140      	cbz	r0, 800d56a <_svfiprintf_r+0x152>
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	eba0 000a 	sub.w	r0, r0, sl
 800d55e:	fa03 f000 	lsl.w	r0, r3, r0
 800d562:	9b04      	ldr	r3, [sp, #16]
 800d564:	4303      	orrs	r3, r0
 800d566:	3401      	adds	r4, #1
 800d568:	9304      	str	r3, [sp, #16]
 800d56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56e:	4826      	ldr	r0, [pc, #152]	; (800d608 <_svfiprintf_r+0x1f0>)
 800d570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d574:	2206      	movs	r2, #6
 800d576:	f7f2 fe4b 	bl	8000210 <memchr>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d038      	beq.n	800d5f0 <_svfiprintf_r+0x1d8>
 800d57e:	4b23      	ldr	r3, [pc, #140]	; (800d60c <_svfiprintf_r+0x1f4>)
 800d580:	bb1b      	cbnz	r3, 800d5ca <_svfiprintf_r+0x1b2>
 800d582:	9b03      	ldr	r3, [sp, #12]
 800d584:	3307      	adds	r3, #7
 800d586:	f023 0307 	bic.w	r3, r3, #7
 800d58a:	3308      	adds	r3, #8
 800d58c:	9303      	str	r3, [sp, #12]
 800d58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d590:	4433      	add	r3, r6
 800d592:	9309      	str	r3, [sp, #36]	; 0x24
 800d594:	e767      	b.n	800d466 <_svfiprintf_r+0x4e>
 800d596:	fb0c 3202 	mla	r2, ip, r2, r3
 800d59a:	460c      	mov	r4, r1
 800d59c:	2001      	movs	r0, #1
 800d59e:	e7a5      	b.n	800d4ec <_svfiprintf_r+0xd4>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	3401      	adds	r4, #1
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	f04f 0c0a 	mov.w	ip, #10
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b2:	3a30      	subs	r2, #48	; 0x30
 800d5b4:	2a09      	cmp	r2, #9
 800d5b6:	d903      	bls.n	800d5c0 <_svfiprintf_r+0x1a8>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0c5      	beq.n	800d548 <_svfiprintf_r+0x130>
 800d5bc:	9105      	str	r1, [sp, #20]
 800d5be:	e7c3      	b.n	800d548 <_svfiprintf_r+0x130>
 800d5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e7f0      	b.n	800d5ac <_svfiprintf_r+0x194>
 800d5ca:	ab03      	add	r3, sp, #12
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4b0f      	ldr	r3, [pc, #60]	; (800d610 <_svfiprintf_r+0x1f8>)
 800d5d2:	a904      	add	r1, sp, #16
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	f7fc fc77 	bl	8009ec8 <_printf_float>
 800d5da:	1c42      	adds	r2, r0, #1
 800d5dc:	4606      	mov	r6, r0
 800d5de:	d1d6      	bne.n	800d58e <_svfiprintf_r+0x176>
 800d5e0:	89ab      	ldrh	r3, [r5, #12]
 800d5e2:	065b      	lsls	r3, r3, #25
 800d5e4:	f53f af2c 	bmi.w	800d440 <_svfiprintf_r+0x28>
 800d5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ea:	b01d      	add	sp, #116	; 0x74
 800d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f0:	ab03      	add	r3, sp, #12
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	462a      	mov	r2, r5
 800d5f6:	4b06      	ldr	r3, [pc, #24]	; (800d610 <_svfiprintf_r+0x1f8>)
 800d5f8:	a904      	add	r1, sp, #16
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	f7fc ff08 	bl	800a410 <_printf_i>
 800d600:	e7eb      	b.n	800d5da <_svfiprintf_r+0x1c2>
 800d602:	bf00      	nop
 800d604:	0801189c 	.word	0x0801189c
 800d608:	080118a6 	.word	0x080118a6
 800d60c:	08009ec9 	.word	0x08009ec9
 800d610:	0800d361 	.word	0x0800d361
 800d614:	080118a2 	.word	0x080118a2

0800d618 <nan>:
 800d618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d620 <nan+0x8>
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	00000000 	.word	0x00000000
 800d624:	7ff80000 	.word	0x7ff80000

0800d628 <_sbrk_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d06      	ldr	r5, [pc, #24]	; (800d644 <_sbrk_r+0x1c>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f6 f9c6 	bl	80039c4 <_sbrk>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_sbrk_r+0x1a>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_sbrk_r+0x1a>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	2000104c 	.word	0x2000104c

0800d648 <strncmp>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	b16a      	cbz	r2, 800d668 <strncmp+0x20>
 800d64c:	3901      	subs	r1, #1
 800d64e:	1884      	adds	r4, r0, r2
 800d650:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d654:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d658:	4293      	cmp	r3, r2
 800d65a:	d103      	bne.n	800d664 <strncmp+0x1c>
 800d65c:	42a0      	cmp	r0, r4
 800d65e:	d001      	beq.n	800d664 <strncmp+0x1c>
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1f5      	bne.n	800d650 <strncmp+0x8>
 800d664:	1a98      	subs	r0, r3, r2
 800d666:	bd10      	pop	{r4, pc}
 800d668:	4610      	mov	r0, r2
 800d66a:	e7fc      	b.n	800d666 <strncmp+0x1e>

0800d66c <__ascii_wctomb>:
 800d66c:	b149      	cbz	r1, 800d682 <__ascii_wctomb+0x16>
 800d66e:	2aff      	cmp	r2, #255	; 0xff
 800d670:	bf85      	ittet	hi
 800d672:	238a      	movhi	r3, #138	; 0x8a
 800d674:	6003      	strhi	r3, [r0, #0]
 800d676:	700a      	strbls	r2, [r1, #0]
 800d678:	f04f 30ff 	movhi.w	r0, #4294967295
 800d67c:	bf98      	it	ls
 800d67e:	2001      	movls	r0, #1
 800d680:	4770      	bx	lr
 800d682:	4608      	mov	r0, r1
 800d684:	4770      	bx	lr
	...

0800d688 <__assert_func>:
 800d688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d68a:	4614      	mov	r4, r2
 800d68c:	461a      	mov	r2, r3
 800d68e:	4b09      	ldr	r3, [pc, #36]	; (800d6b4 <__assert_func+0x2c>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4605      	mov	r5, r0
 800d694:	68d8      	ldr	r0, [r3, #12]
 800d696:	b14c      	cbz	r4, 800d6ac <__assert_func+0x24>
 800d698:	4b07      	ldr	r3, [pc, #28]	; (800d6b8 <__assert_func+0x30>)
 800d69a:	9100      	str	r1, [sp, #0]
 800d69c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6a0:	4906      	ldr	r1, [pc, #24]	; (800d6bc <__assert_func+0x34>)
 800d6a2:	462b      	mov	r3, r5
 800d6a4:	f000 f80e 	bl	800d6c4 <fiprintf>
 800d6a8:	f000 fa84 	bl	800dbb4 <abort>
 800d6ac:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <__assert_func+0x38>)
 800d6ae:	461c      	mov	r4, r3
 800d6b0:	e7f3      	b.n	800d69a <__assert_func+0x12>
 800d6b2:	bf00      	nop
 800d6b4:	20000054 	.word	0x20000054
 800d6b8:	080118ad 	.word	0x080118ad
 800d6bc:	080118ba 	.word	0x080118ba
 800d6c0:	080118e8 	.word	0x080118e8

0800d6c4 <fiprintf>:
 800d6c4:	b40e      	push	{r1, r2, r3}
 800d6c6:	b503      	push	{r0, r1, lr}
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	ab03      	add	r3, sp, #12
 800d6cc:	4805      	ldr	r0, [pc, #20]	; (800d6e4 <fiprintf+0x20>)
 800d6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6d2:	6800      	ldr	r0, [r0, #0]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	f000 f87d 	bl	800d7d4 <_vfiprintf_r>
 800d6da:	b002      	add	sp, #8
 800d6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6e0:	b003      	add	sp, #12
 800d6e2:	4770      	bx	lr
 800d6e4:	20000054 	.word	0x20000054

0800d6e8 <memmove>:
 800d6e8:	4288      	cmp	r0, r1
 800d6ea:	b510      	push	{r4, lr}
 800d6ec:	eb01 0402 	add.w	r4, r1, r2
 800d6f0:	d902      	bls.n	800d6f8 <memmove+0x10>
 800d6f2:	4284      	cmp	r4, r0
 800d6f4:	4623      	mov	r3, r4
 800d6f6:	d807      	bhi.n	800d708 <memmove+0x20>
 800d6f8:	1e43      	subs	r3, r0, #1
 800d6fa:	42a1      	cmp	r1, r4
 800d6fc:	d008      	beq.n	800d710 <memmove+0x28>
 800d6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d706:	e7f8      	b.n	800d6fa <memmove+0x12>
 800d708:	4402      	add	r2, r0
 800d70a:	4601      	mov	r1, r0
 800d70c:	428a      	cmp	r2, r1
 800d70e:	d100      	bne.n	800d712 <memmove+0x2a>
 800d710:	bd10      	pop	{r4, pc}
 800d712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d71a:	e7f7      	b.n	800d70c <memmove+0x24>

0800d71c <__malloc_lock>:
 800d71c:	4801      	ldr	r0, [pc, #4]	; (800d724 <__malloc_lock+0x8>)
 800d71e:	f000 bc09 	b.w	800df34 <__retarget_lock_acquire_recursive>
 800d722:	bf00      	nop
 800d724:	20001054 	.word	0x20001054

0800d728 <__malloc_unlock>:
 800d728:	4801      	ldr	r0, [pc, #4]	; (800d730 <__malloc_unlock+0x8>)
 800d72a:	f000 bc04 	b.w	800df36 <__retarget_lock_release_recursive>
 800d72e:	bf00      	nop
 800d730:	20001054 	.word	0x20001054

0800d734 <_realloc_r>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	4607      	mov	r7, r0
 800d738:	4614      	mov	r4, r2
 800d73a:	460e      	mov	r6, r1
 800d73c:	b921      	cbnz	r1, 800d748 <_realloc_r+0x14>
 800d73e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d742:	4611      	mov	r1, r2
 800d744:	f7ff bdb2 	b.w	800d2ac <_malloc_r>
 800d748:	b922      	cbnz	r2, 800d754 <_realloc_r+0x20>
 800d74a:	f7ff fd5f 	bl	800d20c <_free_r>
 800d74e:	4625      	mov	r5, r4
 800d750:	4628      	mov	r0, r5
 800d752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d754:	f000 fc54 	bl	800e000 <_malloc_usable_size_r>
 800d758:	42a0      	cmp	r0, r4
 800d75a:	d20f      	bcs.n	800d77c <_realloc_r+0x48>
 800d75c:	4621      	mov	r1, r4
 800d75e:	4638      	mov	r0, r7
 800d760:	f7ff fda4 	bl	800d2ac <_malloc_r>
 800d764:	4605      	mov	r5, r0
 800d766:	2800      	cmp	r0, #0
 800d768:	d0f2      	beq.n	800d750 <_realloc_r+0x1c>
 800d76a:	4631      	mov	r1, r6
 800d76c:	4622      	mov	r2, r4
 800d76e:	f7ff f875 	bl	800c85c <memcpy>
 800d772:	4631      	mov	r1, r6
 800d774:	4638      	mov	r0, r7
 800d776:	f7ff fd49 	bl	800d20c <_free_r>
 800d77a:	e7e9      	b.n	800d750 <_realloc_r+0x1c>
 800d77c:	4635      	mov	r5, r6
 800d77e:	e7e7      	b.n	800d750 <_realloc_r+0x1c>

0800d780 <__sfputc_r>:
 800d780:	6893      	ldr	r3, [r2, #8]
 800d782:	3b01      	subs	r3, #1
 800d784:	2b00      	cmp	r3, #0
 800d786:	b410      	push	{r4}
 800d788:	6093      	str	r3, [r2, #8]
 800d78a:	da08      	bge.n	800d79e <__sfputc_r+0x1e>
 800d78c:	6994      	ldr	r4, [r2, #24]
 800d78e:	42a3      	cmp	r3, r4
 800d790:	db01      	blt.n	800d796 <__sfputc_r+0x16>
 800d792:	290a      	cmp	r1, #10
 800d794:	d103      	bne.n	800d79e <__sfputc_r+0x1e>
 800d796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d79a:	f000 b94b 	b.w	800da34 <__swbuf_r>
 800d79e:	6813      	ldr	r3, [r2, #0]
 800d7a0:	1c58      	adds	r0, r3, #1
 800d7a2:	6010      	str	r0, [r2, #0]
 800d7a4:	7019      	strb	r1, [r3, #0]
 800d7a6:	4608      	mov	r0, r1
 800d7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <__sfputs_r>:
 800d7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	18d5      	adds	r5, r2, r3
 800d7b8:	42ac      	cmp	r4, r5
 800d7ba:	d101      	bne.n	800d7c0 <__sfputs_r+0x12>
 800d7bc:	2000      	movs	r0, #0
 800d7be:	e007      	b.n	800d7d0 <__sfputs_r+0x22>
 800d7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c4:	463a      	mov	r2, r7
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f7ff ffda 	bl	800d780 <__sfputc_r>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d1f3      	bne.n	800d7b8 <__sfputs_r+0xa>
 800d7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7d4 <_vfiprintf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	460d      	mov	r5, r1
 800d7da:	b09d      	sub	sp, #116	; 0x74
 800d7dc:	4614      	mov	r4, r2
 800d7de:	4698      	mov	r8, r3
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	b118      	cbz	r0, 800d7ec <_vfiprintf_r+0x18>
 800d7e4:	6983      	ldr	r3, [r0, #24]
 800d7e6:	b90b      	cbnz	r3, 800d7ec <_vfiprintf_r+0x18>
 800d7e8:	f000 fb06 	bl	800ddf8 <__sinit>
 800d7ec:	4b89      	ldr	r3, [pc, #548]	; (800da14 <_vfiprintf_r+0x240>)
 800d7ee:	429d      	cmp	r5, r3
 800d7f0:	d11b      	bne.n	800d82a <_vfiprintf_r+0x56>
 800d7f2:	6875      	ldr	r5, [r6, #4]
 800d7f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7f6:	07d9      	lsls	r1, r3, #31
 800d7f8:	d405      	bmi.n	800d806 <_vfiprintf_r+0x32>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	059a      	lsls	r2, r3, #22
 800d7fe:	d402      	bmi.n	800d806 <_vfiprintf_r+0x32>
 800d800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d802:	f000 fb97 	bl	800df34 <__retarget_lock_acquire_recursive>
 800d806:	89ab      	ldrh	r3, [r5, #12]
 800d808:	071b      	lsls	r3, r3, #28
 800d80a:	d501      	bpl.n	800d810 <_vfiprintf_r+0x3c>
 800d80c:	692b      	ldr	r3, [r5, #16]
 800d80e:	b9eb      	cbnz	r3, 800d84c <_vfiprintf_r+0x78>
 800d810:	4629      	mov	r1, r5
 800d812:	4630      	mov	r0, r6
 800d814:	f000 f960 	bl	800dad8 <__swsetup_r>
 800d818:	b1c0      	cbz	r0, 800d84c <_vfiprintf_r+0x78>
 800d81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d81c:	07dc      	lsls	r4, r3, #31
 800d81e:	d50e      	bpl.n	800d83e <_vfiprintf_r+0x6a>
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	b01d      	add	sp, #116	; 0x74
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	4b7b      	ldr	r3, [pc, #492]	; (800da18 <_vfiprintf_r+0x244>)
 800d82c:	429d      	cmp	r5, r3
 800d82e:	d101      	bne.n	800d834 <_vfiprintf_r+0x60>
 800d830:	68b5      	ldr	r5, [r6, #8]
 800d832:	e7df      	b.n	800d7f4 <_vfiprintf_r+0x20>
 800d834:	4b79      	ldr	r3, [pc, #484]	; (800da1c <_vfiprintf_r+0x248>)
 800d836:	429d      	cmp	r5, r3
 800d838:	bf08      	it	eq
 800d83a:	68f5      	ldreq	r5, [r6, #12]
 800d83c:	e7da      	b.n	800d7f4 <_vfiprintf_r+0x20>
 800d83e:	89ab      	ldrh	r3, [r5, #12]
 800d840:	0598      	lsls	r0, r3, #22
 800d842:	d4ed      	bmi.n	800d820 <_vfiprintf_r+0x4c>
 800d844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d846:	f000 fb76 	bl	800df36 <__retarget_lock_release_recursive>
 800d84a:	e7e9      	b.n	800d820 <_vfiprintf_r+0x4c>
 800d84c:	2300      	movs	r3, #0
 800d84e:	9309      	str	r3, [sp, #36]	; 0x24
 800d850:	2320      	movs	r3, #32
 800d852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d856:	f8cd 800c 	str.w	r8, [sp, #12]
 800d85a:	2330      	movs	r3, #48	; 0x30
 800d85c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da20 <_vfiprintf_r+0x24c>
 800d860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d864:	f04f 0901 	mov.w	r9, #1
 800d868:	4623      	mov	r3, r4
 800d86a:	469a      	mov	sl, r3
 800d86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d870:	b10a      	cbz	r2, 800d876 <_vfiprintf_r+0xa2>
 800d872:	2a25      	cmp	r2, #37	; 0x25
 800d874:	d1f9      	bne.n	800d86a <_vfiprintf_r+0x96>
 800d876:	ebba 0b04 	subs.w	fp, sl, r4
 800d87a:	d00b      	beq.n	800d894 <_vfiprintf_r+0xc0>
 800d87c:	465b      	mov	r3, fp
 800d87e:	4622      	mov	r2, r4
 800d880:	4629      	mov	r1, r5
 800d882:	4630      	mov	r0, r6
 800d884:	f7ff ff93 	bl	800d7ae <__sfputs_r>
 800d888:	3001      	adds	r0, #1
 800d88a:	f000 80aa 	beq.w	800d9e2 <_vfiprintf_r+0x20e>
 800d88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d890:	445a      	add	r2, fp
 800d892:	9209      	str	r2, [sp, #36]	; 0x24
 800d894:	f89a 3000 	ldrb.w	r3, [sl]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 80a2 	beq.w	800d9e2 <_vfiprintf_r+0x20e>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8a8:	f10a 0a01 	add.w	sl, sl, #1
 800d8ac:	9304      	str	r3, [sp, #16]
 800d8ae:	9307      	str	r3, [sp, #28]
 800d8b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8b6:	4654      	mov	r4, sl
 800d8b8:	2205      	movs	r2, #5
 800d8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8be:	4858      	ldr	r0, [pc, #352]	; (800da20 <_vfiprintf_r+0x24c>)
 800d8c0:	f7f2 fca6 	bl	8000210 <memchr>
 800d8c4:	9a04      	ldr	r2, [sp, #16]
 800d8c6:	b9d8      	cbnz	r0, 800d900 <_vfiprintf_r+0x12c>
 800d8c8:	06d1      	lsls	r1, r2, #27
 800d8ca:	bf44      	itt	mi
 800d8cc:	2320      	movmi	r3, #32
 800d8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8d2:	0713      	lsls	r3, r2, #28
 800d8d4:	bf44      	itt	mi
 800d8d6:	232b      	movmi	r3, #43	; 0x2b
 800d8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8e2:	d015      	beq.n	800d910 <_vfiprintf_r+0x13c>
 800d8e4:	9a07      	ldr	r2, [sp, #28]
 800d8e6:	4654      	mov	r4, sl
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f04f 0c0a 	mov.w	ip, #10
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8f4:	3b30      	subs	r3, #48	; 0x30
 800d8f6:	2b09      	cmp	r3, #9
 800d8f8:	d94e      	bls.n	800d998 <_vfiprintf_r+0x1c4>
 800d8fa:	b1b0      	cbz	r0, 800d92a <_vfiprintf_r+0x156>
 800d8fc:	9207      	str	r2, [sp, #28]
 800d8fe:	e014      	b.n	800d92a <_vfiprintf_r+0x156>
 800d900:	eba0 0308 	sub.w	r3, r0, r8
 800d904:	fa09 f303 	lsl.w	r3, r9, r3
 800d908:	4313      	orrs	r3, r2
 800d90a:	9304      	str	r3, [sp, #16]
 800d90c:	46a2      	mov	sl, r4
 800d90e:	e7d2      	b.n	800d8b6 <_vfiprintf_r+0xe2>
 800d910:	9b03      	ldr	r3, [sp, #12]
 800d912:	1d19      	adds	r1, r3, #4
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	9103      	str	r1, [sp, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	bfbb      	ittet	lt
 800d91c:	425b      	neglt	r3, r3
 800d91e:	f042 0202 	orrlt.w	r2, r2, #2
 800d922:	9307      	strge	r3, [sp, #28]
 800d924:	9307      	strlt	r3, [sp, #28]
 800d926:	bfb8      	it	lt
 800d928:	9204      	strlt	r2, [sp, #16]
 800d92a:	7823      	ldrb	r3, [r4, #0]
 800d92c:	2b2e      	cmp	r3, #46	; 0x2e
 800d92e:	d10c      	bne.n	800d94a <_vfiprintf_r+0x176>
 800d930:	7863      	ldrb	r3, [r4, #1]
 800d932:	2b2a      	cmp	r3, #42	; 0x2a
 800d934:	d135      	bne.n	800d9a2 <_vfiprintf_r+0x1ce>
 800d936:	9b03      	ldr	r3, [sp, #12]
 800d938:	1d1a      	adds	r2, r3, #4
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	9203      	str	r2, [sp, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bfb8      	it	lt
 800d942:	f04f 33ff 	movlt.w	r3, #4294967295
 800d946:	3402      	adds	r4, #2
 800d948:	9305      	str	r3, [sp, #20]
 800d94a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da30 <_vfiprintf_r+0x25c>
 800d94e:	7821      	ldrb	r1, [r4, #0]
 800d950:	2203      	movs	r2, #3
 800d952:	4650      	mov	r0, sl
 800d954:	f7f2 fc5c 	bl	8000210 <memchr>
 800d958:	b140      	cbz	r0, 800d96c <_vfiprintf_r+0x198>
 800d95a:	2340      	movs	r3, #64	; 0x40
 800d95c:	eba0 000a 	sub.w	r0, r0, sl
 800d960:	fa03 f000 	lsl.w	r0, r3, r0
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	4303      	orrs	r3, r0
 800d968:	3401      	adds	r4, #1
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d970:	482c      	ldr	r0, [pc, #176]	; (800da24 <_vfiprintf_r+0x250>)
 800d972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d976:	2206      	movs	r2, #6
 800d978:	f7f2 fc4a 	bl	8000210 <memchr>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d03f      	beq.n	800da00 <_vfiprintf_r+0x22c>
 800d980:	4b29      	ldr	r3, [pc, #164]	; (800da28 <_vfiprintf_r+0x254>)
 800d982:	bb1b      	cbnz	r3, 800d9cc <_vfiprintf_r+0x1f8>
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	3307      	adds	r3, #7
 800d988:	f023 0307 	bic.w	r3, r3, #7
 800d98c:	3308      	adds	r3, #8
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d992:	443b      	add	r3, r7
 800d994:	9309      	str	r3, [sp, #36]	; 0x24
 800d996:	e767      	b.n	800d868 <_vfiprintf_r+0x94>
 800d998:	fb0c 3202 	mla	r2, ip, r2, r3
 800d99c:	460c      	mov	r4, r1
 800d99e:	2001      	movs	r0, #1
 800d9a0:	e7a5      	b.n	800d8ee <_vfiprintf_r+0x11a>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	9305      	str	r3, [sp, #20]
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	f04f 0c0a 	mov.w	ip, #10
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9b4:	3a30      	subs	r2, #48	; 0x30
 800d9b6:	2a09      	cmp	r2, #9
 800d9b8:	d903      	bls.n	800d9c2 <_vfiprintf_r+0x1ee>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0c5      	beq.n	800d94a <_vfiprintf_r+0x176>
 800d9be:	9105      	str	r1, [sp, #20]
 800d9c0:	e7c3      	b.n	800d94a <_vfiprintf_r+0x176>
 800d9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e7f0      	b.n	800d9ae <_vfiprintf_r+0x1da>
 800d9cc:	ab03      	add	r3, sp, #12
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	462a      	mov	r2, r5
 800d9d2:	4b16      	ldr	r3, [pc, #88]	; (800da2c <_vfiprintf_r+0x258>)
 800d9d4:	a904      	add	r1, sp, #16
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f7fc fa76 	bl	8009ec8 <_printf_float>
 800d9dc:	4607      	mov	r7, r0
 800d9de:	1c78      	adds	r0, r7, #1
 800d9e0:	d1d6      	bne.n	800d990 <_vfiprintf_r+0x1bc>
 800d9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9e4:	07d9      	lsls	r1, r3, #31
 800d9e6:	d405      	bmi.n	800d9f4 <_vfiprintf_r+0x220>
 800d9e8:	89ab      	ldrh	r3, [r5, #12]
 800d9ea:	059a      	lsls	r2, r3, #22
 800d9ec:	d402      	bmi.n	800d9f4 <_vfiprintf_r+0x220>
 800d9ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9f0:	f000 faa1 	bl	800df36 <__retarget_lock_release_recursive>
 800d9f4:	89ab      	ldrh	r3, [r5, #12]
 800d9f6:	065b      	lsls	r3, r3, #25
 800d9f8:	f53f af12 	bmi.w	800d820 <_vfiprintf_r+0x4c>
 800d9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9fe:	e711      	b.n	800d824 <_vfiprintf_r+0x50>
 800da00:	ab03      	add	r3, sp, #12
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	462a      	mov	r2, r5
 800da06:	4b09      	ldr	r3, [pc, #36]	; (800da2c <_vfiprintf_r+0x258>)
 800da08:	a904      	add	r1, sp, #16
 800da0a:	4630      	mov	r0, r6
 800da0c:	f7fc fd00 	bl	800a410 <_printf_i>
 800da10:	e7e4      	b.n	800d9dc <_vfiprintf_r+0x208>
 800da12:	bf00      	nop
 800da14:	0801190c 	.word	0x0801190c
 800da18:	0801192c 	.word	0x0801192c
 800da1c:	080118ec 	.word	0x080118ec
 800da20:	0801189c 	.word	0x0801189c
 800da24:	080118a6 	.word	0x080118a6
 800da28:	08009ec9 	.word	0x08009ec9
 800da2c:	0800d7af 	.word	0x0800d7af
 800da30:	080118a2 	.word	0x080118a2

0800da34 <__swbuf_r>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	460e      	mov	r6, r1
 800da38:	4614      	mov	r4, r2
 800da3a:	4605      	mov	r5, r0
 800da3c:	b118      	cbz	r0, 800da46 <__swbuf_r+0x12>
 800da3e:	6983      	ldr	r3, [r0, #24]
 800da40:	b90b      	cbnz	r3, 800da46 <__swbuf_r+0x12>
 800da42:	f000 f9d9 	bl	800ddf8 <__sinit>
 800da46:	4b21      	ldr	r3, [pc, #132]	; (800dacc <__swbuf_r+0x98>)
 800da48:	429c      	cmp	r4, r3
 800da4a:	d12b      	bne.n	800daa4 <__swbuf_r+0x70>
 800da4c:	686c      	ldr	r4, [r5, #4]
 800da4e:	69a3      	ldr	r3, [r4, #24]
 800da50:	60a3      	str	r3, [r4, #8]
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	071a      	lsls	r2, r3, #28
 800da56:	d52f      	bpl.n	800dab8 <__swbuf_r+0x84>
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	b36b      	cbz	r3, 800dab8 <__swbuf_r+0x84>
 800da5c:	6923      	ldr	r3, [r4, #16]
 800da5e:	6820      	ldr	r0, [r4, #0]
 800da60:	1ac0      	subs	r0, r0, r3
 800da62:	6963      	ldr	r3, [r4, #20]
 800da64:	b2f6      	uxtb	r6, r6
 800da66:	4283      	cmp	r3, r0
 800da68:	4637      	mov	r7, r6
 800da6a:	dc04      	bgt.n	800da76 <__swbuf_r+0x42>
 800da6c:	4621      	mov	r1, r4
 800da6e:	4628      	mov	r0, r5
 800da70:	f000 f92e 	bl	800dcd0 <_fflush_r>
 800da74:	bb30      	cbnz	r0, 800dac4 <__swbuf_r+0x90>
 800da76:	68a3      	ldr	r3, [r4, #8]
 800da78:	3b01      	subs	r3, #1
 800da7a:	60a3      	str	r3, [r4, #8]
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	6022      	str	r2, [r4, #0]
 800da82:	701e      	strb	r6, [r3, #0]
 800da84:	6963      	ldr	r3, [r4, #20]
 800da86:	3001      	adds	r0, #1
 800da88:	4283      	cmp	r3, r0
 800da8a:	d004      	beq.n	800da96 <__swbuf_r+0x62>
 800da8c:	89a3      	ldrh	r3, [r4, #12]
 800da8e:	07db      	lsls	r3, r3, #31
 800da90:	d506      	bpl.n	800daa0 <__swbuf_r+0x6c>
 800da92:	2e0a      	cmp	r6, #10
 800da94:	d104      	bne.n	800daa0 <__swbuf_r+0x6c>
 800da96:	4621      	mov	r1, r4
 800da98:	4628      	mov	r0, r5
 800da9a:	f000 f919 	bl	800dcd0 <_fflush_r>
 800da9e:	b988      	cbnz	r0, 800dac4 <__swbuf_r+0x90>
 800daa0:	4638      	mov	r0, r7
 800daa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa4:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <__swbuf_r+0x9c>)
 800daa6:	429c      	cmp	r4, r3
 800daa8:	d101      	bne.n	800daae <__swbuf_r+0x7a>
 800daaa:	68ac      	ldr	r4, [r5, #8]
 800daac:	e7cf      	b.n	800da4e <__swbuf_r+0x1a>
 800daae:	4b09      	ldr	r3, [pc, #36]	; (800dad4 <__swbuf_r+0xa0>)
 800dab0:	429c      	cmp	r4, r3
 800dab2:	bf08      	it	eq
 800dab4:	68ec      	ldreq	r4, [r5, #12]
 800dab6:	e7ca      	b.n	800da4e <__swbuf_r+0x1a>
 800dab8:	4621      	mov	r1, r4
 800daba:	4628      	mov	r0, r5
 800dabc:	f000 f80c 	bl	800dad8 <__swsetup_r>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d0cb      	beq.n	800da5c <__swbuf_r+0x28>
 800dac4:	f04f 37ff 	mov.w	r7, #4294967295
 800dac8:	e7ea      	b.n	800daa0 <__swbuf_r+0x6c>
 800daca:	bf00      	nop
 800dacc:	0801190c 	.word	0x0801190c
 800dad0:	0801192c 	.word	0x0801192c
 800dad4:	080118ec 	.word	0x080118ec

0800dad8 <__swsetup_r>:
 800dad8:	4b32      	ldr	r3, [pc, #200]	; (800dba4 <__swsetup_r+0xcc>)
 800dada:	b570      	push	{r4, r5, r6, lr}
 800dadc:	681d      	ldr	r5, [r3, #0]
 800dade:	4606      	mov	r6, r0
 800dae0:	460c      	mov	r4, r1
 800dae2:	b125      	cbz	r5, 800daee <__swsetup_r+0x16>
 800dae4:	69ab      	ldr	r3, [r5, #24]
 800dae6:	b913      	cbnz	r3, 800daee <__swsetup_r+0x16>
 800dae8:	4628      	mov	r0, r5
 800daea:	f000 f985 	bl	800ddf8 <__sinit>
 800daee:	4b2e      	ldr	r3, [pc, #184]	; (800dba8 <__swsetup_r+0xd0>)
 800daf0:	429c      	cmp	r4, r3
 800daf2:	d10f      	bne.n	800db14 <__swsetup_r+0x3c>
 800daf4:	686c      	ldr	r4, [r5, #4]
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dafc:	0719      	lsls	r1, r3, #28
 800dafe:	d42c      	bmi.n	800db5a <__swsetup_r+0x82>
 800db00:	06dd      	lsls	r5, r3, #27
 800db02:	d411      	bmi.n	800db28 <__swsetup_r+0x50>
 800db04:	2309      	movs	r3, #9
 800db06:	6033      	str	r3, [r6, #0]
 800db08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db0c:	81a3      	strh	r3, [r4, #12]
 800db0e:	f04f 30ff 	mov.w	r0, #4294967295
 800db12:	e03e      	b.n	800db92 <__swsetup_r+0xba>
 800db14:	4b25      	ldr	r3, [pc, #148]	; (800dbac <__swsetup_r+0xd4>)
 800db16:	429c      	cmp	r4, r3
 800db18:	d101      	bne.n	800db1e <__swsetup_r+0x46>
 800db1a:	68ac      	ldr	r4, [r5, #8]
 800db1c:	e7eb      	b.n	800daf6 <__swsetup_r+0x1e>
 800db1e:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <__swsetup_r+0xd8>)
 800db20:	429c      	cmp	r4, r3
 800db22:	bf08      	it	eq
 800db24:	68ec      	ldreq	r4, [r5, #12]
 800db26:	e7e6      	b.n	800daf6 <__swsetup_r+0x1e>
 800db28:	0758      	lsls	r0, r3, #29
 800db2a:	d512      	bpl.n	800db52 <__swsetup_r+0x7a>
 800db2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db2e:	b141      	cbz	r1, 800db42 <__swsetup_r+0x6a>
 800db30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db34:	4299      	cmp	r1, r3
 800db36:	d002      	beq.n	800db3e <__swsetup_r+0x66>
 800db38:	4630      	mov	r0, r6
 800db3a:	f7ff fb67 	bl	800d20c <_free_r>
 800db3e:	2300      	movs	r3, #0
 800db40:	6363      	str	r3, [r4, #52]	; 0x34
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db48:	81a3      	strh	r3, [r4, #12]
 800db4a:	2300      	movs	r3, #0
 800db4c:	6063      	str	r3, [r4, #4]
 800db4e:	6923      	ldr	r3, [r4, #16]
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	f043 0308 	orr.w	r3, r3, #8
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	b94b      	cbnz	r3, 800db72 <__swsetup_r+0x9a>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db68:	d003      	beq.n	800db72 <__swsetup_r+0x9a>
 800db6a:	4621      	mov	r1, r4
 800db6c:	4630      	mov	r0, r6
 800db6e:	f000 fa07 	bl	800df80 <__smakebuf_r>
 800db72:	89a0      	ldrh	r0, [r4, #12]
 800db74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db78:	f010 0301 	ands.w	r3, r0, #1
 800db7c:	d00a      	beq.n	800db94 <__swsetup_r+0xbc>
 800db7e:	2300      	movs	r3, #0
 800db80:	60a3      	str	r3, [r4, #8]
 800db82:	6963      	ldr	r3, [r4, #20]
 800db84:	425b      	negs	r3, r3
 800db86:	61a3      	str	r3, [r4, #24]
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	b943      	cbnz	r3, 800db9e <__swsetup_r+0xc6>
 800db8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db90:	d1ba      	bne.n	800db08 <__swsetup_r+0x30>
 800db92:	bd70      	pop	{r4, r5, r6, pc}
 800db94:	0781      	lsls	r1, r0, #30
 800db96:	bf58      	it	pl
 800db98:	6963      	ldrpl	r3, [r4, #20]
 800db9a:	60a3      	str	r3, [r4, #8]
 800db9c:	e7f4      	b.n	800db88 <__swsetup_r+0xb0>
 800db9e:	2000      	movs	r0, #0
 800dba0:	e7f7      	b.n	800db92 <__swsetup_r+0xba>
 800dba2:	bf00      	nop
 800dba4:	20000054 	.word	0x20000054
 800dba8:	0801190c 	.word	0x0801190c
 800dbac:	0801192c 	.word	0x0801192c
 800dbb0:	080118ec 	.word	0x080118ec

0800dbb4 <abort>:
 800dbb4:	b508      	push	{r3, lr}
 800dbb6:	2006      	movs	r0, #6
 800dbb8:	f000 fa52 	bl	800e060 <raise>
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	f7f5 fe89 	bl	80038d4 <_exit>
	...

0800dbc4 <__sflush_r>:
 800dbc4:	898a      	ldrh	r2, [r1, #12]
 800dbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbca:	4605      	mov	r5, r0
 800dbcc:	0710      	lsls	r0, r2, #28
 800dbce:	460c      	mov	r4, r1
 800dbd0:	d458      	bmi.n	800dc84 <__sflush_r+0xc0>
 800dbd2:	684b      	ldr	r3, [r1, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dc05      	bgt.n	800dbe4 <__sflush_r+0x20>
 800dbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	dc02      	bgt.n	800dbe4 <__sflush_r+0x20>
 800dbde:	2000      	movs	r0, #0
 800dbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbe6:	2e00      	cmp	r6, #0
 800dbe8:	d0f9      	beq.n	800dbde <__sflush_r+0x1a>
 800dbea:	2300      	movs	r3, #0
 800dbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbf0:	682f      	ldr	r7, [r5, #0]
 800dbf2:	602b      	str	r3, [r5, #0]
 800dbf4:	d032      	beq.n	800dc5c <__sflush_r+0x98>
 800dbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	075a      	lsls	r2, r3, #29
 800dbfc:	d505      	bpl.n	800dc0a <__sflush_r+0x46>
 800dbfe:	6863      	ldr	r3, [r4, #4]
 800dc00:	1ac0      	subs	r0, r0, r3
 800dc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc04:	b10b      	cbz	r3, 800dc0a <__sflush_r+0x46>
 800dc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc08:	1ac0      	subs	r0, r0, r3
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc10:	6a21      	ldr	r1, [r4, #32]
 800dc12:	4628      	mov	r0, r5
 800dc14:	47b0      	blx	r6
 800dc16:	1c43      	adds	r3, r0, #1
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	d106      	bne.n	800dc2a <__sflush_r+0x66>
 800dc1c:	6829      	ldr	r1, [r5, #0]
 800dc1e:	291d      	cmp	r1, #29
 800dc20:	d82c      	bhi.n	800dc7c <__sflush_r+0xb8>
 800dc22:	4a2a      	ldr	r2, [pc, #168]	; (800dccc <__sflush_r+0x108>)
 800dc24:	40ca      	lsrs	r2, r1
 800dc26:	07d6      	lsls	r6, r2, #31
 800dc28:	d528      	bpl.n	800dc7c <__sflush_r+0xb8>
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	6062      	str	r2, [r4, #4]
 800dc2e:	04d9      	lsls	r1, r3, #19
 800dc30:	6922      	ldr	r2, [r4, #16]
 800dc32:	6022      	str	r2, [r4, #0]
 800dc34:	d504      	bpl.n	800dc40 <__sflush_r+0x7c>
 800dc36:	1c42      	adds	r2, r0, #1
 800dc38:	d101      	bne.n	800dc3e <__sflush_r+0x7a>
 800dc3a:	682b      	ldr	r3, [r5, #0]
 800dc3c:	b903      	cbnz	r3, 800dc40 <__sflush_r+0x7c>
 800dc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800dc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc42:	602f      	str	r7, [r5, #0]
 800dc44:	2900      	cmp	r1, #0
 800dc46:	d0ca      	beq.n	800dbde <__sflush_r+0x1a>
 800dc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc4c:	4299      	cmp	r1, r3
 800dc4e:	d002      	beq.n	800dc56 <__sflush_r+0x92>
 800dc50:	4628      	mov	r0, r5
 800dc52:	f7ff fadb 	bl	800d20c <_free_r>
 800dc56:	2000      	movs	r0, #0
 800dc58:	6360      	str	r0, [r4, #52]	; 0x34
 800dc5a:	e7c1      	b.n	800dbe0 <__sflush_r+0x1c>
 800dc5c:	6a21      	ldr	r1, [r4, #32]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	4628      	mov	r0, r5
 800dc62:	47b0      	blx	r6
 800dc64:	1c41      	adds	r1, r0, #1
 800dc66:	d1c7      	bne.n	800dbf8 <__sflush_r+0x34>
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d0c4      	beq.n	800dbf8 <__sflush_r+0x34>
 800dc6e:	2b1d      	cmp	r3, #29
 800dc70:	d001      	beq.n	800dc76 <__sflush_r+0xb2>
 800dc72:	2b16      	cmp	r3, #22
 800dc74:	d101      	bne.n	800dc7a <__sflush_r+0xb6>
 800dc76:	602f      	str	r7, [r5, #0]
 800dc78:	e7b1      	b.n	800dbde <__sflush_r+0x1a>
 800dc7a:	89a3      	ldrh	r3, [r4, #12]
 800dc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc80:	81a3      	strh	r3, [r4, #12]
 800dc82:	e7ad      	b.n	800dbe0 <__sflush_r+0x1c>
 800dc84:	690f      	ldr	r7, [r1, #16]
 800dc86:	2f00      	cmp	r7, #0
 800dc88:	d0a9      	beq.n	800dbde <__sflush_r+0x1a>
 800dc8a:	0793      	lsls	r3, r2, #30
 800dc8c:	680e      	ldr	r6, [r1, #0]
 800dc8e:	bf08      	it	eq
 800dc90:	694b      	ldreq	r3, [r1, #20]
 800dc92:	600f      	str	r7, [r1, #0]
 800dc94:	bf18      	it	ne
 800dc96:	2300      	movne	r3, #0
 800dc98:	eba6 0807 	sub.w	r8, r6, r7
 800dc9c:	608b      	str	r3, [r1, #8]
 800dc9e:	f1b8 0f00 	cmp.w	r8, #0
 800dca2:	dd9c      	ble.n	800dbde <__sflush_r+0x1a>
 800dca4:	6a21      	ldr	r1, [r4, #32]
 800dca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dca8:	4643      	mov	r3, r8
 800dcaa:	463a      	mov	r2, r7
 800dcac:	4628      	mov	r0, r5
 800dcae:	47b0      	blx	r6
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	dc06      	bgt.n	800dcc2 <__sflush_r+0xfe>
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc0:	e78e      	b.n	800dbe0 <__sflush_r+0x1c>
 800dcc2:	4407      	add	r7, r0
 800dcc4:	eba8 0800 	sub.w	r8, r8, r0
 800dcc8:	e7e9      	b.n	800dc9e <__sflush_r+0xda>
 800dcca:	bf00      	nop
 800dccc:	20400001 	.word	0x20400001

0800dcd0 <_fflush_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	690b      	ldr	r3, [r1, #16]
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	b913      	cbnz	r3, 800dce0 <_fflush_r+0x10>
 800dcda:	2500      	movs	r5, #0
 800dcdc:	4628      	mov	r0, r5
 800dcde:	bd38      	pop	{r3, r4, r5, pc}
 800dce0:	b118      	cbz	r0, 800dcea <_fflush_r+0x1a>
 800dce2:	6983      	ldr	r3, [r0, #24]
 800dce4:	b90b      	cbnz	r3, 800dcea <_fflush_r+0x1a>
 800dce6:	f000 f887 	bl	800ddf8 <__sinit>
 800dcea:	4b14      	ldr	r3, [pc, #80]	; (800dd3c <_fflush_r+0x6c>)
 800dcec:	429c      	cmp	r4, r3
 800dcee:	d11b      	bne.n	800dd28 <_fflush_r+0x58>
 800dcf0:	686c      	ldr	r4, [r5, #4]
 800dcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0ef      	beq.n	800dcda <_fflush_r+0xa>
 800dcfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcfc:	07d0      	lsls	r0, r2, #31
 800dcfe:	d404      	bmi.n	800dd0a <_fflush_r+0x3a>
 800dd00:	0599      	lsls	r1, r3, #22
 800dd02:	d402      	bmi.n	800dd0a <_fflush_r+0x3a>
 800dd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd06:	f000 f915 	bl	800df34 <__retarget_lock_acquire_recursive>
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	f7ff ff59 	bl	800dbc4 <__sflush_r>
 800dd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd14:	07da      	lsls	r2, r3, #31
 800dd16:	4605      	mov	r5, r0
 800dd18:	d4e0      	bmi.n	800dcdc <_fflush_r+0xc>
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	059b      	lsls	r3, r3, #22
 800dd1e:	d4dd      	bmi.n	800dcdc <_fflush_r+0xc>
 800dd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd22:	f000 f908 	bl	800df36 <__retarget_lock_release_recursive>
 800dd26:	e7d9      	b.n	800dcdc <_fflush_r+0xc>
 800dd28:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <_fflush_r+0x70>)
 800dd2a:	429c      	cmp	r4, r3
 800dd2c:	d101      	bne.n	800dd32 <_fflush_r+0x62>
 800dd2e:	68ac      	ldr	r4, [r5, #8]
 800dd30:	e7df      	b.n	800dcf2 <_fflush_r+0x22>
 800dd32:	4b04      	ldr	r3, [pc, #16]	; (800dd44 <_fflush_r+0x74>)
 800dd34:	429c      	cmp	r4, r3
 800dd36:	bf08      	it	eq
 800dd38:	68ec      	ldreq	r4, [r5, #12]
 800dd3a:	e7da      	b.n	800dcf2 <_fflush_r+0x22>
 800dd3c:	0801190c 	.word	0x0801190c
 800dd40:	0801192c 	.word	0x0801192c
 800dd44:	080118ec 	.word	0x080118ec

0800dd48 <std>:
 800dd48:	2300      	movs	r3, #0
 800dd4a:	b510      	push	{r4, lr}
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd56:	6083      	str	r3, [r0, #8]
 800dd58:	8181      	strh	r1, [r0, #12]
 800dd5a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd5c:	81c2      	strh	r2, [r0, #14]
 800dd5e:	6183      	str	r3, [r0, #24]
 800dd60:	4619      	mov	r1, r3
 800dd62:	2208      	movs	r2, #8
 800dd64:	305c      	adds	r0, #92	; 0x5c
 800dd66:	f7fc f807 	bl	8009d78 <memset>
 800dd6a:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <std+0x38>)
 800dd6c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd6e:	4b05      	ldr	r3, [pc, #20]	; (800dd84 <std+0x3c>)
 800dd70:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd72:	4b05      	ldr	r3, [pc, #20]	; (800dd88 <std+0x40>)
 800dd74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd76:	4b05      	ldr	r3, [pc, #20]	; (800dd8c <std+0x44>)
 800dd78:	6224      	str	r4, [r4, #32]
 800dd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd7c:	bd10      	pop	{r4, pc}
 800dd7e:	bf00      	nop
 800dd80:	0800e099 	.word	0x0800e099
 800dd84:	0800e0bb 	.word	0x0800e0bb
 800dd88:	0800e0f3 	.word	0x0800e0f3
 800dd8c:	0800e117 	.word	0x0800e117

0800dd90 <_cleanup_r>:
 800dd90:	4901      	ldr	r1, [pc, #4]	; (800dd98 <_cleanup_r+0x8>)
 800dd92:	f000 b8af 	b.w	800def4 <_fwalk_reent>
 800dd96:	bf00      	nop
 800dd98:	0800dcd1 	.word	0x0800dcd1

0800dd9c <__sfmoreglue>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	1e4a      	subs	r2, r1, #1
 800dda0:	2568      	movs	r5, #104	; 0x68
 800dda2:	4355      	muls	r5, r2
 800dda4:	460e      	mov	r6, r1
 800dda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddaa:	f7ff fa7f 	bl	800d2ac <_malloc_r>
 800ddae:	4604      	mov	r4, r0
 800ddb0:	b140      	cbz	r0, 800ddc4 <__sfmoreglue+0x28>
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	e9c0 1600 	strd	r1, r6, [r0]
 800ddb8:	300c      	adds	r0, #12
 800ddba:	60a0      	str	r0, [r4, #8]
 800ddbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ddc0:	f7fb ffda 	bl	8009d78 <memset>
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}

0800ddc8 <__sfp_lock_acquire>:
 800ddc8:	4801      	ldr	r0, [pc, #4]	; (800ddd0 <__sfp_lock_acquire+0x8>)
 800ddca:	f000 b8b3 	b.w	800df34 <__retarget_lock_acquire_recursive>
 800ddce:	bf00      	nop
 800ddd0:	20001058 	.word	0x20001058

0800ddd4 <__sfp_lock_release>:
 800ddd4:	4801      	ldr	r0, [pc, #4]	; (800dddc <__sfp_lock_release+0x8>)
 800ddd6:	f000 b8ae 	b.w	800df36 <__retarget_lock_release_recursive>
 800ddda:	bf00      	nop
 800dddc:	20001058 	.word	0x20001058

0800dde0 <__sinit_lock_acquire>:
 800dde0:	4801      	ldr	r0, [pc, #4]	; (800dde8 <__sinit_lock_acquire+0x8>)
 800dde2:	f000 b8a7 	b.w	800df34 <__retarget_lock_acquire_recursive>
 800dde6:	bf00      	nop
 800dde8:	20001053 	.word	0x20001053

0800ddec <__sinit_lock_release>:
 800ddec:	4801      	ldr	r0, [pc, #4]	; (800ddf4 <__sinit_lock_release+0x8>)
 800ddee:	f000 b8a2 	b.w	800df36 <__retarget_lock_release_recursive>
 800ddf2:	bf00      	nop
 800ddf4:	20001053 	.word	0x20001053

0800ddf8 <__sinit>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	f7ff fff0 	bl	800dde0 <__sinit_lock_acquire>
 800de00:	69a3      	ldr	r3, [r4, #24]
 800de02:	b11b      	cbz	r3, 800de0c <__sinit+0x14>
 800de04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de08:	f7ff bff0 	b.w	800ddec <__sinit_lock_release>
 800de0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de10:	6523      	str	r3, [r4, #80]	; 0x50
 800de12:	4b13      	ldr	r3, [pc, #76]	; (800de60 <__sinit+0x68>)
 800de14:	4a13      	ldr	r2, [pc, #76]	; (800de64 <__sinit+0x6c>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	62a2      	str	r2, [r4, #40]	; 0x28
 800de1a:	42a3      	cmp	r3, r4
 800de1c:	bf04      	itt	eq
 800de1e:	2301      	moveq	r3, #1
 800de20:	61a3      	streq	r3, [r4, #24]
 800de22:	4620      	mov	r0, r4
 800de24:	f000 f820 	bl	800de68 <__sfp>
 800de28:	6060      	str	r0, [r4, #4]
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 f81c 	bl	800de68 <__sfp>
 800de30:	60a0      	str	r0, [r4, #8]
 800de32:	4620      	mov	r0, r4
 800de34:	f000 f818 	bl	800de68 <__sfp>
 800de38:	2200      	movs	r2, #0
 800de3a:	60e0      	str	r0, [r4, #12]
 800de3c:	2104      	movs	r1, #4
 800de3e:	6860      	ldr	r0, [r4, #4]
 800de40:	f7ff ff82 	bl	800dd48 <std>
 800de44:	68a0      	ldr	r0, [r4, #8]
 800de46:	2201      	movs	r2, #1
 800de48:	2109      	movs	r1, #9
 800de4a:	f7ff ff7d 	bl	800dd48 <std>
 800de4e:	68e0      	ldr	r0, [r4, #12]
 800de50:	2202      	movs	r2, #2
 800de52:	2112      	movs	r1, #18
 800de54:	f7ff ff78 	bl	800dd48 <std>
 800de58:	2301      	movs	r3, #1
 800de5a:	61a3      	str	r3, [r4, #24]
 800de5c:	e7d2      	b.n	800de04 <__sinit+0xc>
 800de5e:	bf00      	nop
 800de60:	0801149c 	.word	0x0801149c
 800de64:	0800dd91 	.word	0x0800dd91

0800de68 <__sfp>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	4607      	mov	r7, r0
 800de6c:	f7ff ffac 	bl	800ddc8 <__sfp_lock_acquire>
 800de70:	4b1e      	ldr	r3, [pc, #120]	; (800deec <__sfp+0x84>)
 800de72:	681e      	ldr	r6, [r3, #0]
 800de74:	69b3      	ldr	r3, [r6, #24]
 800de76:	b913      	cbnz	r3, 800de7e <__sfp+0x16>
 800de78:	4630      	mov	r0, r6
 800de7a:	f7ff ffbd 	bl	800ddf8 <__sinit>
 800de7e:	3648      	adds	r6, #72	; 0x48
 800de80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de84:	3b01      	subs	r3, #1
 800de86:	d503      	bpl.n	800de90 <__sfp+0x28>
 800de88:	6833      	ldr	r3, [r6, #0]
 800de8a:	b30b      	cbz	r3, 800ded0 <__sfp+0x68>
 800de8c:	6836      	ldr	r6, [r6, #0]
 800de8e:	e7f7      	b.n	800de80 <__sfp+0x18>
 800de90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de94:	b9d5      	cbnz	r5, 800decc <__sfp+0x64>
 800de96:	4b16      	ldr	r3, [pc, #88]	; (800def0 <__sfp+0x88>)
 800de98:	60e3      	str	r3, [r4, #12]
 800de9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de9e:	6665      	str	r5, [r4, #100]	; 0x64
 800dea0:	f000 f847 	bl	800df32 <__retarget_lock_init_recursive>
 800dea4:	f7ff ff96 	bl	800ddd4 <__sfp_lock_release>
 800dea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800deac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800deb0:	6025      	str	r5, [r4, #0]
 800deb2:	61a5      	str	r5, [r4, #24]
 800deb4:	2208      	movs	r2, #8
 800deb6:	4629      	mov	r1, r5
 800deb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800debc:	f7fb ff5c 	bl	8009d78 <memset>
 800dec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dec8:	4620      	mov	r0, r4
 800deca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800decc:	3468      	adds	r4, #104	; 0x68
 800dece:	e7d9      	b.n	800de84 <__sfp+0x1c>
 800ded0:	2104      	movs	r1, #4
 800ded2:	4638      	mov	r0, r7
 800ded4:	f7ff ff62 	bl	800dd9c <__sfmoreglue>
 800ded8:	4604      	mov	r4, r0
 800deda:	6030      	str	r0, [r6, #0]
 800dedc:	2800      	cmp	r0, #0
 800dede:	d1d5      	bne.n	800de8c <__sfp+0x24>
 800dee0:	f7ff ff78 	bl	800ddd4 <__sfp_lock_release>
 800dee4:	230c      	movs	r3, #12
 800dee6:	603b      	str	r3, [r7, #0]
 800dee8:	e7ee      	b.n	800dec8 <__sfp+0x60>
 800deea:	bf00      	nop
 800deec:	0801149c 	.word	0x0801149c
 800def0:	ffff0001 	.word	0xffff0001

0800def4 <_fwalk_reent>:
 800def4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800def8:	4606      	mov	r6, r0
 800defa:	4688      	mov	r8, r1
 800defc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df00:	2700      	movs	r7, #0
 800df02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df06:	f1b9 0901 	subs.w	r9, r9, #1
 800df0a:	d505      	bpl.n	800df18 <_fwalk_reent+0x24>
 800df0c:	6824      	ldr	r4, [r4, #0]
 800df0e:	2c00      	cmp	r4, #0
 800df10:	d1f7      	bne.n	800df02 <_fwalk_reent+0xe>
 800df12:	4638      	mov	r0, r7
 800df14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df18:	89ab      	ldrh	r3, [r5, #12]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d907      	bls.n	800df2e <_fwalk_reent+0x3a>
 800df1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df22:	3301      	adds	r3, #1
 800df24:	d003      	beq.n	800df2e <_fwalk_reent+0x3a>
 800df26:	4629      	mov	r1, r5
 800df28:	4630      	mov	r0, r6
 800df2a:	47c0      	blx	r8
 800df2c:	4307      	orrs	r7, r0
 800df2e:	3568      	adds	r5, #104	; 0x68
 800df30:	e7e9      	b.n	800df06 <_fwalk_reent+0x12>

0800df32 <__retarget_lock_init_recursive>:
 800df32:	4770      	bx	lr

0800df34 <__retarget_lock_acquire_recursive>:
 800df34:	4770      	bx	lr

0800df36 <__retarget_lock_release_recursive>:
 800df36:	4770      	bx	lr

0800df38 <__swhatbuf_r>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	460e      	mov	r6, r1
 800df3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df40:	2900      	cmp	r1, #0
 800df42:	b096      	sub	sp, #88	; 0x58
 800df44:	4614      	mov	r4, r2
 800df46:	461d      	mov	r5, r3
 800df48:	da07      	bge.n	800df5a <__swhatbuf_r+0x22>
 800df4a:	2300      	movs	r3, #0
 800df4c:	602b      	str	r3, [r5, #0]
 800df4e:	89b3      	ldrh	r3, [r6, #12]
 800df50:	061a      	lsls	r2, r3, #24
 800df52:	d410      	bmi.n	800df76 <__swhatbuf_r+0x3e>
 800df54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df58:	e00e      	b.n	800df78 <__swhatbuf_r+0x40>
 800df5a:	466a      	mov	r2, sp
 800df5c:	f000 f902 	bl	800e164 <_fstat_r>
 800df60:	2800      	cmp	r0, #0
 800df62:	dbf2      	blt.n	800df4a <__swhatbuf_r+0x12>
 800df64:	9a01      	ldr	r2, [sp, #4]
 800df66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df6e:	425a      	negs	r2, r3
 800df70:	415a      	adcs	r2, r3
 800df72:	602a      	str	r2, [r5, #0]
 800df74:	e7ee      	b.n	800df54 <__swhatbuf_r+0x1c>
 800df76:	2340      	movs	r3, #64	; 0x40
 800df78:	2000      	movs	r0, #0
 800df7a:	6023      	str	r3, [r4, #0]
 800df7c:	b016      	add	sp, #88	; 0x58
 800df7e:	bd70      	pop	{r4, r5, r6, pc}

0800df80 <__smakebuf_r>:
 800df80:	898b      	ldrh	r3, [r1, #12]
 800df82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df84:	079d      	lsls	r5, r3, #30
 800df86:	4606      	mov	r6, r0
 800df88:	460c      	mov	r4, r1
 800df8a:	d507      	bpl.n	800df9c <__smakebuf_r+0x1c>
 800df8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	6123      	str	r3, [r4, #16]
 800df94:	2301      	movs	r3, #1
 800df96:	6163      	str	r3, [r4, #20]
 800df98:	b002      	add	sp, #8
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
 800df9c:	ab01      	add	r3, sp, #4
 800df9e:	466a      	mov	r2, sp
 800dfa0:	f7ff ffca 	bl	800df38 <__swhatbuf_r>
 800dfa4:	9900      	ldr	r1, [sp, #0]
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f7ff f97f 	bl	800d2ac <_malloc_r>
 800dfae:	b948      	cbnz	r0, 800dfc4 <__smakebuf_r+0x44>
 800dfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb4:	059a      	lsls	r2, r3, #22
 800dfb6:	d4ef      	bmi.n	800df98 <__smakebuf_r+0x18>
 800dfb8:	f023 0303 	bic.w	r3, r3, #3
 800dfbc:	f043 0302 	orr.w	r3, r3, #2
 800dfc0:	81a3      	strh	r3, [r4, #12]
 800dfc2:	e7e3      	b.n	800df8c <__smakebuf_r+0xc>
 800dfc4:	4b0d      	ldr	r3, [pc, #52]	; (800dffc <__smakebuf_r+0x7c>)
 800dfc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfc8:	89a3      	ldrh	r3, [r4, #12]
 800dfca:	6020      	str	r0, [r4, #0]
 800dfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfd0:	81a3      	strh	r3, [r4, #12]
 800dfd2:	9b00      	ldr	r3, [sp, #0]
 800dfd4:	6163      	str	r3, [r4, #20]
 800dfd6:	9b01      	ldr	r3, [sp, #4]
 800dfd8:	6120      	str	r0, [r4, #16]
 800dfda:	b15b      	cbz	r3, 800dff4 <__smakebuf_r+0x74>
 800dfdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f000 f8d1 	bl	800e188 <_isatty_r>
 800dfe6:	b128      	cbz	r0, 800dff4 <__smakebuf_r+0x74>
 800dfe8:	89a3      	ldrh	r3, [r4, #12]
 800dfea:	f023 0303 	bic.w	r3, r3, #3
 800dfee:	f043 0301 	orr.w	r3, r3, #1
 800dff2:	81a3      	strh	r3, [r4, #12]
 800dff4:	89a0      	ldrh	r0, [r4, #12]
 800dff6:	4305      	orrs	r5, r0
 800dff8:	81a5      	strh	r5, [r4, #12]
 800dffa:	e7cd      	b.n	800df98 <__smakebuf_r+0x18>
 800dffc:	0800dd91 	.word	0x0800dd91

0800e000 <_malloc_usable_size_r>:
 800e000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e004:	1f18      	subs	r0, r3, #4
 800e006:	2b00      	cmp	r3, #0
 800e008:	bfbc      	itt	lt
 800e00a:	580b      	ldrlt	r3, [r1, r0]
 800e00c:	18c0      	addlt	r0, r0, r3
 800e00e:	4770      	bx	lr

0800e010 <_raise_r>:
 800e010:	291f      	cmp	r1, #31
 800e012:	b538      	push	{r3, r4, r5, lr}
 800e014:	4604      	mov	r4, r0
 800e016:	460d      	mov	r5, r1
 800e018:	d904      	bls.n	800e024 <_raise_r+0x14>
 800e01a:	2316      	movs	r3, #22
 800e01c:	6003      	str	r3, [r0, #0]
 800e01e:	f04f 30ff 	mov.w	r0, #4294967295
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e026:	b112      	cbz	r2, 800e02e <_raise_r+0x1e>
 800e028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e02c:	b94b      	cbnz	r3, 800e042 <_raise_r+0x32>
 800e02e:	4620      	mov	r0, r4
 800e030:	f000 f830 	bl	800e094 <_getpid_r>
 800e034:	462a      	mov	r2, r5
 800e036:	4601      	mov	r1, r0
 800e038:	4620      	mov	r0, r4
 800e03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e03e:	f000 b817 	b.w	800e070 <_kill_r>
 800e042:	2b01      	cmp	r3, #1
 800e044:	d00a      	beq.n	800e05c <_raise_r+0x4c>
 800e046:	1c59      	adds	r1, r3, #1
 800e048:	d103      	bne.n	800e052 <_raise_r+0x42>
 800e04a:	2316      	movs	r3, #22
 800e04c:	6003      	str	r3, [r0, #0]
 800e04e:	2001      	movs	r0, #1
 800e050:	e7e7      	b.n	800e022 <_raise_r+0x12>
 800e052:	2400      	movs	r4, #0
 800e054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e058:	4628      	mov	r0, r5
 800e05a:	4798      	blx	r3
 800e05c:	2000      	movs	r0, #0
 800e05e:	e7e0      	b.n	800e022 <_raise_r+0x12>

0800e060 <raise>:
 800e060:	4b02      	ldr	r3, [pc, #8]	; (800e06c <raise+0xc>)
 800e062:	4601      	mov	r1, r0
 800e064:	6818      	ldr	r0, [r3, #0]
 800e066:	f7ff bfd3 	b.w	800e010 <_raise_r>
 800e06a:	bf00      	nop
 800e06c:	20000054 	.word	0x20000054

0800e070 <_kill_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d07      	ldr	r5, [pc, #28]	; (800e090 <_kill_r+0x20>)
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	4608      	mov	r0, r1
 800e07a:	4611      	mov	r1, r2
 800e07c:	602b      	str	r3, [r5, #0]
 800e07e:	f7f5 fc19 	bl	80038b4 <_kill>
 800e082:	1c43      	adds	r3, r0, #1
 800e084:	d102      	bne.n	800e08c <_kill_r+0x1c>
 800e086:	682b      	ldr	r3, [r5, #0]
 800e088:	b103      	cbz	r3, 800e08c <_kill_r+0x1c>
 800e08a:	6023      	str	r3, [r4, #0]
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
 800e08e:	bf00      	nop
 800e090:	2000104c 	.word	0x2000104c

0800e094 <_getpid_r>:
 800e094:	f7f5 bc06 	b.w	80038a4 <_getpid>

0800e098 <__sread>:
 800e098:	b510      	push	{r4, lr}
 800e09a:	460c      	mov	r4, r1
 800e09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a0:	f000 f894 	bl	800e1cc <_read_r>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	bfab      	itete	ge
 800e0a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e0ac:	181b      	addge	r3, r3, r0
 800e0ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0b2:	bfac      	ite	ge
 800e0b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0b6:	81a3      	strhlt	r3, [r4, #12]
 800e0b8:	bd10      	pop	{r4, pc}

0800e0ba <__swrite>:
 800e0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0be:	461f      	mov	r7, r3
 800e0c0:	898b      	ldrh	r3, [r1, #12]
 800e0c2:	05db      	lsls	r3, r3, #23
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	4616      	mov	r6, r2
 800e0ca:	d505      	bpl.n	800e0d8 <__swrite+0x1e>
 800e0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f000 f868 	bl	800e1a8 <_lseek_r>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	463b      	mov	r3, r7
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ee:	f000 b817 	b.w	800e120 <_write_r>

0800e0f2 <__sseek>:
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0fa:	f000 f855 	bl	800e1a8 <_lseek_r>
 800e0fe:	1c43      	adds	r3, r0, #1
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	bf15      	itete	ne
 800e104:	6560      	strne	r0, [r4, #84]	; 0x54
 800e106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e10a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e10e:	81a3      	strheq	r3, [r4, #12]
 800e110:	bf18      	it	ne
 800e112:	81a3      	strhne	r3, [r4, #12]
 800e114:	bd10      	pop	{r4, pc}

0800e116 <__sclose>:
 800e116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e11a:	f000 b813 	b.w	800e144 <_close_r>
	...

0800e120 <_write_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d07      	ldr	r5, [pc, #28]	; (800e140 <_write_r+0x20>)
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	2200      	movs	r2, #0
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	f7f5 fbf7 	bl	8003922 <_write>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_write_r+0x1e>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_write_r+0x1e>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	2000104c 	.word	0x2000104c

0800e144 <_close_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d06      	ldr	r5, [pc, #24]	; (800e160 <_close_r+0x1c>)
 800e148:	2300      	movs	r3, #0
 800e14a:	4604      	mov	r4, r0
 800e14c:	4608      	mov	r0, r1
 800e14e:	602b      	str	r3, [r5, #0]
 800e150:	f7f5 fc03 	bl	800395a <_close>
 800e154:	1c43      	adds	r3, r0, #1
 800e156:	d102      	bne.n	800e15e <_close_r+0x1a>
 800e158:	682b      	ldr	r3, [r5, #0]
 800e15a:	b103      	cbz	r3, 800e15e <_close_r+0x1a>
 800e15c:	6023      	str	r3, [r4, #0]
 800e15e:	bd38      	pop	{r3, r4, r5, pc}
 800e160:	2000104c 	.word	0x2000104c

0800e164 <_fstat_r>:
 800e164:	b538      	push	{r3, r4, r5, lr}
 800e166:	4d07      	ldr	r5, [pc, #28]	; (800e184 <_fstat_r+0x20>)
 800e168:	2300      	movs	r3, #0
 800e16a:	4604      	mov	r4, r0
 800e16c:	4608      	mov	r0, r1
 800e16e:	4611      	mov	r1, r2
 800e170:	602b      	str	r3, [r5, #0]
 800e172:	f7f5 fbfe 	bl	8003972 <_fstat>
 800e176:	1c43      	adds	r3, r0, #1
 800e178:	d102      	bne.n	800e180 <_fstat_r+0x1c>
 800e17a:	682b      	ldr	r3, [r5, #0]
 800e17c:	b103      	cbz	r3, 800e180 <_fstat_r+0x1c>
 800e17e:	6023      	str	r3, [r4, #0]
 800e180:	bd38      	pop	{r3, r4, r5, pc}
 800e182:	bf00      	nop
 800e184:	2000104c 	.word	0x2000104c

0800e188 <_isatty_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d06      	ldr	r5, [pc, #24]	; (800e1a4 <_isatty_r+0x1c>)
 800e18c:	2300      	movs	r3, #0
 800e18e:	4604      	mov	r4, r0
 800e190:	4608      	mov	r0, r1
 800e192:	602b      	str	r3, [r5, #0]
 800e194:	f7f5 fbfd 	bl	8003992 <_isatty>
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	d102      	bne.n	800e1a2 <_isatty_r+0x1a>
 800e19c:	682b      	ldr	r3, [r5, #0]
 800e19e:	b103      	cbz	r3, 800e1a2 <_isatty_r+0x1a>
 800e1a0:	6023      	str	r3, [r4, #0]
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	2000104c 	.word	0x2000104c

0800e1a8 <_lseek_r>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4d07      	ldr	r5, [pc, #28]	; (800e1c8 <_lseek_r+0x20>)
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	4608      	mov	r0, r1
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	602a      	str	r2, [r5, #0]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f7f5 fbf6 	bl	80039a8 <_lseek>
 800e1bc:	1c43      	adds	r3, r0, #1
 800e1be:	d102      	bne.n	800e1c6 <_lseek_r+0x1e>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	b103      	cbz	r3, 800e1c6 <_lseek_r+0x1e>
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	2000104c 	.word	0x2000104c

0800e1cc <_read_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	4d07      	ldr	r5, [pc, #28]	; (800e1ec <_read_r+0x20>)
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	4608      	mov	r0, r1
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	602a      	str	r2, [r5, #0]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	f7f5 fb84 	bl	80038e8 <_read>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_read_r+0x1e>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_read_r+0x1e>
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	2000104c 	.word	0x2000104c

0800e1f0 <_init>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	bf00      	nop
 800e1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f6:	bc08      	pop	{r3}
 800e1f8:	469e      	mov	lr, r3
 800e1fa:	4770      	bx	lr

0800e1fc <_fini>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr
